import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as a,o as i}from"./app-CzakNbIb.js";const l="/assets/662652-20231106193707000-841946224-Dx6lD11U.png",p="/assets/662652-20231106193707029-542742100-CP0NXs5T.png",r="/assets/662652-20231106193706982-1707664312-DnoCpRsC.png",t="/assets/662652-20231106193706986-1517149482-yqOE1R8O.png",o="/assets/662652-20231106193707016-761859058-BiMgaltu.png",d="/assets/662652-20231106193707326-357825756-76N64QiP.png",c="/assets/662652-20231106193707281-1531817698-FPrPaFAC.png",u="/assets/662652-20231106193707274-1531907593-XAgdjBZI.png",v="/assets/662652-20231106193707363-796606776-DI4J5caQ.png",g="/assets/662652-20231106193707410-790444905-DwXPR8H2.png",m="/assets/662652-20231106193707411-1279746411-n3ww_Nig.png",h="/assets/662652-20231106193707374-1670230908-C7XC0yKP.png",b="/assets/662652-20231106193707416-44640007-ByPD1PnM.png",_="/assets/662652-20231106193707465-1203999077-DOcsnxH2.png",k="/assets/662652-20231106193707295-847431523-zHA2FQN1.png",x="/assets/662652-20231106193707512-1798412475-gqrJe8Ct.png",f="/assets/662652-20231106193707651-1679751573-5f3Xdb1E.png",y="/assets/662652-20231106193707406-1823031181-Ce3vb02A.png",N="/assets/662652-20231106193707520-61228510-ymusxdGj.png",q="/assets/662652-20231106193707409-396108095-yGWGgrNJ.png",D="/assets/662652-20231106193707396-69767709-D3WipYhO.png",A="/assets/662652-20231106193707478-969803656-B1e_aSrK.png",w="/assets/662652-20231106193707303-2075170005-HPENLUEX.png",F="/assets/662652-20231106193707446-266759946-WrjyQJz4.png",P="/assets/662652-20231106193707383-1221743531-DH4ien69.png",$="/assets/662652-20231106193707399-1330598152-CWjbojZt.png",z="/assets/662652-20231106193707362-521933667-DEIrW-58.png",G="/assets/662652-20231106193707448-695256909-Bm7X9vrU.png",S="/assets/662652-20231106193707473-385159221-B0S8XQZP.png",C="/assets/662652-20231106193707260-88790122-D6Ud7Dtn.png",X="/assets/662652-20231106193707448-1398996661-BXBtLhg9.png",I="/assets/662652-20231106193707440-29911440-CnHxUHGX.png",R={};function j(T,s){return i(),e("div",null,s[0]||(s[0]=[a('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><blockquote><p>Nexus 是支持 Nuget、Docker、Npm 等多种包的仓库管理器，可用做私有包的存储分发，缓存官方包。本篇将手把手教学使用 Nexus 搭建自己的 NuGe t&amp; Docker 私有仓库。</p></blockquote><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ul><li><p>私有化仓库管理</p></li><li><p>支持权限管理</p></li><li><p>缓存依赖包</p></li><li><p>支持插件机制和 REST API</p></li><li><p>成熟稳定强大</p></li><li><p>支持的仓库/包管理 <img src="'+l+`" alt="" loading="lazy"></p></li></ul><h3 id="使用情况" tabindex="-1"><a class="header-anchor" href="#使用情况"><span>使用情况</span></a></h3><ul><li>成熟文档，使用四平八稳，部署完基本就不需要操心太多</li><li>功能强大，启动起来内存大概 1.4G+，目前团队使用4G内存的服务器部署，差不多是够用的</li><li>支持 docker 仓库，尝试一番终于搞定，后续会在 DevOps 系列中使用</li><li>文档比较完善，遇到问题可以多理解理解文档</li></ul><h2 id="安装部署" tabindex="-1"><a class="header-anchor" href="#安装部署"><span>安装部署</span></a></h2><h3 id="使用-docker-compose-安装" tabindex="-1"><a class="header-anchor" href="#使用-docker-compose-安装"><span>使用 docker compose 安装</span></a></h3><ul><li><p>创建数据挂载目录并赋予权限：以 UID 200 的形式运行 <code>mkdir ./data &amp;&amp; chown -R 200 ./data</code></p></li><li><p>指定版本：<code>sonatype/nexus3:3.61.0</code></p></li><li><p>默认端口：<code>8081</code></p></li><li><p>指定访问前缀：/</p></li><li><p>指定网络：devopsnetwork （<code>docker network create devopsnetwork</code>）</p></li><li><p>部署服务器 IP：<code>192.168.123.214</code></p></li><li><p>创建 compose.yml</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> version: &#39;3.1&#39;</span></span>
<span class="line"><span> services:</span></span>
<span class="line"><span>   nexus:</span></span>
<span class="line"><span>     image: sonatype/nexus3:3.61.0</span></span>
<span class="line"><span>     container_name: nexus_3_61 </span></span>
<span class="line"><span>     restart: always</span></span>
<span class="line"><span>     environment:</span></span>
<span class="line"><span>     # Nexus 上下文路径</span></span>
<span class="line"><span>        NEXUS_CONTEXT: /       </span></span>
<span class="line"><span>     # 指定jvm参数</span></span>
<span class="line"><span>        INSTALL4J_ADD_VM_PARAMS: -Xms1g -Xmx1g -XX:MaxDirectMemorySize=3g</span></span>
<span class="line"><span>     volumes:</span></span>
<span class="line"><span>     # 需要先给权限 chown -R 200 ./data</span></span>
<span class="line"><span>     - ./data:/nexus-data</span></span>
<span class="line"><span>     ports:</span></span>
<span class="line"><span>       - &quot;8081:8081&quot;</span></span>
<span class="line"><span>       </span></span>
<span class="line"><span>     networks:</span></span>
<span class="line"><span>       - devopsnetwork</span></span>
<span class="line"><span></span></span>
<span class="line"><span> networks:</span></span>
<span class="line"><span>   devopsnetwork:</span></span>
<span class="line"><span>     external: true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行：<code>docker compose up -d</code></p></li><li><p>运行需要时间，耐心等待 2-3 分钟，访问：<code>http://192.168.123.214:8081/</code></p></li><li><p>可以看到提示默认 admin 的密码在 ./data/admin.password ，获取后点击右上角 Sign In 进行登录</p><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>登录成功会进行引导修改密码 devops666 和禁用匿名访问</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h3 id="使用-nginx-配置域名访问" tabindex="-1"><a class="header-anchor" href="#使用-nginx-配置域名访问"><span>使用 nginx 配置域名访问</span></a></h3><ul><li>使用 ./02.build-ssl.sh nexus.devops.test.com 生成证书，重载配置即可</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>    listen       80;</span></span>
<span class="line"><span>    listen       443 ssl;</span></span>
<span class="line"><span>    server_name  nexus.devops.test.com;</span></span>
<span class="line"><span>    # allow large uploads of files</span></span>
<span class="line"><span>    client_max_body_size 1G;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ssl_certificate      /certs/nexus.devops.test.com/server.crt;</span></span>
<span class="line"><span>    ssl_certificate_key  /certs/nexus.devops.test.com/server.key;</span></span>
<span class="line"><span>    ssl_session_cache    shared:SSL:1m;</span></span>
<span class="line"><span>    ssl_session_timeout  5m;</span></span>
<span class="line"><span>    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span>
<span class="line"><span>    ssl_prefer_server_ciphers  on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>      proxy_pass   http://nexus_3_61:8081/;</span></span>
<span class="line"><span>      proxy_set_header Host $host;</span></span>
<span class="line"><span>      proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="落地实践" tabindex="-1"><a class="header-anchor" href="#落地实践"><span>落地实践</span></a></h2><h3 id="使用-nexus-管理-nuget-包" tabindex="-1"><a class="header-anchor" href="#使用-nexus-管理-nuget-包"><span>使用 Nexus 管理 Nuget 包</span></a></h3><h4 id="默认项说明" tabindex="-1"><a class="header-anchor" href="#默认项说明"><span>默认项说明</span></a></h4><ul><li>nuget-group：组合存储库，可以将多个远程或本地存储库组合成一个虚拟存储库，默认包含 nuget-hosted，nuget.org-proxy。拉取包的地址一般配置此仓库地址</li><li>nuget-hosted：托管存储库，本地发布的包可以存储到此存储库。推送包的地址需要配置此仓库地址</li><li>nuget.org-proxy：代理存储库，缓存 nuget.org 的包并从本地服务器上提供它们</li></ul><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="账号的规划及创建" tabindex="-1"><a class="header-anchor" href="#账号的规划及创建"><span>账号的规划及创建</span></a></h4><p>一个企业可能存在着多个团队或项目组，每个团队的包可以分开或者约定好不同的名称前缀</p><p>包的读写权限需要分离，即上传者和使用者分开，上传者包含读写权限，使用者只需要有访问权限</p><h4 id="创建角色" tabindex="-1"><a class="header-anchor" href="#创建角色"><span>创建角色</span></a></h4><p>权限说明：<a href="https://help.sonatype.com/repomanager3/nexus-repository-administration/access-control/privileges#Privileges-PrivilegeActions" target="_blank" rel="noopener noreferrer">文档</a></p><p>拉取角色：pull-man ，设置权限：<code>nx-repository-view-*-*-browse</code> <code>nx-repository-view-*-*-read</code></p><p>推送角色：push-man ，设置权限：<code>nx-component-upload</code> <code>nx-repository-view-*-</code><em><code>-</code></em></p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="创建账号" tabindex="-1"><a class="header-anchor" href="#创建账号"><span>创建账号</span></a></h4><p>拉取账号：puller ， 设置密码 devops666，设置角色：pull-man</p><p>推送账号：pusher，设置密码 devops666，设置角色：push-man，nuget 使用的 APIKey 所以暂时没有用到，后面管理 docker 的时候使用</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="生成-nuget-api-密钥" tabindex="-1"><a class="header-anchor" href="#生成-nuget-api-密钥"><span>生成 NuGet API 密钥</span></a></h4><p>推送 NuGet 包时需要使用，点击管理员头像-&gt;<strong>NuGet</strong> <strong>API</strong> <strong>密钥-&gt;生成密钥</strong></p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="启用-nuget-api-密钥领域" tabindex="-1"><a class="header-anchor" href="#启用-nuget-api-密钥领域"><span>启用 NuGet API 密钥领域</span></a></h4><p>上一步获取了密钥，还无法直接使用，还需要在设置中 Security&gt;Realms 中启用 NuGet API-Key Realm。</p><p>类似启用的验证方式，领域说明<a href="https://help.sonatype.com/repomanager3/nexus-repository-administration/user-authentication/realms#Realms-NuGetAPI-KeyRealm" target="_blank" rel="noopener noreferrer">见文档</a></p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="设置部署策略" tabindex="-1"><a class="header-anchor" href="#设置部署策略"><span>设置部署策略</span></a></h4><p>默认 nuget 包托管是启用了， 而为了防止包被恶意篡改，可以将 nuget-hosted 仓库修改为禁用重新部署，多人协同开发时可防止包被被其他人覆盖，<a href="https://help.sonatype.com/fw/namespace-confusion-protection#NamespaceConfusionProtection-ConfigureNexusRepository3" target="_blank" rel="noopener noreferrer">相关文档说明</a> 。在设置了禁用重新部署时，推送重复包的时候将会返回 400 错误</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="使用-nexus-的-nuget-包源" tabindex="-1"><a class="header-anchor" href="#使用-nexus-的-nuget-包源"><span>使用 Nexus 的 NuGet 包源</span></a></h4><p>因为前面配置关闭了匿名访问以及配置了相应的账号，所以为了方便的从 Nexus 服务中拉取 Nuget 包，可以通过配置文件 nuget.config （<a href="https://learn.microsoft.com/zh-cn/nuget/reference/nuget-config-file" target="_blank" rel="noopener noreferrer">文档</a>）来指定 nuget 源为 Nexus 服务 nexus.devops.test.com</p><ul><li><p>指定配置节的名称和源（默认使用 NuGet V3，V2 不需要加 index.json）</p></li><li><p>指定使用包源的账号密码</p></li><li><p>将其放到和解决方案同级目录即可生效</p><figure><img src="'+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>nuget.config 文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span>
<span class="line"><span> &lt;configuration&gt;</span></span>
<span class="line"><span>   &lt;packageSources&gt;</span></span>
<span class="line"><span>     &lt;add key=&quot;nexus.devops.test.com&quot; value=&quot;https://nexus.devops.test.com/repository/nuget-group/index.json&quot; /&gt;</span></span>
<span class="line"><span>   &lt;/packageSources&gt;</span></span>
<span class="line"><span>   &lt;packageSourceCredentials&gt;</span></span>
<span class="line"><span>     &lt;nexus.devops.test.com&gt;</span></span>
<span class="line"><span>       &lt;add key=&quot;Username&quot; value=&quot;puller&quot; /&gt;</span></span>
<span class="line"><span>       &lt;add key=&quot;ClearTextPassword&quot; value=&quot;devops666&quot; /&gt;</span></span>
<span class="line"><span>     &lt;/nexus.devops.test.com&gt;</span></span>
<span class="line"><span>   &lt;/packageSourceCredentials&gt;</span></span>
<span class="line"><span> &lt;/configuration&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="推送-nuget-包到-nexus" tabindex="-1"><a class="header-anchor" href="#推送-nuget-包到-nexus"><span>推送 NuGet 包到 Nexus</span></a></h4><p>从本地推送一个 NuGet 包到 Nexus 服务进行托管，需要两步，打包，推送。为了更好的使用，可以结合脚本来快速打包，以之前的一个计算字段封装为例将其打包成 NuGet 包推送到 Nexus 中</p><ul><li><p>目录结构如下</p><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>首先新建配置一个 .nuspec 模板，根据需要修改库的相关信息，<a href="https://learn.microsoft.com/zh-cn/nuget/reference/nuspec" target="_blank" rel="noopener noreferrer">nuspec 配置文档</a></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span>
<span class="line"><span> &lt;package xmlns=&quot;http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd&quot;&gt;</span></span>
<span class="line"><span>     &lt;metadata&gt;</span></span>
<span class="line"><span>         &lt;id&gt;Devops.Common.EvalSDK&lt;/id&gt;</span></span>
<span class="line"><span>         &lt;version&gt;0.0.15&lt;/version&gt;</span></span>
<span class="line"><span>         &lt;authors&gt;yimo&lt;/authors&gt;</span></span>
<span class="line"><span>         &lt;description&gt;计算字段&lt;/description&gt;</span></span>
<span class="line"><span>         &lt;projectUrl&gt;https://github.com/yimogit/MeDevOps&lt;/projectUrl&gt;</span></span>
<span class="line"><span>         &lt;tags&gt;Devops.Common.EvalSDK&lt;/tags&gt;</span></span>
<span class="line"><span>         &lt;repository type=&quot;git&quot; url=&quot;https://github.com/yimogit/MeDevOps.git&quot; branch=&quot;main&quot;/&gt;</span></span>
<span class="line"><span>     &lt;/metadata&gt;</span></span>
<span class="line"><span>     &lt;files&gt;</span></span>
<span class="line"><span>       &lt;file src=&quot;..\\Devops.Common.EvalSDK\\bin\\Release***.dll&quot; target=&quot;lib&quot; /&gt;</span></span>
<span class="line"><span>       &lt;file src=&quot;..\\Devops.Common.EvalSDK\\bin\\Release***.pdb&quot; target=&quot;lib&quot; /&gt;</span></span>
<span class="line"><span>     &lt;/files&gt;</span></span>
<span class="line"><span> &lt;/package&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打包库的参考，多个版本使用 TargetFrameworks</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;PropertyGroup&gt;</span></span>
<span class="line"><span>      &lt;TargetFrameworks&gt;netstandard2.1;netcoreapp3.1;net5.0;net7.0;&lt;/TargetFrameworks&gt;</span></span>
<span class="line"><span>    &lt;/PropertyGroup&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;PropertyGroup&gt;</span></span>
<span class="line"><span>      &lt;DocumentationFile&gt;bin$(Configuration)$(TargetFramework)\\Devops.Common.EvalSDK.xml&lt;/DocumentationFile&gt;</span></span>
<span class="line"><span>    &lt;/PropertyGroup&gt;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>  &lt;/Project&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建打包脚本，修改密钥和地址，后续每次执行前修改版本号，执行即可</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> #!/bin/bash</span></span>
<span class="line"><span> pwd</span></span>
<span class="line"><span> current_dir=\`pwd\` </span></span>
<span class="line"><span> #nuget api密钥</span></span>
<span class="line"><span> nuget_key=&quot;aa7890bf-8dfb-33e3-bed9-c1571e5b9b96&quot; </span></span>
<span class="line"><span> #托管仓库地址</span></span>
<span class="line"><span> nuget_source=&quot;https://nexus.devops.test.com/repository/nuget-hosted/&quot;</span></span>
<span class="line"><span> #包的版本</span></span>
<span class="line"><span> package_version=&quot;0.0.2&quot;</span></span>
<span class="line"><span> #包名</span></span>
<span class="line"><span> nupkg_pakcage_name=&quot;Devops.Common.EvalSDK.\${package_version}.nupkg&quot;</span></span>
<span class="line"><span> #项目库路径</span></span>
<span class="line"><span> csproj_path=&quot;../Devops.Common.EvalSDK/Devops.Common.EvalSDK.csproj&quot;</span></span>
<span class="line"><span> #包配置</span></span>
<span class="line"><span> nuspec_path=&quot;Devops.Common.EvalSDK.nuspec&quot;</span></span>
<span class="line"><span> #nuspec path , relative csproj path</span></span>
<span class="line"><span> nuspec_path_relative_csproj=&quot;../pack/Devops.Common.EvalSDK.nuspec&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span> #git pull</span></span>
<span class="line"><span> #删除旧版本</span></span>
<span class="line"><span> rm -f nupkg_pakcage_name</span></span>
<span class="line"><span> cd \${current_dir} </span></span>
<span class="line"><span> #替换版本号</span></span>
<span class="line"><span> sed -i &#39;s|&lt;version&gt;.*&lt;/version&gt;|&lt;version&gt;&#39;\${package_version}&#39;&lt;/version&gt;|g&#39; \${nuspec_path}</span></span>
<span class="line"><span></span></span>
<span class="line"><span> echo pack \${nupkg_pakcage_name}</span></span>
<span class="line"><span> #打包nupkg文件到当前pack目录 包名.x.x.x.nupkg</span></span>
<span class="line"><span> dotnet pack \${csproj_path}  -p:NuspecFile=\${nuspec_path_relative_csproj} -c Release --output ../pack  -v m</span></span>
<span class="line"><span></span></span>
<span class="line"><span> #判断是否打包成功</span></span>
<span class="line"><span> echo</span></span>
<span class="line"><span> if [ ! -f &quot;\${nupkg_pakcage_name}&quot; ]; then</span></span>
<span class="line"><span>     echo &quot;pack \${nupkg_pakcage_name} is error&quot;</span></span>
<span class="line"><span>     exit -1</span></span>
<span class="line"><span> fi</span></span>
<span class="line"><span></span></span>
<span class="line"><span> #推送包</span></span>
<span class="line"><span> echo push \${nupkg_pakcage_name}</span></span>
<span class="line"><span> dotnet nuget push \${nupkg_pakcage_name} -k \${nuget_key} -s \${nuget_source}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行成功，在使用 Nexus 源的包管理器中就能搜索使用了</p><p><img src="`+h+'" alt="" loading="lazy"><img src="'+b+'" alt="" loading="lazy"></p></li></ul><h3 id="使用-nexus-管理-docker-镜像" tabindex="-1"><a class="header-anchor" href="#使用-nexus-管理-docker-镜像"><span>使用 Nexus 管理 Docker 镜像</span></a></h3><p>当前版本支持 docker 镜像的管理，使用发现通过 docker-group 推送镜像是需要企业版的，不过还是可以根据拉取和推送的域名/端口分开来达到推送的效果。</p><p>可以先看下面这个流程图，再看后续如何配置就很清晰了</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="创建角色-1" tabindex="-1"><a class="header-anchor" href="#创建角色-1"><span>创建角色</span></a></h4><p>权限说明：<a href="https://help.sonatype.com/repomanager3/nexus-repository-administration/access-control/privileges#Privileges-PrivilegeActions" target="_blank" rel="noopener noreferrer">文档</a> 这里给了所有仓库的拉取以及推送权限，和前面一样，可以只创建对应的 docker 权限</p><p>拉取角色：pull-man ，设置权限：<code>nx-repository-view-*-*-browse</code> <code>nx-repository-view-*-*-read</code></p><p>推送角色：push-man ，设置权限：<code>nx-component-upload</code> <code>nx-repository-view-*-</code><em><code>-</code></em></p><h4 id="创建账号-1" tabindex="-1"><a class="header-anchor" href="#创建账号-1"><span>创建账号</span></a></h4><p>拉取账号：puller ， 设置密码 devops666，设置角色：pull-man</p><p>推送账号：pusher，设置密码 devops666，设置角色：push-man</p><h4 id="创建-docker-仓库" tabindex="-1"><a class="header-anchor" href="#创建-docker-仓库"><span>创建 Docker 仓库</span></a></h4><p>和前面 nuget 的三个仓库一样，docker 的仓库也新建三个</p><ul><li>docker-group：组合存储库，可以将多个远程或本地存储库组合成一个虚拟存储库，默认包含 docker-hosted，docker-proxy。拉取包的地址配置此仓库地址（企业版才支持推送，开源版可以推送到 hosted 库）</li><li>docker-hosted：托管存储库，本地发布的包可以存储到此存储库。推送包的地址需要配置此仓库地址</li><li>docker-proxy：代理存储库，缓存 官方 docker 包并从本地服务器上提供它们</li></ul><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>创建 docker-hosted 托管库，禁用重新部署，勾上允许部署 latest，存储位置可以自行选择。</li><li>除此之外，还需要准备一个推送镜像的域名：<code>push.nexus.devops.test.com</code>（开源版不支持使用 group 推送镜像）</li></ul><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>创建 docker-proxy 代理库，配置代理地址：<code>https://registry-1.docker.io</code>并使用 Use Docker Hub 的索引</li></ul><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>创建 docker-group 分组库：选择成员仓库：docker-hosted，docker-proxy 到右边，保存即可</li></ul><figure><img src="'+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="推送和拉取域名的-nginx-代理配置" tabindex="-1"><a class="header-anchor" href="#推送和拉取域名的-nginx-代理配置"><span>推送和拉取域名的 nginx 代理配置</span></a></h4><p>根据文档与实际使用，https 是必须的，所以依托于之前 <a href="https://juejin.cn/post/7296754422750232576#heading-8" target="_blank" rel="noopener noreferrer">nginx 的证书申请 </a>以及 dns 服务的使用，我们可以在局域网中配置域名来访问 nexus3 提供的 docker 镜像仓库服务</p><p>默认拉取使用 <code>nexus.devops.test.com</code>，推送则使用：<code>push.nexus.devops.test.com</code></p><p>以下为 nginx 的配置，根据官方文档所修改，主要替换其中域名与证书，因为是局域网的自定义域名，需要在客户端安装证书才不会有不安全的提示，同理 linux 下使用，也需要安装对应 pem 证书</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>    listen       80;</span></span>
<span class="line"><span>    listen       443 ssl;</span></span>
<span class="line"><span>    server_name  nexus.devops.test.com;</span></span>
<span class="line"><span>    # allow large uploads of files</span></span>
<span class="line"><span>    client_max_body_size 10G;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ssl_certificate      /certs/nexus.devops.test.com/server.crt;</span></span>
<span class="line"><span>    ssl_certificate_key  /certs/nexus.devops.test.com/server.key;</span></span>
<span class="line"><span>    ssl_session_cache    shared:SSL:1m;</span></span>
<span class="line"><span>    ssl_session_timeout  5m;</span></span>
<span class="line"><span>    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span>
<span class="line"><span>    ssl_prefer_server_ciphers  on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>     location /v2 {</span></span>
<span class="line"><span>      proxy_pass http://nexus_3_61:8081/repository/docker-group/$request_uri;</span></span>
<span class="line"><span>      proxy_set_header Host $host:$server_port;</span></span>
<span class="line"><span>      proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-Proto &quot;https&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    location /v1 {</span></span>
<span class="line"><span>      proxy_pass http://nexus_3_61:8081/repository/docker-group/$request_uri;</span></span>
<span class="line"><span>      proxy_set_header Host $host:$server_port;</span></span>
<span class="line"><span>      proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-Proto &quot;https&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>      proxy_pass   http://nexus_3_61:8081/;</span></span>
<span class="line"><span>      proxy_set_header Host $host;</span></span>
<span class="line"><span>      proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>      #proxy_set_header X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-Proto &quot;https&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>    listen       80;</span></span>
<span class="line"><span>    listen       443 ssl;</span></span>
<span class="line"><span>    server_name  push.nexus.devops.test.com;</span></span>
<span class="line"><span>    # allow large uploads of files</span></span>
<span class="line"><span>    client_max_body_size 10G;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ssl_certificate      /certs/push.nexus.devops.test.com/server.crt;</span></span>
<span class="line"><span>    ssl_certificate_key  /certs/push.nexus.devops.test.com/server.key;</span></span>
<span class="line"><span>    ssl_session_cache    shared:SSL:1m;</span></span>
<span class="line"><span>    ssl_session_timeout  5m;</span></span>
<span class="line"><span>    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span>
<span class="line"><span>    ssl_prefer_server_ciphers  on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>     location /v2 {</span></span>
<span class="line"><span>      proxy_pass http://nexus_3_61:8081/repository/docker-hosted/$request_uri;</span></span>
<span class="line"><span>      proxy_set_header Host $host:$server_port;</span></span>
<span class="line"><span>      proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-Proto &quot;https&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    location /v1 {</span></span>
<span class="line"><span>      proxy_pass http://nexus_3_61:8081/repository/docker-hosted/$request_uri;</span></span>
<span class="line"><span>      proxy_set_header Host $host:$server_port;</span></span>
<span class="line"><span>      proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-Proto &quot;https&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>      proxy_pass   http://nexus_3_61:8081/;</span></span>
<span class="line"><span>      proxy_set_header Host $host;</span></span>
<span class="line"><span>      proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>      #proxy_set_header X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-Proto &quot;https&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重载配置生效后访问确认 https 是否生效，以及可以查看 restapi 接口是否可以访问</p><figure><img src="`+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+q+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>至此，私有的 docker 仓库已经搭建好了，本文基于局域网的自定义域名，如果是服务器，正常解析域名到服务器，申请 ssl 证书等踩的坑都会少一点。接下来就是如何使用 <code>nexus.devops.test.com</code>，<code>push.nexus.devops.test.com</code> 来拉取&amp;推送 docker 镜像了</p><h4 id="centos8-中使用-nexus-的-docker-仓库" tabindex="-1"><a class="header-anchor" href="#centos8-中使用-nexus-的-docker-仓库"><span>CentOS8 中使用 Nexus 的 Docker 仓库</span></a></h4><p>因为本文域名是局域网中的 dns 解析，所以需要在 linux 中设置 dns，确保域名能够访问到 nexus 访问，服务器则不需要考虑，跳过直接使用即可</p><ul><li>使用机器 IP：192.168.123.219</li></ul><h5 id="centos8-设置-dns" tabindex="-1"><a class="header-anchor" href="#centos8-设置-dns"><span>CentOS8 设置 DNS</span></a></h5><p>编辑 dns 配置文件：<code>vi /etc/resolv.conf</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>nameserver 192.168.123.214</span></span>
<span class="line"><span>nameserver 114.114.114.114</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>写入后重启网络生效：<code>systemctl restart NetworkManager</code></p><p>ping nexus.devops.test.com</p><p>ip 是 192.168.123.214 就对了</p><figure><img src="`+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="安装自签证书" tabindex="-1"><a class="header-anchor" href="#安装自签证书"><span>安装自签证书</span></a></h5><figure><img src="'+A+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>上传或写入证书 myCA.pem 到需要使用的主机 192.168.123.219</li><li>复制证书到证书安装目录 <code>cp ./myCA.pem /etc/pki/ca-trust/source/anchors/</code></li><li>更新证书信任库：<code>update-ca-trust -f</code></li><li>重启 openssl 服务（查找 openssl <code>ps aux | grep openssl</code>的 pid: xxx xxx pid 号 pts/0 R+，kill 掉 pid，会自动重新启动 <code>kill pid号</code>） <strong>或</strong>直接重启服务器生效（<code>reboot</code>）</li></ol><p>因为是自签证书，如果未安装证书就使用 <code>docker login nexus.devops.test.com</code>会提示：tls: failed to verify certificate: x509: certificate signed by unknown authority</p><h5 id="docker-镜像源认证" tabindex="-1"><a class="header-anchor" href="#docker-镜像源认证"><span>Docker 镜像源认证</span></a></h5><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker login nexus.devops.test.com -u puller -p devops666</span></span>
<span class="line"><span>docker login push.nexus.devops.test.com -u pusher -p devops666</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>登录成功后可以查看配置的源：<code>cat /root/.docker/config.json</code></p><figure><img src="`+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="拉取镜像" tabindex="-1"><a class="header-anchor" href="#拉取镜像"><span>拉取镜像</span></a></h5><ul><li>从 nexus.devops.test.com （docker-group）拉取一个 nginx 镜像：<code> docker pull nexus.devops.test.com/nginx</code></li></ul><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>拉取完成后，在 docker-proxy 代理库中也可以查看到对应的镜像信息了</li></ul><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="推送镜像" tabindex="-1"><a class="header-anchor" href="#推送镜像"><span>推送镜像</span></a></h5><ul><li>确保 push.nexus.devops.test.com 镜像源已认证：<code>docker login push.nexus.devops.test.com -u pusher -p devops666</code></li><li>将上面拉取的镜像打包成新的镜像：</li></ul><p><code> docker tag nexus.devops.test.com/nginx</code> <code>push.nexus.devops.test.com/nginx_custom</code></p><ul><li>将新的镜像推送到 push.nexus.devops.test.com（docker-hosted） :<code> docker push push.nexus.devops.test.com/nginx_custom</code></li></ul><figure><img src="'+$+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="踩坑记录" tabindex="-1"><a class="header-anchor" href="#踩坑记录"><span>踩坑记录</span></a></h2><ul><li><p>数据目录不设置权限启动失败</p><blockquote><p>数据目录权限：此目录需要可由 Nexus 写入 进程，以 UID 200 的形式运行<code>chown -R 200 ./data</code></p></blockquote><figure><img src="'+G+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>NuGet V2 和 NuGet V3 配置对比</p><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>NuGet 的 API 密钥生成，但是没有启用领域配置，无法推送包到 Nexus</p><ul><li>如果直接使用密钥推送，提示 401，检查 apikey 是否正确，以及设置 NuGet API 密钥<a href="https://help.sonatype.com/repomanager3/nexus-repository-administration/user-authentication/realms#Realms-WhatareRealms" target="_blank" rel="noopener noreferrer">领域</a><img src="'+C+'" alt="" loading="lazy"></li><li>启用 NuGet API-Key Realm <img src="'+X+'" alt="" loading="lazy"></li></ul></li><li><p>禁用重新部署时，但是推送了相同的包时，会返回 400</p><figure><img src="'+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>Linux 上安装证书，看到很多资料都是执行<code>update-ca-trust</code> 就结束了，按着步骤来设置了但无效。最后才想到可能是因为没生效，重启完发现真是，想了下应该是 openssl 需要重启，试了下果然，才得以解决进行下一步。如果不适用局域网域名问题会少很多～</p></li><li><p>Docker 仓库新建的时候那个协议设置理解了半天，找到的文章都是设置端口，配置域名的方式也是一点点理解文档，然后试出来的。</p></li><li><p>解决了之前 Windows 生成自签证书时不能自动输入信息的问题，需要像下面这样写，<a href="https://github.com/openssl/openssl/issues/8795#issuecomment-1605851913" target="_blank" rel="noopener noreferrer">参考</a></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> winpty openssl req -new -key $DOMAIN/server.key -out $DOMAIN/server.csr -subj &quot;//C=CN\\ST=Beijing\\L=Beijing\\O=TestOrganization\\OU=TestOU\\CN=TestRootCA\\emailAddress=admin@test.com&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="相关文档" tabindex="-1"><a class="header-anchor" href="#相关文档"><span>相关文档</span></a></h3><ul><li><a href="https://help.sonatype.com/docs" target="_blank" rel="noopener noreferrer">官方文档</a></li><li><a href="https://hub.docker.com/r/sonatype/nexus3/" target="_blank" rel="noopener noreferrer">DockerHub</a></li><li><a href="https://github.com/sonatype/docker-nexus3" target="_blank" rel="noopener noreferrer">Github 项目地址</a></li><li><a href="https://help.sonatype.com/repomanager3/planning-your-implementation/run-behind-a-reverse-proxy" target="_blank" rel="noopener noreferrer">Nginx 代理配置文档</a></li><li><a href="https://help.sonatype.com/iqserver/integrations/plugins-for-continuous-integration-platforms/nexus-platform-plugin-for-jenkins#NexusPlatformPluginforJenkins-RepositoryManager3Integration" target="_blank" rel="noopener noreferrer">Jenkins 插件配置文档</a></li><li><a href="https://learn.microsoft.com/zh-cn/nuget/reference/nuget-config-file" target="_blank" rel="noopener noreferrer">nuget.conf 配置文档</a></li><li><a href="https://help.sonatype.com/repomanager3/nexus-repository-administration/formats/docker-registry/docker-repository-reverse-proxy-strategies" target="_blank" rel="noopener noreferrer">Docker 仓库域名代理配置文档</a></li></ul><h2 id="后语" tabindex="-1"><a class="header-anchor" href="#后语"><span>后语</span></a></h2><blockquote><p>本篇呕心沥血，绝对是值得收藏的，同时也希望看官们能顺手再点个赞～</p><p>书山有路勤为径，学海无涯苦作舟。</p><p>沉迷学习，无法自拔。jpg</p></blockquote>',110)]))}const O=n(R,[["render",j],["__file","devops_nexus3_nuget_docker_install_use.html.vue"]]),M=JSON.parse('{"path":"/posts/docker/devops_nexus3_nuget_docker_install_use.html","title":"一篇适合躺收藏夹的 Nexus3 搭建 NuGet&Docker 私有库的安装使用总结","lang":"zh-CN","frontmatter":{"title":"一篇适合躺收藏夹的 Nexus3 搭建 NuGet&Docker 私有库的安装使用总结","date":"2023-11-07T08:36:00.000Z","category":["Docker"],"tag":["devops","docker"],"description":"前言 Nexus 是支持 Nuget、Docker、Npm 等多种包的仓库管理器，可用做私有包的存储分发，缓存官方包。本篇将手把手教学使用 Nexus 搭建自己的 NuGe t& Docker 私有仓库。 特点 私有化仓库管理 支持权限管理 缓存依赖包 支持插件机制和 REST API 成熟稳定强大 支持的仓库/包管理 使用情况 成熟文档，使用四平八稳...","head":[["meta",{"property":"og:url","content":"https://www.yimo.link/posts/docker/devops_nexus3_nuget_docker_install_use.html"}],["meta",{"property":"og:site_name","content":"易墨网"}],["meta",{"property":"og:title","content":"一篇适合躺收藏夹的 Nexus3 搭建 NuGet&Docker 私有库的安装使用总结"}],["meta",{"property":"og:description","content":"前言 Nexus 是支持 Nuget、Docker、Npm 等多种包的仓库管理器，可用做私有包的存储分发，缓存官方包。本篇将手把手教学使用 Nexus 搭建自己的 NuGe t& Docker 私有仓库。 特点 私有化仓库管理 支持权限管理 缓存依赖包 支持插件机制和 REST API 成熟稳定强大 支持的仓库/包管理 使用情况 成熟文档，使用四平八稳..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T11:15:42.000Z"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:published_time","content":"2023-11-07T08:36:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-28T11:15:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一篇适合躺收藏夹的 Nexus3 搭建 NuGet&Docker 私有库的安装使用总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-07T08:36:00.000Z\\",\\"dateModified\\":\\"2024-10-28T11:15:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"易墨\\",\\"url\\":\\"https://www.yimo.link\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"使用情况","slug":"使用情况","link":"#使用情况","children":[]}]},{"level":2,"title":"安装部署","slug":"安装部署","link":"#安装部署","children":[{"level":3,"title":"使用 docker compose 安装","slug":"使用-docker-compose-安装","link":"#使用-docker-compose-安装","children":[]},{"level":3,"title":"使用 nginx 配置域名访问","slug":"使用-nginx-配置域名访问","link":"#使用-nginx-配置域名访问","children":[]}]},{"level":2,"title":"落地实践","slug":"落地实践","link":"#落地实践","children":[{"level":3,"title":"使用 Nexus 管理 Nuget 包","slug":"使用-nexus-管理-nuget-包","link":"#使用-nexus-管理-nuget-包","children":[{"level":4,"title":"默认项说明","slug":"默认项说明","link":"#默认项说明","children":[]},{"level":4,"title":"账号的规划及创建","slug":"账号的规划及创建","link":"#账号的规划及创建","children":[]},{"level":4,"title":"创建角色","slug":"创建角色","link":"#创建角色","children":[]},{"level":4,"title":"创建账号","slug":"创建账号","link":"#创建账号","children":[]},{"level":4,"title":"生成 NuGet API 密钥","slug":"生成-nuget-api-密钥","link":"#生成-nuget-api-密钥","children":[]},{"level":4,"title":"启用 NuGet API 密钥领域","slug":"启用-nuget-api-密钥领域","link":"#启用-nuget-api-密钥领域","children":[]},{"level":4,"title":"设置部署策略","slug":"设置部署策略","link":"#设置部署策略","children":[]},{"level":4,"title":"使用 Nexus 的 NuGet 包源","slug":"使用-nexus-的-nuget-包源","link":"#使用-nexus-的-nuget-包源","children":[]},{"level":4,"title":"推送 NuGet 包到 Nexus","slug":"推送-nuget-包到-nexus","link":"#推送-nuget-包到-nexus","children":[]}]},{"level":3,"title":"使用 Nexus 管理 Docker 镜像","slug":"使用-nexus-管理-docker-镜像","link":"#使用-nexus-管理-docker-镜像","children":[{"level":4,"title":"创建角色","slug":"创建角色-1","link":"#创建角色-1","children":[]},{"level":4,"title":"创建账号","slug":"创建账号-1","link":"#创建账号-1","children":[]},{"level":4,"title":"创建 Docker 仓库","slug":"创建-docker-仓库","link":"#创建-docker-仓库","children":[]},{"level":4,"title":"推送和拉取域名的 nginx 代理配置","slug":"推送和拉取域名的-nginx-代理配置","link":"#推送和拉取域名的-nginx-代理配置","children":[]},{"level":4,"title":"CentOS8 中使用 Nexus 的 Docker 仓库","slug":"centos8-中使用-nexus-的-docker-仓库","link":"#centos8-中使用-nexus-的-docker-仓库","children":[{"level":5,"title":"CentOS8 设置 DNS","slug":"centos8-设置-dns","link":"#centos8-设置-dns","children":[]},{"level":5,"title":"安装自签证书","slug":"安装自签证书","link":"#安装自签证书","children":[]},{"level":5,"title":"Docker 镜像源认证","slug":"docker-镜像源认证","link":"#docker-镜像源认证","children":[]},{"level":5,"title":"拉取镜像","slug":"拉取镜像","link":"#拉取镜像","children":[]},{"level":5,"title":"推送镜像","slug":"推送镜像","link":"#推送镜像","children":[]}]}]}]},{"level":2,"title":"踩坑记录","slug":"踩坑记录","link":"#踩坑记录","children":[{"level":3,"title":"相关文档","slug":"相关文档","link":"#相关文档","children":[]}]},{"level":2,"title":"后语","slug":"后语","link":"#后语","children":[]}],"git":{"createdTime":1730114142000,"updatedTime":1730114142000,"contributors":[{"name":"yimo","email":"yimo@wikiglobal.com","commits":1}]},"readingTime":{"minutes":11.82,"words":3545},"filePathRelative":"posts/docker/devops_nexus3_nuget_docker_install_use.md","localizedDate":"2023年11月7日","excerpt":"<h2>前言</h2>\\n<blockquote>\\n<p>Nexus 是支持 Nuget、Docker、Npm 等多种包的仓库管理器，可用做私有包的存储分发，缓存官方包。本篇将手把手教学使用 Nexus 搭建自己的 NuGe t&amp; Docker 私有仓库。</p>\\n</blockquote>\\n<h3>特点</h3>\\n<ul>\\n<li>\\n<p>私有化仓库管理</p>\\n</li>\\n<li>\\n<p>支持权限管理</p>\\n</li>\\n<li>\\n<p>缓存依赖包</p>\\n</li>\\n<li>\\n<p>支持插件机制和 REST API</p>\\n</li>\\n<li>\\n<p>成熟稳定强大</p>\\n</li>\\n<li>\\n<p>支持的仓库/包管理\\n</p>\\n</li>\\n</ul>","autoDesc":true}');export{O as comp,M as data};
