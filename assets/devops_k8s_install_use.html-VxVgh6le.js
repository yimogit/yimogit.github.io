import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as i,o as a}from"./app-BHZ56IUu.js";const l="/assets/662652-20231224221252676-1766144377-yW_J3zNs.png",r="/assets/662652-20231224221252593-915957863-D4Hag4AY.png",t="/assets/662652-20231224221252584-1526366459-RXNj228d.png",p="/assets/662652-20231224221252629-1383913254-DxR2MdJB.png",d="/assets/662652-20231224221252663-882439839-B4dVaE0s.png",c="/assets/662652-20231224221252613-1220781311-CK23yO_S.png",o="/assets/662652-20231224221252710-478069305-DBPvvcmG.png",u="/assets/662652-20231224221252716-805428728-B2-18c-U.png",m="/assets/662652-20231224221252689-2049707927-DALMpeB1.png",h="/assets/662652-20231224221252703-364126435-CPvknbFc.png",v="/assets/662652-20231224221252736-435736867-Dxrfwymu.png",b="/assets/662652-20231224221252709-1081319541-BLPuJAI4.png",g="/assets/662652-20231224221252710-2137788827-DnOMLZ7F.png",k="/assets/662652-20231224221252699-1638896453-DjHDVjtu.png",f="/assets/662652-20231224221252721-27097896-Cggt01Zq.png",y="/assets/662652-20231224221252733-612408733-C7kkZ4e4.png",x="/assets/662652-20231224221252691-373556356-Btu5u_gu.png",A="/assets/662652-20231224221252744-1299430260-uFAkuHWH.png",_="/assets/662652-20231224221252713-2086538077-BG7KCS8n.png",F="/assets/662652-20231224221252684-2046522162-CZL7YSdN.png",w="/assets/662652-20231224221252690-1293840678-D2L-rm1o.png",S="/assets/662652-20231224221252754-1045178623-BiO_AqMX.png",I="/assets/662652-20231224221252930-72349938-B7XoM9P4.png",N="/assets/662652-20231224221252704-1718555845-CeIipAo-.png",D="/assets/662652-20231224221252699-424047647-rAn_fY3c.png",C="/assets/662652-20231224221252761-1073116118-BIsQC82k.png",E={};function O(P,s){return a(),e("div",null,s[0]||(s[0]=[i('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><blockquote><p>k8s 即 Kubernetes，是一个开源的容器编排引擎，用来对容器化应用进行自动化部署、 扩缩和管理<br> 本篇文章将分享 k8s v1.18.8 的安装，以及其面板，监控，部署服务，使用Ingress-Ningx进行负载均衡的实践<br> 因为公司用的这个老版本，并且后面要负责搭建，担心无法复刻，趁此周末，实践一二，确认可行，遂与君分享。</p></blockquote><h2 id="虚拟机准备" tabindex="-1"><a class="header-anchor" href="#虚拟机准备"><span>虚拟机准备</span></a></h2><ul><li>宿主机：Windows10</li><li>虚拟机工具：Hyper-V 10.0.19041.1</li><li>虚拟机 Linux 系统：CentOS 8.5</li><li>已安装软件：docker (v2.21.0)及 docker compose(24.0.6)</li><li>Hyper-V虚拟机一览</li></ul><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>IP 及主机名</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>192.168.123.100 master</span></span>
<span class="line"><span>192.168.123.101 worker01</span></span>
<span class="line"><span>192.168.123.102 worker02</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="centos8-5-设置固定-ip" tabindex="-1"><a class="header-anchor" href="#centos8-5-设置固定-ip"><span>CentOS8.5 设置固定 IP</span></a></h3><ul><li>设置IP及网关：<code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>TYPE=Ethernet</span></span>
<span class="line"><span>PROXY_METHOD=none</span></span>
<span class="line"><span>BROWSER_ONLY=no</span></span>
<span class="line"><span>DEFROUTE=yes</span></span>
<span class="line"><span>IPV4_FAILURE_FATAL=no</span></span>
<span class="line"><span>IPV6INIT=yes</span></span>
<span class="line"><span>IPV6_AUTOCONF=yes</span></span>
<span class="line"><span>IPV6_DEFROUTE=yes</span></span>
<span class="line"><span>IPV6_FAILURE_FATAL=no</span></span>
<span class="line"><span>NAME=eth0</span></span>
<span class="line"><span>DEVICE=eth0</span></span>
<span class="line"><span>ONBOOT=yes</span></span>
<span class="line"><span>PREFIX=24</span></span>
<span class="line"><span>IPV6_PRIVACY=no</span></span>
<span class="line"><span># 设置IP及网关</span></span>
<span class="line"><span>BOOTPROTO=static</span></span>
<span class="line"><span>IPADDR=192.168.123.100</span></span>
<span class="line"><span>GATEWAY=192.168.123.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="centos8-5-联网检查" tabindex="-1"><a class="header-anchor" href="#centos8-5-联网检查"><span>CentOS8.5 联网检查</span></a></h3><ul><li>配置好网络后先测试 curl 是否可以正常访问网络<code> curl \`\`http://mirrors.aliyun.com</code>，如果提示：<code> curl: (6) Could not resolve host: \`\`mirrors.aliyun.com</code> ，则需要检查dns设置</li><li><code>cat /etc/resolv.conf</code> 默认应该是网关的地址，也可以自行修改为其他公共dns</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>nameserver 192.168.123.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="centos8-5-设置主机名" tabindex="-1"><a class="header-anchor" href="#centos8-5-设置主机名"><span>CentOS8.5 设置主机名</span></a></h3><ul><li>查看主机信息：<code>hostnamectl</code>，通过导入虚拟机创建的主机信息除了mac地址其他基本都一样</li><li>设置主机名：<code>hostnamectl set-hostname 主机名</code></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 查看hostname</span></span>
<span class="line"><span>hostnamectl --static</span></span>
<span class="line"><span>#设置 hostname 对应机器设置</span></span>
<span class="line"><span># 192.168.123.100</span></span>
<span class="line"><span>hostnamectl set-hostname master</span></span>
<span class="line"><span># 192.168.123.101</span></span>
<span class="line"><span>hostnamectl set-hostname worker01</span></span>
<span class="line"><span># 192.168.123.102</span></span>
<span class="line"><span>hostnamectl set-hostname worker02</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="确保每个节点上-mac-地址的唯一性" tabindex="-1"><a class="header-anchor" href="#确保每个节点上-mac-地址的唯一性"><span>确保每个节点上 MAC 地址的唯一性</span></a></h3><p>可以在外部使用 PowerShell 查看 Hyper-V 虚拟机的地址，在导入时选择新注册会自动生成 Mac 地址，无需更改</p><ul><li>centos8.5 查看mac地址：<code>ip link show dev eth0</code></li></ul><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>外部使用 PowerShell 查看：<code>(Get-VMNetworkAdapter -VMName &quot;k8s-master&quot;).MacAddress</code></li></ul><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="确保-product-uuid-的唯一性" tabindex="-1"><a class="header-anchor" href="#确保-product-uuid-的唯一性"><span>确保 product_uuid 的唯一性</span></a></h3><ul><li>执行 <code>sudo cat /sys/class/dmi/id/product_uuid</code> 查看<code>product_uuid</code> 我这里因为都是复制的虚拟机，查出来是一样的的，所以需要修改</li></ul><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>修改需要关闭虚拟机后执行PowerShell脚本 ，<a href="https://www.cnblogs.com/morang/p/hyper-v-uuid-change-powershell-script.html" target="_blank" rel="noopener noreferrer">文章总结</a></li><li>外部查看Hyper-V虚拟机 UUID</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Get-VM &quot;k8s-master&quot; | % { (gwmi -Namespace root\\virtualization\\v2 -Class msvm_computersystem -Filter (&#39;ElementName=&quot;{0}&quot;&#39; -f $_.Name)).GetRelated(&#39;msvm_virtualsystemsettingdata&#39;) | select BIOSGUID }</span></span>
<span class="line"><span>Get-VM &quot;k8s-worker01&quot; | % { (gwmi -Namespace root\\virtualization\\v2 -Class msvm_computersystem -Filter (&#39;ElementName=&quot;{0}&quot;&#39; -f $_.Name)).GetRelated(&#39;msvm_virtualsystemsettingdata&#39;) | select BIOSGUID }</span></span>
<span class="line"><span>Get-VM &quot;k8s-worker02&quot; | % { (gwmi -Namespace root\\virtualization\\v2 -Class msvm_computersystem -Filter (&#39;ElementName=&quot;{0}&quot;&#39; -f $_.Name)).GetRelated(&#39;msvm_virtualsystemsettingdata&#39;) | select BIOSGUID }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>PowerShell 修改 Hyper-V虚拟机 UUID</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#这里假设虚拟机的VMname是k8s-master，自行替换即可</span></span>
<span class="line"><span>$VMname=&quot;k8s-master&quot;</span></span>
<span class="line"><span>$vmx = Get-WmiObject -Namespace root\\virtualization\\v2 -Class msvm_virtualsystemsettingdata </span></span>
<span class="line"><span>#每次操作选择一台虚拟机</span></span>
<span class="line"><span>$CurrentSettingsData = $vmx | Where-Object { $_.ElementName -eq $VMname }</span></span>
<span class="line"><span>#检查一下老的GUID</span></span>
<span class="line"><span>$CurrentSettingsData.BIOSGUID</span></span>
<span class="line"><span>#生成新GUID</span></span>
<span class="line"><span>$GUID = [System.Guid]::NewGuid()</span></span>
<span class="line"><span>#重新写入GUID，注意要带{}，这是非常重要的细节</span></span>
<span class="line"><span>$CurrentSettingsData.BIOSGUID = &quot;{&quot; + $GUID.Guid.ToUpper() + &quot;}&quot; </span></span>
<span class="line"><span>#生成一个ModifySystemSettings的空对象</span></span>
<span class="line"><span>$VMMS = Get-WmiObject -Namespace root\\virtualization\\v2 -Class msvm_virtualsystemmanagementservice</span></span>
<span class="line"><span>$ModifySystemSettingsParams = $VMMS.GetMethodParameters(&#39;ModifySystemSettings&#39;)</span></span>
<span class="line"><span>#配置这个属性，需要特殊的转换方式</span></span>
<span class="line"><span>$ModifySystemSettingsParams.SystemSettings = $CurrentSettingsData.GetText([System.Management.TextFormat]::CimDtd20)</span></span>
<span class="line"><span>#写入</span></span>
<span class="line"><span>$VMMS.InvokeMethod(&#39;ModifySystemSettings&#39;, $ModifySystemSettingsParams, $null)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>开机后查询可以看到已经修改成功</li></ul><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="确保-machine-id-的唯一性" tabindex="-1"><a class="header-anchor" href="#确保-machine-id-的唯一性"><span>确保 Machine ID 的唯一性</span></a></h3><ul><li>执行 <code>/etc/machine-id</code> 或使用 hostnamectl 发现机器id是一样的</li></ul><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>重新生成了机器id</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sudo cp /etc/machine-id /etc/machine-id.backup</span></span>
<span class="line"><span>sudo rm /etc/machine-id</span></span>
<span class="line"><span>sudo systemd-machine-id-setup</span></span>
<span class="line"><span>cat /etc/machine-id</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行结果</li></ul><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="检查端口是否被占用" tabindex="-1"><a class="header-anchor" href="#检查端口是否被占用"><span>检查端口是否被占用</span></a></h3><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>centos8.5 使用 ss 查询端口是否使用</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ss -tuln | grep -E &quot;6443|2379|2380|10250|10259|10257|30000-32767&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>执行结果,无占用</li></ul><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="安装-k8s-v1-18-8" tabindex="-1"><a class="header-anchor" href="#安装-k8s-v1-18-8"><span>安装 K8S v1.18.8</span></a></h2><p>都2023年了，为什么还是 v1.18.8？</p><p>因为公司用的这个版本，并且后面要负责搭建，趁此周末，实践一二，确认可行，遂与君分享。</p><h3 id="节点初始化" tabindex="-1"><a class="header-anchor" href="#节点初始化"><span>节点初始化</span></a></h3><ul><li><strong>执行主机：</strong> <strong>master</strong> <strong>,worker01,worker02</strong></li><li>关闭防火墙</li><li>关闭swap分区</li><li>允许 iptables 检查桥接流量</li><li>添加阿里云 yum 源</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 关闭防火墙</span></span>
<span class="line"><span>systemctl stop firewalld</span></span>
<span class="line"><span># 设置永久不开启防火墙</span></span>
<span class="line"><span>systemctl disable firewalld</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 关闭swap 分区 </span></span>
<span class="line"><span>swapoff -a   </span></span>
<span class="line"><span>#永久关闭</span></span>
<span class="line"><span>sed -ri &#39;s/.*swap.*/#&amp;/&#39; /etc/fstab</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 将 SELinux 设置为 permissive 模式（相当于将其禁用）</span></span>
<span class="line"><span>setenforce 0</span></span>
<span class="line"><span>sed -i &#39;s/^SELINUX=enforcing$/SELINUX=permissive/&#39; /etc/selinux/config</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 允许 iptables 检查桥接流量</span></span>
<span class="line"><span>cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span></span>
<span class="line"><span>net.bridge.bridge-nf-call-ip6tables = 1</span></span>
<span class="line"><span>net.bridge.bridge-nf-call-iptables = 1</span></span>
<span class="line"><span>net.ipv4.ip_forward = 1</span></span>
<span class="line"><span>EOF</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 添加阿里云 yum 源</span></span>
<span class="line"><span>cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span></span>
<span class="line"><span>[kubernetes]</span></span>
<span class="line"><span>name=Kubernetes</span></span>
<span class="line"><span>baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span>
<span class="line"><span>enabled=1</span></span>
<span class="line"><span>gpgcheck=0</span></span>
<span class="line"><span>repo_gpgcheck=0</span></span>
<span class="line"><span>gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装kubeadm-kubelet-kubectl" tabindex="-1"><a class="header-anchor" href="#安装kubeadm-kubelet-kubectl"><span>安装kubeadm&amp;kubelet&amp;kubectl</span></a></h3><ul><li><strong>执行主机：</strong> <strong>master</strong> <strong>,worker01,worker02</strong></li><li><code>kubeadm</code>：用来初始化集群的指令。</li><li><code>kubelet</code>：在集群中的每个节点上用来启动 Pod 和容器等。</li><li><code>kubectl</code>：用来与集群通信的命令行工具。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 安装</span></span>
<span class="line"><span>yum install -y kubeadm-1.18.8 kubelet-1.18.8 kubectl-1.18.8 ipvsadm</span></span>
<span class="line"><span># 自启</span></span>
<span class="line"><span>sudo systemctl enable --now kubelet</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>验证是否安装完成</p><ul><li><code>kubelet --version</code></li><li><code>kubeadm version</code></li><li><code>kubectl version</code></li></ul></li></ul><h3 id="安装容器" tabindex="-1"><a class="header-anchor" href="#安装容器"><span>安装容器</span></a></h3><ul><li><strong>执行主机：</strong> <strong>master</strong> <strong>,worker01,worker02</strong></li></ul><p>在 Docker 19.x 版本之前，Docker 使用自己的容器运行时（称为 Docker Runtime）。从 Docker 19.x 版本开始，Docker Engine 开始使用 containerd 作为默认的容器运行时，以提供更稳定、可靠的容器管理功能。</p><ul><li>k8s v1.18.8 版本，安装docker v24 暂未遇到问题</li><li>判断是否启用:<code>systemctl status containerd</code></li><li>安装docker及container</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo</span></span>
<span class="line"><span>rm /etc/yum.repos.d/CentOS-Linux-AppStream.repo -f</span></span>
<span class="line"><span>rm /etc/yum.repos.d/CentOS-Linux-BaseOS.repo -f</span></span>
<span class="line"><span>dnf clean all</span></span>
<span class="line"><span>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span></span>
<span class="line"><span>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span>
<span class="line"><span>sudo yum install -y docker-ce-3:24.0.0-1.el8 docker-ce-cli-1:24.0.6-1.el8 containerd.io docker-buildx-plugin docker-compose-plugin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可参考 <a href="https://juejin.cn/post/7283873796977197108" target="_blank" rel="noopener noreferrer">Docker V24 及 Docker Compose V2 的安装及使用</a></p><h3 id="设置节点网络的别名" tabindex="-1"><a class="header-anchor" href="#设置节点网络的别名"><span>设置节点网络的别名</span></a></h3><ul><li><strong>执行主机：</strong> <strong>master</strong> <strong>,worker01,worker02</strong></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span></span>
<span class="line"><span>192.168.123.100 master</span></span>
<span class="line"><span>192.168.123.101 worker01</span></span>
<span class="line"><span>192.168.123.102 worker02</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化集群" tabindex="-1"><a class="header-anchor" href="#初始化集群"><span>初始化集群</span></a></h3><ul><li><strong>执行主机：</strong> <strong>master</strong></li><li>--apiserver-advertise-address：指定通讯节点，使用master节点即可</li><li>--image-repository：k8s官网镜像库</li><li>--service-cidr: svc网络的ip段设置</li><li>--pod-network-cidr:pod的ip段配置，每个pod都会有自己的ip <a href="https://github.com/flannel-io/flannel/blob/master/Documentation/kube-flannel.yml" target="_blank" rel="noopener noreferrer">kube-flannel.yml</a> 默认 10.244.0.0/16</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kubeadm init \\</span></span>
<span class="line"><span>  --apiserver-advertise-address=192.168.123.100 \\</span></span>
<span class="line"><span>  --image-repository registry.aliyuncs.com/google_containers \\</span></span>
<span class="line"><span>  --kubernetes-version v1.18.8 \\</span></span>
<span class="line"><span>  --service-cidr=10.10.0.0/16 \\</span></span>
<span class="line"><span>  --pod-network-cidr=10.244.0.0/16 \\</span></span>
<span class="line"><span>  --ignore-preflight-errors=all</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行结果，创建成功</li></ul><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>输出结果如下</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>您的Kubernetes控制平面已成功初始化！</span></span>
<span class="line"><span></span></span>
<span class="line"><span>要开始使用集群，非root用户需要使用以下操作：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  mkdir -p $HOME/.kube</span></span>
<span class="line"><span>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span>
<span class="line"><span>  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span></span>
<span class="line"><span></span></span>
<span class="line"><span>您现在应该向集群部署一个pod网络。</span></span>
<span class="line"><span>Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span></span>
<span class="line"><span>  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>然后，您可以通过以root身份在每个工作节点上运行以下操作来加入任意数量的工作节点：</span></span>
<span class="line"><span>kubeadm join 192.168.123.100:6443 --token nn9das.wslckjkd1ng3oxui \\</span></span>
<span class="line"><span>    --discovery-token-ca-cert-hash sha256:7b3f413e6bfbd1f91448460426a144741bd14c2bb3119cfa058d07d65ab329fd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置集群身份验证文件</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  mkdir -p $HOME/.kube</span></span>
<span class="line"><span>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span>
<span class="line"><span>  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若不配置直接使用 kubectl 相关命令会提示：<code>The connection to the server \`\`localhost:8080\`\` was refused - did you specify the right host or port?</code></p><p>想要在哪里管理k8s 就要将 .kube 文件夹拷贝到目标主机，即工作节点需要复制 .kube 目录到 $HOME 目录中</p><h3 id="安装网络插件-flannel" tabindex="-1"><a class="header-anchor" href="#安装网络插件-flannel"><span>安装网络插件 flannel</span></a></h3><ul><li>下载 <a href="https://github.com/flannel-io/flannel/blob/master/Documentation/kube-flannel.yml" target="_blank" rel="noopener noreferrer">kube-flannel.yml</a></li><li>若初始化时指定了 --pod-network-cidr 则需要修改配置中 net-conf.json:Network 项</li><li>执行安装</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml --insecure-skip-tls-verify</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="worker节点配置" tabindex="-1"><a class="header-anchor" href="#worker节点配置"><span>worker节点配置</span></a></h3><ul><li><strong>执行主机：worker01,worker02</strong></li><li>根据前面的 环境设置，k8s工具安装，docker安装，在worker节点也执行，进行初始化</li><li>将worker节点加入集群：执行master初始化后输出的join命令</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kubeadm join 192.168.123.100:6443 --token e270ma.bjeg9k1g3e5k1q2h \\</span></span>
<span class="line"><span>    --discovery-token-ca-cert-hash sha256:7beaa6a51994a7d63544ba1d410504ffe8e58a66746c507d3ff09dd15244a813</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若找不到或失效可通过：<code>kubeadm token create --print-join-command</code>重新生成join命令</li><li>复制 master 节点的k8s配置文件 $HOME/.kube/config 到工作节点</li><li>安装网络插件 flannel</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>khttps://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml --insecure-skip-tls-verify</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="安装-dashboard-v2-0-3" tabindex="-1"><a class="header-anchor" href="#安装-dashboard-v2-0-3"><span>安装 Dashboard v2.0.3</span></a></h2><blockquote><p>Kubernetes Dashboard 是一个用于管理和监控 Kubernetes 集群的 Web 用户界面。它提供了一个直观的图形界面，可以帮助你查看和管理集群中的各种资源、部署应用程序、监控集群状态等</p></blockquote><ul><li><a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener noreferrer">官方仓库</a></li><li>执行 <a href="https://github.com/kubernetes/dashboard/blob/v2.0.4/aio/deploy/recommended.yaml" target="_blank" rel="noopener noreferrer">recommended.yaml</a>, 安装面板，完全支持的版本为 <a href="https://github.com/kubernetes/dashboard/releases/tag/v2.0.3" target="_blank" rel="noopener noreferrer">v2.0.3</a></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>若需要修改token默认15分钟的过期时间为7天，修改对应参数即可</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>args:</span></span>
<span class="line"><span>- --auto-generate-certificates</span></span>
<span class="line"><span>- --namespace=kubernetes-dashboard</span></span>
<span class="line"><span>- --token-ttl=604800</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认创建的 kubernetes-dashboard 无权限，所以需要授权，这里直接创建使用命令创建一个新用户 admin 并授权</li><li>创建用户</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cat &lt;&lt;EOF | kubectl apply -f -</span></span>
<span class="line"><span>apiVersion: v1</span></span>
<span class="line"><span>kind: ServiceAccount</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: admin</span></span>
<span class="line"><span>  namespace: kubernetes-dashboard</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>角色授权</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cat &lt;&lt;EOF | kubectl apply -f -</span></span>
<span class="line"><span>apiVersion: rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span>kind: ClusterRoleBinding</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: admin</span></span>
<span class="line"><span>roleRef:</span></span>
<span class="line"><span>  apiGroup: rbac.authorization.k8s.io</span></span>
<span class="line"><span>  kind: ClusterRole</span></span>
<span class="line"><span>  name: cluster-admin</span></span>
<span class="line"><span>subjects:</span></span>
<span class="line"><span>- kind: ServiceAccount</span></span>
<span class="line"><span>  name: admin</span></span>
<span class="line"><span>  namespace: kubernetes-dashboard</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取登陆token</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep kubernetes-dashboard| awk &#39;{print $1}&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@master ~]# kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin | awk &#39;{print $1}&#39;)</span></span>
<span class="line"><span>Name:         admin-token-4nqqz</span></span>
<span class="line"><span>Namespace:    kubernetes-dashboard</span></span>
<span class="line"><span>Labels:       &lt;none&gt;</span></span>
<span class="line"><span>Annotations:  kubernetes.io/service-account.name: admin</span></span>
<span class="line"><span>              kubernetes.io/service-account.uid: 6f432133-5007-4d8b-9239-8c55efa03826</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Type:  kubernetes.io/service-account-token</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Data</span></span>
<span class="line"><span>====</span></span>
<span class="line"><span>ca.crt:     1025 bytes</span></span>
<span class="line"><span>namespace:  20 bytes</span></span>
<span class="line"><span>token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IlUycUl0Zmpnb0Y4Z2FWXzVkbmtjSjR6UngwNW05Z0tDcjVydklLWURYY1EifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi10b2tlbi00bnFxeiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJhZG1pbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjZmNDMyMTMzLTUwMDctNGQ4Yi05MjM5LThjNTVlZmEwMzgyNiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbiJ9.J8nXyfpWjs9IbnvdfrW5hSq5SkCWy16NL89nphiDk-UGZP0qbcx0xQG_IfmTUfO0lxDQdD84VyZ8EzLENtwtqt3oIVZQyyyUAonOzqnAUfN3l9Jd_uFVbZhS_tfnwC3p4z2htUpDfXNLFoA4hav-2EgT6wY3voIZtnarfNvvBCBCimi-pG4AcCvc34V_udpYRXYpP1IPswS82NMTBVt_T1Y8gm_zKwq8LH6Z4LYr6wdr3MxGT4Fr7H5GK1jVS_wbna06HEK-GI_szNf5u-zRTMP5Si4JOHxnEWwHH4keLG6ez0pwkk5jYTqncczeb91Es_zZE95rvLxn1yh2mzAP5g</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>暴露到集群外</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kubectl patch svc kubernetes-dashboard -n kubernetes-dashboard -p &#39;{&quot;spec&quot;:{&quot;type&quot;:&quot;NodePort&quot;,&quot;ports&quot;:[{&quot;port&quot;:443,&quot;targetPort&quot;:8443,&quot;nodePort&quot;:30001}]}}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>使用 Chrome 访问：https://192.168.123.102:30001/#/login</li></ul><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>因为要求必须要使用https，所以结合之前文章**<a href="https://www.cnblogs.com/morang/p/devops-nginx-install-use.html" target="_blank" rel="noopener noreferrer">前后端都用得上的 Nginx 日常使用经验</a>**，生成证书并添加域名配置</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    listen 80;</span></span>
<span class="line"><span>    listen       443 ssl;</span></span>
<span class="line"><span>    server_name k8s.devops.test.com;  # 自行修改成你的域名</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ssl_certificate      /certs/k8s.devops.test.com/server.crt;</span></span>
<span class="line"><span>    ssl_certificate_key  /certs/k8s.devops.test.com/server.key;</span></span>
<span class="line"><span>    ssl_session_cache    shared:SSL:1m;</span></span>
<span class="line"><span>    ssl_session_timeout  5m;</span></span>
<span class="line"><span>    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span>
<span class="line"><span>    ssl_prefer_server_ciphers  on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>            proxy_pass https://192.168.123.100:30001;</span></span>
<span class="line"><span>            proxy_http_version 1.1;</span></span>
<span class="line"><span>            proxy_buffering off;</span></span>
<span class="line"><span>            proxy_request_buffering off;</span></span>
<span class="line"><span>            proxy_set_header Upgrade $http_upgrade;</span></span>
<span class="line"><span>            proxy_set_header Connection &quot;upgrade&quot;;</span></span>
<span class="line"><span>            proxy_set_header Host $host;</span></span>
<span class="line"><span>            proxy_set_header X-Forwarded-For $remote_addr;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>成功使用https+域名访问</li></ul><figure><img src="`+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>升级面板版本 v2.2.0，可以更好的显示 ingress 相关信息</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 删除pod</span></span>
<span class="line"><span>kubectl -n kubernetes-dashboard delete $(kubectl -n kubernetes-dashboard get pod -o name | grep dashboard)</span></span>
<span class="line"><span># 重新部署v2.2.0</span></span>
<span class="line"><span>kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安装-metrics-server-v0-3-7" tabindex="-1"><a class="header-anchor" href="#安装-metrics-server-v0-3-7"><span>安装 Metrics Server v0.3.7</span></a></h2><blockquote><p>Metrics Server 是一个用于收集集群中各个组件的资源使用情况和性能指标数据的组件。安装后可以在面板中或使用命令 kubectl top node 查看集群使用情况</p></blockquote><ul><li><p><a href="https://github.com/kubernetes-sigs/metrics-server" target="_blank" rel="noopener noreferrer">官方仓库</a></p></li><li><p>k8s v1.18 对应可以使用 <a href="https://github.com/kubernetes-sigs/metrics-server/tree/v0.3.7/deploy" target="_blank" rel="noopener noreferrer">v0.3.7</a> 部署文件 metrics-server/deploy/1.8+/</p></li><li><p>修改配置 metrics-server-deployment.yaml</p><ul><li>修改镜像源：<code>registry.aliyuncs.com/google_containers</code></li><li>新增command配置跳过证书的验证： <code>-kubelet-insecure-tls</code></li><li>设置首选通信类型：<code>--kubelet-preferred-address-types=InternalDNS,InternalIP,ExternalDNS,ExternalIP,Hostname</code></li></ul></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># ...</span></span>
<span class="line"><span>spec:</span></span>
<span class="line"><span>      serviceAccountName: metrics-server</span></span>
<span class="line"><span>      volumes:</span></span>
<span class="line"><span>      # mount in tmp so we can safely use from-scratch images and/or read-only containers</span></span>
<span class="line"><span>      - name: tmp-dir</span></span>
<span class="line"><span>        emptyDir: {}</span></span>
<span class="line"><span>      containers:</span></span>
<span class="line"><span>      - name: metrics-server</span></span>
<span class="line"><span>        # 修改镜像源 image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7</span></span>
<span class="line"><span>        image: registry.aliyuncs.com/google_containers/metrics-server:v0.3.7</span></span>
<span class="line"><span>        imagePullPolicy: IfNotPresent</span></span>
<span class="line"><span>        # 新增command配置</span></span>
<span class="line"><span>        command:</span></span>
<span class="line"><span>        - /metrics-server</span></span>
<span class="line"><span>        # 跳过 Kubernetes API Server 对 Kubelet TLS 证书的验证</span></span>
<span class="line"><span>        - --kubelet-insecure-tls</span></span>
<span class="line"><span>        # 通信时首选的地址类型</span></span>
<span class="line"><span>        - --kubelet-preferred-address-types=InternalDNS,InternalIP,ExternalDNS,ExternalIP,Hostname</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>拷贝文件到服务器或直接在master节点修改</li><li>到考本文件的目录执行命令安装即可</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cd /app/k8s/</span></span>
<span class="line"><span>kubectl apply -f metrics-server-0.3.7/deploy/1.8+/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>目录结构及修改</li></ul><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>执行成功</li></ul><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>等待pod部署成功后刷新页面可以看到监控就出来了</li></ul><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>使用 <code>kubectl top node</code>查看节点资源使用情况</li></ul><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>使用 <code>kubectl top pod -A</code> 查看 Pod 资源使用情况</li></ul><h2 id="安装-helm-v3-13-1" tabindex="-1"><a class="header-anchor" href="#安装-helm-v3-13-1"><span>安装 Helm v3.13.1</span></a></h2><blockquote><p>Kubernetes Helm 是一个包管理工具，用于在 Kubernetes 环境中简化应用程序的部署和管理。Helm 允许你定义、安装和升级 Kubernetes 应用程序的预定义软件包，这些软件包称为 Helm Charts。</p></blockquote><ul><li><a href="https://github.com/helm/helm" target="_blank" rel="noopener noreferrer">官方仓库</a></li><li>安装v3版本</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>安装成功，版本为 v3.13.1</li></ul><figure><img src="'+A+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>安装目录：/usr/local/bin/helm</li><li>可以看到有一个警告说没有安装git, 因为 Helm 在安装插件(<a href="https://github.com/chartmuseum/helm-push" target="_blank" rel="noopener noreferrer">push插件</a>)时需要使用 Git，所以可以顺手安装一下 git</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sudo dnf install git -y</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>查看Helm仓库列表：<code>helm repo list</code> ，默认为空，如果要按照什么应用，需要添加对应的仓库</li><li>helm 搜索应用：<code>helm search repo ingress-nginx/ingress-nginx --version=&#39;&lt;4&#39;</code></li><li>helm 卸载应用：<code>helm uninstall -n ingress-nginx ingress-nginx</code></li><li>具体使用可参考下面安装 ingress-nginx</li><li>在 Helm 中修改镜像源需要使用 <code>--set</code> 或 <code>--set-string</code> 参数来覆盖默认值。对于 Nginx Ingress Controller，可以通过指定 <code>controller.image.repository</code> 和 <code>controller.image.tag</code> 来修改镜像源的包地址和版本。这个在安装ingress-nginx就有使用，在无法使用官方镜像的时候一般都需要替换为国内镜像</li></ul><h2 id="使用-k8s-集群部署服务" tabindex="-1"><a class="header-anchor" href="#使用-k8s-集群部署服务"><span>使用 K8S 集群部署服务</span></a></h2><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h3><ul><li>部署服务：<code>kubectl apply -f 配置文件名.yml</code></li><li>查看副本集信息：<code>kubectl get replicasets</code></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@master tests]# kubectl get replicasets</span></span>
<span class="line"><span>NAME                  DESIRED   CURRENT   READY   AGE</span></span>
<span class="line"><span>my-nginx-69448bd7d9   2         2         2       36m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查看 Deployment 信息：<code>kubectl describe deployments my-nginx</code></li></ul><figure><img src="`+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>查看 Service 信息：<code>kubectl get services my-nginx-service</code></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@master tests]# kubectl get services my-nginx-service</span></span>
<span class="line"><span>NAME               TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span></span>
<span class="line"><span>my-nginx-service   NodePort   10.10.143.180   &lt;none&gt;        80:30080/TCP   35m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>集群中可以使用此服务IP进行通讯</p><figure><img src="`+F+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>查看部署的 nginx 服务的 Pod :<code>kubectl get pods --selector=app=my-nginx</code></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@master tests]# kubectl get pods --selector=app=my-nginx</span></span>
<span class="line"><span>NAME                        READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span>my-nginx-69448bd7d9-q8xtl   1/1     Running   0          39m</span></span>
<span class="line"><span>my-nginx-69448bd7d9-zghxb   1/1     Running   0          30m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>删除服务：<code>kubectl delete services my-nginx-service</code></li><li>删除负载：<code>kubectl delete deployment my-nginx</code></li></ul><h3 id="部署一个-nginx-服务" tabindex="-1"><a class="header-anchor" href="#部署一个-nginx-服务"><span>部署一个 nginx 服务</span></a></h3><ul><li>配置一个简单的 nginx 服务：nginx.yml</li><li>部署了 Deployment 和 Service</li><li>暴露了容器的端口：80</li><li>暴露集群外的端口：30080</li><li>设置了2个副本：<code>replicas: 2</code></li><li>完整配置文件</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>apiVersion: apps/v1</span></span>
<span class="line"><span>kind: Deployment</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: my-nginx</span></span>
<span class="line"><span>spec:</span></span>
<span class="line"><span>  replicas: 2</span></span>
<span class="line"><span>  selector:</span></span>
<span class="line"><span>    matchLabels:</span></span>
<span class="line"><span>      app: my-nginx</span></span>
<span class="line"><span>  template:</span></span>
<span class="line"><span>    metadata:</span></span>
<span class="line"><span>      labels:</span></span>
<span class="line"><span>        app: my-nginx</span></span>
<span class="line"><span>    spec:</span></span>
<span class="line"><span>      containers:</span></span>
<span class="line"><span>        - name: my-nginx</span></span>
<span class="line"><span>          image: nginx:latest</span></span>
<span class="line"><span>          ports:</span></span>
<span class="line"><span>            - containerPort: 80</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span>apiVersion: v1</span></span>
<span class="line"><span>kind: Service</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: my-nginx-service</span></span>
<span class="line"><span>spec:</span></span>
<span class="line"><span>  selector:</span></span>
<span class="line"><span>    app: my-nginx</span></span>
<span class="line"><span>  type: NodePort</span></span>
<span class="line"><span>  ports:</span></span>
<span class="line"><span>    - protocol: TCP</span></span>
<span class="line"><span>      port: 80</span></span>
<span class="line"><span>      targetPort: 80</span></span>
<span class="line"><span>      nodePort: 30080</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上传到服务器执行：<code>kubectl apply -f nginx.yml</code></li><li>部署成功后使用节点IP+端口号即可访问</li></ul><figure><img src="`+w+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>目前部署了两个服务，但是可以目前没有能够设置负载的地方，所以还需要一个 Ingress 控制器来管理流量和负载均衡</li></ul><h2 id="使用-ingress-nginx-v3-41进行服务负载" tabindex="-1"><a class="header-anchor" href="#使用-ingress-nginx-v3-41进行服务负载"><span>使用 Ingress-Nginx v3.41进行服务负载</span></a></h2><blockquote><p>Kubernetes 默认使用的负载均衡算法是基于 IP 的轮询（IP-based round-robin），它会将请求按照源 IP 地址的顺序分发到不同的 Pod 上。如果需要其他负载均衡算法，可以使用 Ingress 控制器或者自定义的负载均衡解决方案</p><p>如果使用 Kubernetes 1.19 或更高版本，可以使用最新版本的 NGINX Ingress Controller;</p><p>如果使用旧版本的 Kubernetes（1.18 或更早版本），则必须使用 Ingress-Nginx Controller 的 0.X 版本（例如 0.49 版本</p></blockquote><h3 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h3><ul><li><a href="https://github.com/kubernetes/ingress-nginx" target="_blank" rel="noopener noreferrer">官方仓库</a></li><li><a href="https://kubernetes.github.io/ingress-nginx/deploy/#running-on-kubernetes-versions-older-than-119" target="_blank" rel="noopener noreferrer">版本选择说明</a></li><li>ArtifactHub： <a href="https://artifacthub.io/packages/helm/ingress-nginx/ingress-nginx/3.41.0" target="_blank" rel="noopener noreferrer">v3.41</a></li><li>使用 helm 查找 ingress-nginx 包</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 查询仓库列表</span></span>
<span class="line"><span>helm repo list</span></span>
<span class="line"><span># 添加仓库地址</span></span>
<span class="line"><span>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx</span></span>
<span class="line"><span># 搜索包</span></span>
<span class="line"><span>helm search repo ingress-nginx/ingress-nginx --version=&#39;&lt;4&#39;</span></span>
<span class="line"><span># ingress-nginx/ingress-nginx     3.41.0          0.51.0          Ingress controller for Kubernetes using NGINX a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><ul><li>创建 namespace</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kubectl create namespace ingress-nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>安装 ingress-nginx 源下的 v3.41 版本 ingress-nginx, 指定 namespace 为 ingress-nginx,指定镜像源为阿里云</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>helm install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --version 3.41.0 --set controller.image.repository=registry.aliyuncs.com/google_containers/nginx-ingress-controller</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>如果安装后报错负载无法启动，可能是因为包无法拉取，可指定镜像源 <code>--set controller.image.repository</code> 为国内源(registry.aliyuncs.com/google_containers/nginx-ingress-controller) 重新安装（卸载 <code>helm uninstall -n ingress-nginx ingress-nginx</code>）即可</li><li>安装成功，并给出提示应该如何使用</li></ul><figure><img src="`+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>如果需要在局域网中使用，还需要修改两个配置</p></li><li><p>修改负载 ingress-nginx-controller 配置 保存后生效</p><ul><li><code>dnsPolicy: ClusterFirstWithHostNet</code> 策略将首先尝试使用主机的 DNS 解析服务来解析域名，如果主机的 DNS 无法解析该域名，将会尝试使用其他配置的 DNS 解析器</li><li><code>hostNetwork:true</code> Pod 中的容器将使用主机的网络栈和网络配置</li></ul></li></ul><figure><img src="'+I+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><ul><li>通过 Dashboard 右上角直接创建 YAML 文件</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>apiVersion: extensions/v1beta1</span></span>
<span class="line"><span>kind: Ingress</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: ingress-nginx-test</span></span>
<span class="line"><span>  namespace: default</span></span>
<span class="line"><span>spec:</span></span>
<span class="line"><span>  rules:</span></span>
<span class="line"><span>  - host: nginx.k8stest.com</span></span>
<span class="line"><span>    http:</span></span>
<span class="line"><span>      paths:</span></span>
<span class="line"><span>      - backend:</span></span>
<span class="line"><span>          serviceName: my-nginx-service</span></span>
<span class="line"><span>          servicePort: 80</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>保存后将会转发域名请求到前面部署的 my-nginx-service 服务中，此时将使用 ingress-nginx 进行负载，当然，还需要将域名解析到目标服务器，本地局域网可以使用 hosts 或者 dns 设置</li><li>通过 <code>kubectl describe pod ingress-nginx-controller -n ingress-nginx</code> 可获取到ingress-nginx所在节点信息，IP为 192.168.123.102</li></ul><figure><img src="`+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>设置 hosts <code> 192.168.123.102 nginx.k8stest.com</code>,再刷新下dns缓存 <code>ipconfig /flushdns</code>访问即可，每次刷新都会请求到不同的pod上面</li></ul><figure><img src="'+D+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>至此，在局域网中安装使用 k8s v1.18.8,并进行相关配置已经完成，得益与大佬们的分享，耗时两天，边弄边记，优化了一些步骤与细节。后续将尝试安装更新的版本，敬请期待。</p><h2 id="踩坑记录" tabindex="-1"><a class="header-anchor" href="#踩坑记录"><span>踩坑记录</span></a></h2><ul><li>使用yum安装kubeadm时报错，测试发现curl无法使用，错误如下，需要检查设置dns:<code>cat /etc/resolv.conf</code> 写入默认配置或公告dns: nameserver 192.168.123.1</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@master ~]# yum install -y kubeadm-1.18.8 kubelet-1.18.8 kubectl-1.18.8 ipvsadm</span></span>
<span class="line"><span>Repository extras is listed more than once in the configuration</span></span>
<span class="line"><span>CentOS-8.5.2111 - Base - mirrors.aliyun.com                                                                                                                  0.0  B/s |   0  B     00:00</span></span>
<span class="line"><span>Errors during downloading metadata for repository &#39;base&#39;:</span></span>
<span class="line"><span>  - Curl error (6): Couldn&#39;t resolve host name for http://mirrors.aliyun.com/centos-vault/8.5.2111/BaseOS/x86_64/os/repodata/repomd.xml [Could not resolve host: mirrors.aliyun.com]</span></span>
<span class="line"><span>  - Curl error (6): Couldn&#39;t resolve host name for http://mirrors.aliyuncs.com/centos-vault/8.5.2111/BaseOS/x86_64/os/repodata/repomd.xml [Could not resolve host: mirrors.aliyuncs.com]</span></span>
<span class="line"><span>  - Curl error (6): Couldn&#39;t resolve host name for http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/BaseOS/x86_64/os/repodata/repomd.xml [Could not resolve host: mirrors.cloud.aliyuncs.com]</span></span>
<span class="line"><span>Error: Failed to download metadata for repo &#39;base&#39;: Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>阿里云镜像源的使用，指定镜像源时需要使用 <code>registry.aliyuncs.com/google_containers/metrics-server:v0.3.7</code></li><li>helm 安装 ingress-nginx 报错，看是否是因为包拉不下来，可以通过指定镜像源重新安装（卸载 <code>helm uninstall -n ingress-nginx ingress-nginx</code>）即可：k8s v1.18.8 安装 ingress-nginx:<code>helm install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --version 3.41.0 --set controller.image.repository=\`\`registry.aliyuncs.com/google_containers/nginx-ingress-controller</code></li></ul><figure><img src="`+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="相关文档" tabindex="-1"><a class="header-anchor" href="#相关文档"><span>相关文档</span></a></h2><ul><li>官方文档 <ul><li><a href="https://kubernetes.io/zh-cn/docs/setup/" target="_blank" rel="noopener noreferrer">k8s官方文档</a></li><li><a href="https://kubernetes.github.io/ingress-nginx/deploy/#running-on-kubernetes-versions-older-than-119" target="_blank" rel="noopener noreferrer">在低于 1.19 的 Kubernetes 版本上运行 ingress-nginx的说明</a></li></ul></li><li>参考 <ul><li><a href="https://qiuyadongsite.github.io/2019/01/03/framework3-microService-k8s1/" target="_blank" rel="noopener noreferrer">k8s安装与试验</a></li><li><a href="https://www.cnblogs.com/binghe001/p/12823763.html" target="_blank" rel="noopener noreferrer">K8S 1.18.2安装dashboard</a></li><li><a href="https://www.cnblogs.com/hsyw/p/17804493.html" target="_blank" rel="noopener noreferrer">Ingress-Nginx部署</a></li></ul></li><li>相关推荐 <ul><li><a href="https://juejin.cn/post/7283798251404738560" target="_blank" rel="noopener noreferrer">Hyper-V 安装 CentOS 8.5</a></li><li><a href="https://juejin.cn/post/7283873796977197108" target="_blank" rel="noopener noreferrer">Docker V24 及 Docker Compose V2 的安装及使用</a></li><li><a href="https://juejin.cn/post/7296754422750232576" target="_blank" rel="noopener noreferrer">前后端都用得上的 Nginx 日常使用经验</a></li></ul></li></ul><h2 id="后语" tabindex="-1"><a class="header-anchor" href="#后语"><span>后语</span></a></h2><blockquote><p>前前后后尝试了好几次搭建k8s,之前基本都看着这座大山，望而却步，各种理由而终止。当时21立的flag，终于是在这2023的末尾给实现了。</p><p>不积硅步 无以至千里，与君共勉</p></blockquote>',180)]))}const M=n(E,[["render",O],["__file","devops_k8s_install_use.html.vue"]]),z=JSON.parse('{"path":"/posts/devops/devops_k8s_install_use.html","title":"一篇可供参考的 K8S 落地实践经验","lang":"zh-CN","frontmatter":{"title":"一篇可供参考的 K8S 落地实践经验","date":"2023-12-26T08:38:00.000Z","category":["DevOps"],"tag":["devops","k8s"],"description":"前言 k8s 即 Kubernetes，是一个开源的容器编排引擎，用来对容器化应用进行自动化部署、 扩缩和管理 本篇文章将分享 k8s v1.18.8 的安装，以及其面板，监控，部署服务，使用Ingress-Ningx进行负载均衡的实践 因为公司用的这个老版本，并且后面要负责搭建，担心无法复刻，趁此周末，实践一二，确认可行，遂与君分享。 虚拟机准备 宿...","head":[["meta",{"property":"og:url","content":"https://www.yimo.link/posts/devops/devops_k8s_install_use.html"}],["meta",{"property":"og:site_name","content":"易墨网"}],["meta",{"property":"og:title","content":"一篇可供参考的 K8S 落地实践经验"}],["meta",{"property":"og:description","content":"前言 k8s 即 Kubernetes，是一个开源的容器编排引擎，用来对容器化应用进行自动化部署、 扩缩和管理 本篇文章将分享 k8s v1.18.8 的安装，以及其面板，监控，部署服务，使用Ingress-Ningx进行负载均衡的实践 因为公司用的这个老版本，并且后面要负责搭建，担心无法复刻，趁此周末，实践一二，确认可行，遂与君分享。 虚拟机准备 宿..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T11:15:42.000Z"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"k8s"}],["meta",{"property":"article:published_time","content":"2023-12-26T08:38:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-28T11:15:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一篇可供参考的 K8S 落地实践经验\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-26T08:38:00.000Z\\",\\"dateModified\\":\\"2024-10-28T11:15:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"易墨\\",\\"url\\":\\"https://www.yimo.link\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"虚拟机准备","slug":"虚拟机准备","link":"#虚拟机准备","children":[{"level":3,"title":"CentOS8.5 设置固定 IP","slug":"centos8-5-设置固定-ip","link":"#centos8-5-设置固定-ip","children":[]},{"level":3,"title":"CentOS8.5 联网检查","slug":"centos8-5-联网检查","link":"#centos8-5-联网检查","children":[]},{"level":3,"title":"CentOS8.5 设置主机名","slug":"centos8-5-设置主机名","link":"#centos8-5-设置主机名","children":[]},{"level":3,"title":"确保每个节点上 MAC 地址的唯一性","slug":"确保每个节点上-mac-地址的唯一性","link":"#确保每个节点上-mac-地址的唯一性","children":[]},{"level":3,"title":"确保 product_uuid 的唯一性","slug":"确保-product-uuid-的唯一性","link":"#确保-product-uuid-的唯一性","children":[]},{"level":3,"title":"确保 Machine ID 的唯一性","slug":"确保-machine-id-的唯一性","link":"#确保-machine-id-的唯一性","children":[]},{"level":3,"title":"检查端口是否被占用","slug":"检查端口是否被占用","link":"#检查端口是否被占用","children":[]}]},{"level":2,"title":"安装 K8S v1.18.8","slug":"安装-k8s-v1-18-8","link":"#安装-k8s-v1-18-8","children":[{"level":3,"title":"节点初始化","slug":"节点初始化","link":"#节点初始化","children":[]},{"level":3,"title":"安装kubeadm&kubelet&kubectl","slug":"安装kubeadm-kubelet-kubectl","link":"#安装kubeadm-kubelet-kubectl","children":[]},{"level":3,"title":"安装容器","slug":"安装容器","link":"#安装容器","children":[]},{"level":3,"title":"设置节点网络的别名","slug":"设置节点网络的别名","link":"#设置节点网络的别名","children":[]},{"level":3,"title":"初始化集群","slug":"初始化集群","link":"#初始化集群","children":[]},{"level":3,"title":"安装网络插件 flannel","slug":"安装网络插件-flannel","link":"#安装网络插件-flannel","children":[]},{"level":3,"title":"worker节点配置","slug":"worker节点配置","link":"#worker节点配置","children":[]}]},{"level":2,"title":"安装 Dashboard v2.0.3","slug":"安装-dashboard-v2-0-3","link":"#安装-dashboard-v2-0-3","children":[]},{"level":2,"title":"安装 Metrics Server v0.3.7","slug":"安装-metrics-server-v0-3-7","link":"#安装-metrics-server-v0-3-7","children":[]},{"level":2,"title":"安装 Helm v3.13.1","slug":"安装-helm-v3-13-1","link":"#安装-helm-v3-13-1","children":[]},{"level":2,"title":"使用 K8S 集群部署服务","slug":"使用-k8s-集群部署服务","link":"#使用-k8s-集群部署服务","children":[{"level":3,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":3,"title":"部署一个 nginx 服务","slug":"部署一个-nginx-服务","link":"#部署一个-nginx-服务","children":[]}]},{"level":2,"title":"使用 Ingress-Nginx v3.41进行服务负载","slug":"使用-ingress-nginx-v3-41进行服务负载","link":"#使用-ingress-nginx-v3-41进行服务负载","children":[{"level":3,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}]},{"level":2,"title":"踩坑记录","slug":"踩坑记录","link":"#踩坑记录","children":[]},{"level":2,"title":"相关文档","slug":"相关文档","link":"#相关文档","children":[]},{"level":2,"title":"后语","slug":"后语","link":"#后语","children":[]}],"git":{"createdTime":1730114142000,"updatedTime":1730114142000,"contributors":[{"name":"yimo","email":"yimo@wikiglobal.com","commits":1}]},"readingTime":{"minutes":15.28,"words":4583},"filePathRelative":"posts/devops/devops_k8s_install_use.md","localizedDate":"2023年12月26日","excerpt":"<h2>前言</h2>\\n<blockquote>\\n<p>k8s 即 Kubernetes，是一个开源的容器编排引擎，用来对容器化应用进行自动化部署、 扩缩和管理<br>\\n本篇文章将分享 k8s v1.18.8 的安装，以及其面板，监控，部署服务，使用Ingress-Ningx进行负载均衡的实践<br>\\n因为公司用的这个老版本，并且后面要负责搭建，担心无法复刻，趁此周末，实践一二，确认可行，遂与君分享。</p>\\n</blockquote>\\n<h2>虚拟机准备</h2>\\n<ul>\\n<li>宿主机：Windows10</li>\\n<li>虚拟机工具：Hyper-V 10.0.19041.1</li>\\n<li>虚拟机 Linux 系统：CentOS 8.5</li>\\n<li>已安装软件：docker (v2.21.0)及 docker compose(24.0.6)</li>\\n<li>Hyper-V虚拟机一览</li>\\n</ul>","autoDesc":true}');export{M as comp,z as data};
