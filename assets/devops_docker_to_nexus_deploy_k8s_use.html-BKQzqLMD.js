import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as i,o as e}from"./app-BHZ56IUu.js";const l="/assets/662652-20240101141116686-1893905478-_OtPmOj6.png",p="/assets/662652-20240101141116674-114526916-DtTt-0et.png",d="/assets/662652-20240101141116693-190335198-B_OhLam4.png",t="/assets/662652-20240101141116812-1200584262-DP2fuvC5.png",c="/assets/662652-20240101141116696-1005014515-CZNUjziK.png",r="/assets/662652-20240101141116699-1663054769-COd8FXCh.png",o="/assets/662652-20240101141116906-1935728130-hFV0XX0y.png",u="/assets/662652-20240101141116919-17260517-CXnPA50O.png",v="/assets/662652-20240101141116852-1242092663-yuGcHF1R.png",m="/assets/662652-20240101141116835-1408533605-lBPa5Lf8.png",b="/assets/662652-20240101141116854-1813509357-Ky68Oa6g.png",h="/assets/662652-20240101141116916-1313142973-Ds0locGT.png",g="/assets/662652-20240101141116891-1927437079-BvRWOJ8Q.png",k="/assets/662652-20240101141116911-1377416796-BFHKOCDP.png",f="/assets/662652-20240101141116913-1740199460-CViCxjZO.png",x="/assets/662652-20240101141116909-1793602659-D9tTpaOg.png",y="/assets/662652-20240101141116904-568706793-CzFuLQzE.png",_="/assets/662652-20240101141116924-1622943827-Bn0Rl3QG.png",z="/assets/662652-20240101141116968-1918741915-6DW4HPhe.png",A="/assets/662652-20240101141116890-932940560-CfcHCDbl.png",w="/assets/662652-20240101141116894-1676626081-DqQvh6yZ.png",F="/assets/662652-20240101141116917-1343811754-DeeqIsRd.png",P="/assets/662652-20240101141116949-2070342791-W44oudCI.png",D="/assets/662652-20240101141116907-1760870748-DqD6BKkA.png",j="/assets/662652-20240101141116984-1347563020-G6ENKBEL.png",N="/assets/662652-20240101141116848-1516486994-Cc7moZgT.png",C="/assets/662652-20240101141116926-915781747-DG2O3UpQ.png",T={};function q(S,s){return e(),a("div",null,s[0]||(s[0]=[i('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><blockquote><p>前面分享了 k8s 的部署安装，本篇来点实操，将会把一个 .net core + vue 的项目（zhontai），打包构建成 docker 镜像，推送到 nexus 镜像仓库，并部署到 k8s 中</p></blockquote><h2 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h2><blockquote><p>要实现项目的部署，除了准备要部署的环境（k8s），还需要准备项目所用到的各中间件，本文旨在分享部署的一个整体流程，对项目中所使用到的各中间件（mysql，redis 等）的安装使用可自行在本<a href="https://www.cnblogs.com/morang/category/2348249.html" target="_blank" rel="noopener noreferrer"> DevOps 系列文章</a>中找到</p></blockquote><ul><li><p>一个 .net core+vue 的项目</p><ul><li>使用 zhontai 项目，之前也有做分享，<a href="https://www.cnblogs.com/morang/p/zhontai_admin_core_book_01.html" target="_blank" rel="noopener noreferrer">文章介绍</a></li><li>后端 <a href="https://github.com/zhontai/Admin.Core/tree/v3.7.1" target="_blank" rel="noopener noreferrer">Admin.Core v3.7.1</a></li><li>前端 <a href="https://github.com/zhontai/admin.ui.plus/tree/v2.2.0" target="_blank" rel="noopener noreferrer">admin.ui.plus v2.2.0</a></li></ul></li><li><p>Nexus 的安装部署，<a href="https://www.cnblogs.com/morang/p/devops-nexus3-nuget-docker-install-use.html" target="_blank" rel="noopener noreferrer">文章介绍</a></p><ul><li>做为镜像仓库使用，将项目打包镜像及项目镜像推送到仓库，k8s 也从此仓库拉取镜像</li><li>版本为 v3.61 ，安装地址为 192.168.0.214：8081，并使用局域网域名解析，</li><li>在目标机器先登录能够拉取推送镜像，<a href="https://juejin.cn/spost/7298189093808128010#heading-25" target="_blank" rel="noopener noreferrer">参考</a></li><li>拉取镜像地址：https://nexus.devops.test.com</li><li>推送镜像地址：https://push.nexus.devops.test.com</li><li><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li><li><p>Docker 的安装部署，<a href="https://www.cnblogs.com/morang/p/devops-docker24-composev2-install.html" target="_blank" rel="noopener noreferrer">文章介绍</a></p><ul><li>使用 doker 拉取 sdk、nodejs 镜像进行打包，构建 k8s 所需要的项目镜像</li><li>版本：v24.0.6</li><li><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li><li><p>K8S 的安装与部署，<a href="https://www.cnblogs.com/morang/p/devops-k8s-install-use.html" target="_blank" rel="noopener noreferrer">文章介绍</a></p><ul><li>部署项目服务</li><li>使用 ingress 解析域名到服务</li></ul></li><li><p>部署前后端项目到 K8S，本文介绍</p></li></ul><h2 id="使用-docker-打包应用镜像" tabindex="-1"><a class="header-anchor" href="#使用-docker-打包应用镜像"><span>使用 Docker 打包应用镜像</span></a></h2><p>不管什么语言，基本都可以使用这个打包流程，将官方镜像打包推送到私有镜像仓库个人认为是必要的，不然如果一旦远端的镜像失效，又需要重新拉取镜像时就会很尬尴。</p><ol><li><p>准备打包所需镜像</p><ol><li>获取基础打包镜像（dotnet 获取 sdk 镜像，vue 获取 node 镜像）</li><li>基于基础镜像，安装所需软件，设置默认配置，复制默认文件，封装项目的打包镜像</li><li>挂载项目到 sdk 镜像进行打包，打包后获取构建完成的产物</li></ol></li><li><p>准备运行所需的基础镜像</p><ol><li>获取运行时镜像（.net core 获取 runtime 镜像，vue 获取 nginx 镜像）</li><li>基于运行时镜像，将打包构建完从的产物添加到镜像，构建项目镜像</li><li>推送项目镜像到仓库</li></ol></li></ol><h3 id="net-core-7-0-项目镜像" tabindex="-1"><a class="header-anchor" href="#net-core-7-0-项目镜像"><span>.Net Core 7.0 项目镜像</span></a></h3><p>构建所需一个 sdk 镜像用于打包编译项目，一个 runtime 镜像运行 .net core 项目，版本选择对应的 7.0 即可</p><ul><li>dotnet sdk 镜像地址：https://hub.docker.com/_/microsoft-dotnet-sdk/</li><li>dotnet runtime 镜像地址： https://hub.docker.com/_/microsoft-dotnet-runtime/</li></ul><h4 id="构建-dotnet-sdk-7-0-打包镜像" tabindex="-1"><a class="header-anchor" href="#构建-dotnet-sdk-7-0-打包镜像"><span>构建 dotnet sdk 7.0 打包镜像</span></a></h4><ol><li><p>拉取 dotnet sdk 镜像：<code> docker pull mcr.microsoft.com/dotnet/sdk:7.0</code></p><ol><li>目前可以直接拉取，若无法拉取则配置国内镜像源</li><li>临时运行容器进行测试：<code> docker run -it --rm mcr.microsoft.com/dotnet/sdk:7.0</code>，可以将需要的东西进行安装测试再编写 dockerfile</li><li><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li><li><p>使用 Dockerfile 构建打包镜像 dotnet-sdk-7.0</p><ol><li>为了便于后期维护，使用 Dockerfile 来构建</li><li>目录文件：dotnet-sdk-7.0/Dockerfile</li><li>基于 sdk 安装 dotnet-monitor v7.3.2， <a href="https://github.com/dotnet/dotnet-monitor/blob/v7.3.2/documentation/setup.md" target="_blank" rel="noopener noreferrer">文档</a> 这里只做演示，暂时没用上，后续使用多阶段构建的时候可以将其复制到运行时镜像中</li><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 基础sdk镜像 v7.0    </span></span>
<span class="line"><span>FROM mcr.microsoft.com/dotnet/sdk:7.0</span></span>
<span class="line"><span># 将tools目录加入环境变量</span></span>
<span class="line"><span>ENV PATH=&quot;$PATH:/root/.dotnet/tools&quot;</span></span>
<span class="line"><span># 安装 dotnet-monitor </span></span>
<span class="line"><span>RUN dotnet tool install -g dotnet-monitor --version 7.3.2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>执行构建：<code>docker build -t dotnet-sdk-7.0 -f ./Dockerfile .</code></li><li><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li><li><p>推送镜像到 Nexus 仓库</p><ol><li>镜像登录认证：<code>docker login push.nexus.devops.test.com -u pusher -p devops666</code></li><li>打标签：<code> docker tag dotnet-sdk-7.0 push.nexus.devops.test.com/projectbuild/dotnet-sdk-7.0</code></li><li>推送镜像：<code> docker push push.nexus.devops.test.com/projectbuild/dotnet-sdk-7.0</code></li><li>记得清理本地缓存镜像：<code> docker rmi dotnet-sdk-7.0 &amp;&amp; docker rmi push.nexus.devops.test.com/projectbuild/dotnet-sdk-7.0</code></li><li><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li><li><p>使用镜像</p><ol><li>后续使用 dotnet sdk 7.0 就可以直接使用 <code>nexus.devops.test.com/projectbuild/dotnet-sdk-7.0</code> 即可</li><li>直接拉取：<code> docker pull nexus.devops.test.com/projectbuild/dotnet-sdk-7.0</code></li><li><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li></ol><h4 id="构建-dotnet-runtime-7-0-运行时镜像" tabindex="-1"><a class="header-anchor" href="#构建-dotnet-runtime-7-0-运行时镜像"><span>构建 dotnet runtime 7.0 运行时镜像</span></a></h4><ol><li><p>拉取 dotnet runtime 镜像：<code> docker pull mcr.microsoft.com/dotnet/runtime:7.0</code></p><ol><li>临时运行容器进行测试：<code> docker run -it --rm mcr.microsoft.com/dotnet/runtime:7.0</code></li></ol></li><li><p>使用 Dockerfile 构建运行时镜像</p><ol><li>为了便于后期维护，使用 Dockerfile 来构建</li><li>目录文件：dotnet-runtime-7.0/Dockerfile</li><li>若非需要，可以不安装软件，安装软件后镜像会多个 100M</li><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 基础runtime镜像 v7.0   </span></span>
<span class="line"><span>FROM mcr.microsoft.com/dotnet/aspnet:7.0</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 写入阿里云镜像源</span></span>
<span class="line"><span>RUN echo &quot; \\</span></span>
<span class="line"><span>deb http://mirrors.aliyun.com/debian/ bullseye main contrib non-free\\n \\</span></span>
<span class="line"><span>deb-src http://mirrors.aliyun.com/debian/ bullseye main contrib non-free\\n \\</span></span>
<span class="line"><span>\\n \\</span></span>
<span class="line"><span>deb http://mirrors.aliyun.com/debian-security bullseye-security main contrib non-free\\n \\</span></span>
<span class="line"><span>deb-src http://mirrors.aliyun.com/debian-security bullseye-security main contrib non-free\\n \\</span></span>
<span class="line"><span>\\n \\</span></span>
<span class="line"><span>deb http://mirrors.aliyun.com/debian/ bullseye-updates main contrib non-free\\n \\</span></span>
<span class="line"><span>deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main contrib non-free\\n \\</span></span>
<span class="line"><span>\\n \\</span></span>
<span class="line"><span>deb http://mirrors.aliyun.com/debian/ bullseye-backports main contrib non-free\\n \\</span></span>
<span class="line"><span>deb-src http://mirrors.aliyun.com/debian/ bullseye-backports main contrib non-free\\n \\</span></span>
<span class="line"><span>&quot; | tee /etc/apt/sources.list</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 安装 curl&amp;&amp;vim</span></span>
<span class="line"><span>RUN apt-get update -y &amp;&amp; apt-get install -y curl &amp;&amp; apt-get install -y vim</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>执行构建：<code>docker build -t dotnet-runtime-7.0 -f ./Dockerfile .</code></li><li><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li><li><p>推送镜像到 Nexus 仓库</p><ol><li>镜像登录认证：<code>docker login push.nexus.devops.test.com -u pusher -p devops666</code></li><li>打标签：<code>docker tag dotnet-runtime -7.0 push.nexus.devops.test.com/projectbuild/dotnet-runtime-7.0</code></li><li>推送镜像：<code> docker push push.nexus.devops.test.com/projectbuild/dotnet-runtime-7.0</code></li><li>记得清理本地缓存镜像：<code> docker rmi dotnet-runtime-7.0 &amp;&amp; docker rmi push.nexus.devops.test.com/projectbuild/dotnet-runtime-7.0</code></li><li><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li><img src="'+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li><li><p>使用镜像</p><ol><li>后续使用 dotnet runtime 7.0 就可以直接使用 <code>nexus.devops.test.com/projectbuild/dotnet-runtime-7.0</code> 即可</li><li>直接拉取：<code> docker pull nexus.devops.test.com/projectbuild/dotnet-runtime-7.0</code></li></ol></li></ol><h4 id="构建-zhontai-后端项目的应用镜像" tabindex="-1"><a class="header-anchor" href="#构建-zhontai-后端项目的应用镜像"><span>构建 zhontai 后端项目的应用镜像</span></a></h4><p>制作完镜像，下面将使用 sdk 镜像打包项目生成部署文件，再使用 runtime 镜像部署运行。</p><ol><li><p>下载/克隆项目 admin.core 到服务器，进入项目目录开始执行</p><ol><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 克隆项目</span></span>
<span class="line"><span>git clone https://github.com/zhontai/Admin.Core.git -b v3.7.0</span></span>
<span class="line"><span># 进入项目 cd Admin.Core</span></span>
<span class="line"><span>cd Admin.Core</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>src 为.net core 项目代码</li></ol></li><li><p>使用 sdk 镜像进行打包，生成部署文件到 publish_output</p><ol><li><code>docker run -i --rm</code> 创建一个临时容器，容器退出后自动删除容器</li><li><code>-v ./build:/build</code> 挂载 MSBuild 属性文件目录（./src/Directory.Build.props 中使用）</li><li><code>-v ./src:/src</code> 挂载源码到容器中</li><li><code>-v ./publish_output:/publish_output</code>挂载构建物输出目录</li><li><code>--name build_zhontai_api</code> 指定运行的容器名称</li><li><code>nexus.devops.test.com/projectbuild/dotnet-sdk-7.0</code> sdk 镜像</li><li><code>/bin/bash -c &quot;xxx&quot;</code>以交互模式运行容器，运行时执行命令</li><li>若有自定义 nuget 仓库的包还需挂载 <code>/root/.nuget</code> 目录，或直接制作在镜像中</li><li>记得挂载 build 目录，否则会提示：Invalid framework identifier</li><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -i --rm \\</span></span>
<span class="line"><span>-v ./build:/build \\</span></span>
<span class="line"><span>-v ./src:/src \\</span></span>
<span class="line"><span>-v ./publish_output:/publish_output \\</span></span>
<span class="line"><span>--name build_zhontai_api \\</span></span>
<span class="line"><span>nexus.devops.test.com/projectbuild/dotnet-sdk-7.0 \\</span></span>
<span class="line"><span>/bin/bash -c &#39;dotnet publish /src/hosts/ZhonTai.Host -c Release -o /publish_output --runtime linux-x64 --framework net7.0&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>执行成功后程序包就生成到 publish_output 中了</li><li><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li><li><p>使用 runtime 镜像制作应用镜像</p><ol><li>将上一步的构建物 Admin.Core/publish_output 添加到运行时镜像中</li><li>使用 echo 创建一个 Dockerfile</li><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#创建Dockerfile</span></span>
<span class="line"><span>echo &#39;FROM nexus.devops.test.com/projectbuild/dotnet-runtime-7.0 AS runtime </span></span>
<span class="line"><span>WORKDIR /app </span></span>
<span class="line"><span>COPY ./publish_output /app </span></span>
<span class="line"><span>ENV ASPNETCORE_URLS=http://+:8000 </span></span>
<span class="line"><span>ENTRYPOINT [&quot;dotnet&quot;, &quot;ZhonTai.Host.dll&quot;]&#39; &gt; Dockerfile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>执行构建：<code>docker build -t zhontai_api .</code></li><li><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li>运行测试，成功</li><li><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li><li><p>推送镜像到仓库</p><ol><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#打标签</span></span>
<span class="line"><span>docker tag zhontai_api push.nexus.devops.test.com/projectapp/zhontai_api</span></span>
<span class="line"><span>#推送</span></span>
<span class="line"><span>docker push push.nexus.devops.test.com/projectapp/zhontai_api</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>推送成功，这里手动只构建的 latest 版本，若使用自动化构建，还需构建对应版本的镜像，以支持快速回滚</li><li><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li></ol><h3 id="vue-3-项目打包" tabindex="-1"><a class="header-anchor" href="#vue-3-项目打包"><span>Vue 3 项目打包</span></a></h3><p>构建所需一个 node 镜像用于 vue 项目打包，nginx 用于部署前台项目</p><ol><li>node 镜像地址：https://hub.docker.com/r/library/node ，选择版本：node:18.17.1</li><li>nginx 镜像地址：https://hub.docker.com/_/nginx ，选择版本：nginx:1.24.0</li></ol><h4 id="构建-nodejs-18-17-1-打包镜像" tabindex="-1"><a class="header-anchor" href="#构建-nodejs-18-17-1-打包镜像"><span>构建 nodejs 18.17.1 打包镜像</span></a></h4><ol><li><p>拉取 nodejs 镜像：<code>docker pull node:18.17.1</code></p></li><li><p>将 node 镜像 vue-node-18 打上标签推送到仓库</p><ol><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#拉取仓库</span></span>
<span class="line"><span>docker pull node:18.17.1</span></span>
<span class="line"><span># 打标签</span></span>
<span class="line"><span>docker tag node:18.17.1 push.nexus.devops.test.com/projectbuild/vue-node-18.17</span></span>
<span class="line"><span>#推送</span></span>
<span class="line"><span>docker push push.nexus.devops.test.com/projectbuild/vue-node-18.17</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>测试使用：<code> docker run -it --rm nexus.devops.test.com/projectbuild/vue-node-18.17 /bin/bash -c &quot;node -v&quot;</code></li><li><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li><img src="'+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li></ol><h4 id="构建-nginx-1-24-运行时镜像" tabindex="-1"><a class="header-anchor" href="#构建-nginx-1-24-运行时镜像"><span>构建 nginx 1.24 运行时镜像</span></a></h4><ol><li><p>拉取 nginx 镜像：<code>docker pull nginx:1.24</code></p></li><li><p>将 nginx 镜像 vue-nginx-1.24 打上标签推送到仓库</p><ol><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#拉取仓库</span></span>
<span class="line"><span>docker pull nginx:1.24</span></span>
<span class="line"><span># 打标签</span></span>
<span class="line"><span>docker tag nginx:1.24 push.nexus.devops.test.com/projectbuild/vue-nginx-1.24</span></span>
<span class="line"><span>#推送</span></span>
<span class="line"><span>docker push push.nexus.devops.test.com/projectbuild/vue-nginx-1.24</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>测试使用：<code> docker run -it --rm nexus.devops.test.com/projectbuild/vue-nginx-1.24 /bin/bash</code>进入容器后启用 nginx，并使用 curl http://localhost 测试 nginx 可用</li><li><img src="`+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li><img src="'+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li></ol><h4 id="构建-zhontai-前端项目的应用镜像" tabindex="-1"><a class="header-anchor" href="#构建-zhontai-前端项目的应用镜像"><span>构建 zhontai 前端项目的应用镜像</span></a></h4><ol><li><p>下载/克隆项目 admin.ui.plus 到文件夹</p><ol><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 克隆项目</span></span>
<span class="line"><span>git clone https://github.com/zhontai/admin.ui.plus.git -b v2.2.0</span></span>
<span class="line"><span># 进入项目cd admin.ui.plus</span></span>
<span class="line"><span>cd admin.ui.plus</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 修改接口地址 </span></span>
<span class="line"><span># 编辑.env.production 中的 VITE_API_URL 配置为接口地址</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>使用 node 镜像进行打包，生成文件到 dist</p><ol><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -i --rm \\</span></span>
<span class="line"><span>-v ./:/app \\</span></span>
<span class="line"><span>--name build_zhontai_webui \\</span></span>
<span class="line"><span>nexus.devops.test.com/projectbuild/vue-node-18.17 \\</span></span>
<span class="line"><span>/bin/bash -c &#39;cd /app </span></span>
<span class="line"><span>npm config set registry https://registry.npmmirror.com</span></span>
<span class="line"><span>npm install</span></span>
<span class="line"><span>npm run build&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>执行成功，构建输出到 dist 中</li><li><img src="`+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li><li><p>使用 nginx 镜像制作应用镜像</p><ol><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 创建nginx.conf</span></span>
<span class="line"><span></span></span>
<span class="line"><span>echo &#39;</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>    listen       80;</span></span>
<span class="line"><span>    server_name  localhost;</span></span>
<span class="line"><span>    charset utf-8;</span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>        root   /usr/share/nginx/html;</span></span>
<span class="line"><span>        try_files $uri $uri/ /index.html;</span></span>
<span class="line"><span>        index  index.html index.htm;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    #error_page  404              /404.html;</span></span>
<span class="line"><span>    error_page   500 502 503 504  /50x.html;</span></span>
<span class="line"><span>    location = /50x.html {</span></span>
<span class="line"><span>        root   html;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&#39;&gt; vue-nginx.conf</span></span>
<span class="line"><span>#创建Dockerfile</span></span>
<span class="line"><span>echo &#39;</span></span>
<span class="line"><span>FROM nexus.devops.test.com/projectbuild/vue-nginx-1.24</span></span>
<span class="line"><span>EXPOSE 80</span></span>
<span class="line"><span>COPY ./dist /usr/share/nginx/html</span></span>
<span class="line"><span>COPY ./vue-nginx.conf /etc/nginx/conf.d/default.conf&#39; &gt; Dockerfile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>执行构建：<code>docker build -t zhontai_webui .</code></li><li>测试访问成功</li><li><img src="`+z+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li><li><p>推送镜像到仓库</p></li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#打标签</span></span>
<span class="line"><span>docker tag zhontai_webui push.nexus.devops.test.com/projectapp/zhontai_webui</span></span>
<span class="line"><span>#推送</span></span>
<span class="line"><span>docker push push.nexus.devops.test.com/projectapp/zhontai_webui</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="将-docker-应用镜像部署到-k8s" tabindex="-1"><a class="header-anchor" href="#将-docker-应用镜像部署到-k8s"><span>将 Docker 应用镜像部署到 K8S</span></a></h2><p>应用镜像打包成功，现在需要将两个应用精选镜像部署到 k8s 中</p><h4 id="应用镜像的拉取凭证设置" tabindex="-1"><a class="header-anchor" href="#应用镜像的拉取凭证设置"><span>应用镜像的拉取凭证设置</span></a></h4><p>因为 nexus 部署在局域网，并且配置的域名是局域网域名，所以面临着如何在 k8s 中访问 https://nexus.devops.test.com 获取镜像的问题，目前我的解决方法时每个节点机器都配置好对应 dns</p><p>要想访问到 nexus 仓库，需要满足两个条件，一个是访问到仓库，一个是仓库的认证</p><ol><li><p>给 k8s 所有节点添加 dns 设置<code>nameserver 192.168.123.214</code></p><ol><li><img src="`+A+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li>使用 <code>docker login nexus.devops.test.com -u puller -p devops666</code> 在宿主机中登录仓库确保可以在节点拉取镜像</li></ol></li><li><p>创建 nexus 登录凭证</p><ol><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kubectl create secret \\</span></span>
<span class="line"><span>docker-registry \\</span></span>
<span class="line"><span>nexus-login-registry \\</span></span>
<span class="line"><span>--docker-server=nexus.devops.test.com \\</span></span>
<span class="line"><span>--docker-username=puller \\</span></span>
<span class="line"><span>--docker-password=devops666 \\</span></span>
<span class="line"><span>-n default</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><img src="`+w+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ol></li></ol><h4 id="使用-deployment-部署应用" tabindex="-1"><a class="header-anchor" href="#使用-deployment-部署应用"><span>使用 Deployment 部署应用</span></a></h4><p>配置仅供参考，关于数据库，配置文件，日志，上传文件等未处理</p><ul><li><p>创建后端部署配置：zhontai_api.yaml</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>---</span></span>
<span class="line"><span>## 配置服务</span></span>
<span class="line"><span>kind: Service</span></span>
<span class="line"><span>apiVersion: v1</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: app-zhontai-api</span></span>
<span class="line"><span>  namespace: default</span></span>
<span class="line"><span>  labels:</span></span>
<span class="line"><span>    app: app-zhontai-api</span></span>
<span class="line"><span>spec:</span></span>
<span class="line"><span>  selector:</span></span>
<span class="line"><span>    app: app-zhontai-api</span></span>
<span class="line"><span>  type: ClusterIP</span></span>
<span class="line"><span>  ports:</span></span>
<span class="line"><span>    - name: p80</span></span>
<span class="line"><span>      port: 80</span></span>
<span class="line"><span>      targetPort: 8000</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span></span></span>
<span class="line"><span>kind: Deployment # 指定创建资源的角色/类型</span></span>
<span class="line"><span>apiVersion: apps/v1 # 指定api版本，此值必须在kubectl api-versions中</span></span>
<span class="line"><span>metadata: # 资源的元数据/属性</span></span>
<span class="line"><span>  name: app-zhontai-api # 资源的名字，在同一个namespace中必须唯一</span></span>
<span class="line"><span>  namespace: default # 部署在哪个namespace中</span></span>
<span class="line"><span>  labels: # 设定资源的标签</span></span>
<span class="line"><span>    app: app-zhontai-api</span></span>
<span class="line"><span>spec: # 资源规范字段  </span></span>
<span class="line"><span>  selector:</span></span>
<span class="line"><span>    matchLabels:</span></span>
<span class="line"><span>      app: app-zhontai-api</span></span>
<span class="line"><span>  replicas: 2 # 声明副本数目</span></span>
<span class="line"><span>  revisionHistoryLimit: 2 # 保留历史版本</span></span>
<span class="line"><span>  strategy: # 策略</span></span>
<span class="line"><span>    rollingUpdate: # 滚动更新</span></span>
<span class="line"><span>      maxSurge: 1 # 最大额外可以存在的副本数，可以为百分比，也可以为整数</span></span>
<span class="line"><span>      maxUnavailable: 1 # 示在更新过程中能够进入不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span></span>
<span class="line"><span>    type: RollingUpdate # 滚动更新策略</span></span>
<span class="line"><span>  template: # 模版</span></span>
<span class="line"><span>    metadata: # 资源的元数据/属性</span></span>
<span class="line"><span>      labels: # 设定资源的标签</span></span>
<span class="line"><span>        app: app-zhontai-api</span></span>
<span class="line"><span>    spec: # 资源规范字段</span></span>
<span class="line"><span>      containers:</span></span>
<span class="line"><span>        - image: nexus.devops.test.com/projectapp/zhontai_api:latest # 容器使用的镜像地址</span></span>
<span class="line"><span>          name: app-zhontai-api # 容器的名字</span></span>
<span class="line"><span>          # 每次Pod启动拉取镜像策略，三个选择 Always、Never、IfNotPresent</span></span>
<span class="line"><span>          # Always，每次都检查；Never，每次都不检查（不管本地是否有）；IfNotPresent，如果本地有就不检查，如果没有就拉取</span></span>
<span class="line"><span>          imagePullPolicy: Always </span></span>
<span class="line"><span>          resources: # 资源管理</span></span>
<span class="line"><span>            # limits: # 最大使用</span></span>
<span class="line"><span>            #   cpu: 300m # CPU，1核心 = 1000m</span></span>
<span class="line"><span>            #   memory: 500Mi # 内存，1G = 1024Mi</span></span>
<span class="line"><span>            # requests: # 容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span></span>
<span class="line"><span>            #   cpu: 100m</span></span>
<span class="line"><span>            #   memory: 100Mi</span></span>
<span class="line"><span>          livenessProbe: # pod 内部健康检查的设置</span></span>
<span class="line"><span>            httpGet: # 通过httpget检查健康，返回200-399之间，则认为容器正常</span></span>
<span class="line"><span>              path: /admin/health # URI地址</span></span>
<span class="line"><span>              port: 8000 # 端口</span></span>
<span class="line"><span>              scheme: HTTP # 协议</span></span>
<span class="line"><span>            initialDelaySeconds: 10 # 表明第一次检测在容器启动后多长时间后开始</span></span>
<span class="line"><span>            timeoutSeconds: 5 # 检测的超时时间</span></span>
<span class="line"><span>            periodSeconds: 30 # 检查间隔时间</span></span>
<span class="line"><span>            successThreshold: 1 # 成功门槛</span></span>
<span class="line"><span>            failureThreshold: 5 # 失败门槛，连接失败5次，pod杀掉，重启一个新的pod</span></span>
<span class="line"><span>          ports:</span></span>
<span class="line"><span>            - name: http # 名称</span></span>
<span class="line"><span>              containerPort: 80 # 容器开发对外的端口</span></span>
<span class="line"><span>              protocol: TCP # 协议</span></span>
<span class="line"><span>          env:</span></span>
<span class="line"><span>            # 时区</span></span>
<span class="line"><span>            - name: TZ</span></span>
<span class="line"><span>              value: Asia/Shanghai</span></span>
<span class="line"><span>            # app name</span></span>
<span class="line"><span>            - name: APP_NAME</span></span>
<span class="line"><span>              value: app.zhontai.api</span></span>
<span class="line"><span>          # 挂载</span></span>
<span class="line"><span>          volumeMounts:</span></span>
<span class="line"><span>            - name: app-logs</span></span>
<span class="line"><span>              mountPath: /logs #容器中的路径</span></span>
<span class="line"><span>      # 卷轴</span></span>
<span class="line"><span>      volumes:</span></span>
<span class="line"><span>        - name: app-logs</span></span>
<span class="line"><span>          hostPath: </span></span>
<span class="line"><span>            path: /app/logs #将日志存放在宿主机的路径，需要在宿主机创建目录</span></span>
<span class="line"><span>            type: Directory</span></span>
<span class="line"><span>      #重启策略</span></span>
<span class="line"><span>      restartPolicy: Always    </span></span>
<span class="line"><span>      imagePullSecrets: # 镜像仓库拉取密钥</span></span>
<span class="line"><span>        - name: nexus-login-registry</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>执行部署：<code>kubectl apply -f zhontai_api.yaml</code></p></li><li><p>创建前端部署配置：zhontai_webui.yaml</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>---</span></span>
<span class="line"><span>## 配置服务</span></span>
<span class="line"><span>kind: Service</span></span>
<span class="line"><span>apiVersion: v1</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: app-zhontai-webui</span></span>
<span class="line"><span>  namespace: default</span></span>
<span class="line"><span>  labels:</span></span>
<span class="line"><span>    app: app-zhontai-webui</span></span>
<span class="line"><span>spec:</span></span>
<span class="line"><span>  selector:</span></span>
<span class="line"><span>    app: app-zhontai-webui</span></span>
<span class="line"><span>  type: ClusterIP</span></span>
<span class="line"><span>  ports:</span></span>
<span class="line"><span>    - name: p80</span></span>
<span class="line"><span>      port: 80</span></span>
<span class="line"><span>      targetPort: 80</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span></span></span>
<span class="line"><span>kind: Deployment # 指定创建资源的角色/类型</span></span>
<span class="line"><span>apiVersion: apps/v1 # 指定api版本，此值必须在kubectl api-versions中</span></span>
<span class="line"><span>metadata: # 资源的元数据/属性</span></span>
<span class="line"><span>  name: app-zhontai-webui # 资源的名字，在同一个namespace中必须唯一</span></span>
<span class="line"><span>  namespace: default # 部署在哪个namespace中</span></span>
<span class="line"><span>  labels: # 设定资源的标签</span></span>
<span class="line"><span>    app: app-zhontai-webui</span></span>
<span class="line"><span>spec: # 资源规范字段  </span></span>
<span class="line"><span>  selector:</span></span>
<span class="line"><span>    matchLabels:</span></span>
<span class="line"><span>      app: app-zhontai-webui</span></span>
<span class="line"><span>  replicas: 2 # 声明副本数目</span></span>
<span class="line"><span>  revisionHistoryLimit: 2 # 保留历史版本</span></span>
<span class="line"><span>  strategy: # 策略</span></span>
<span class="line"><span>    rollingUpdate: # 滚动更新</span></span>
<span class="line"><span>      maxSurge: 1 # 最大额外可以存在的副本数，可以为百分比，也可以为整数</span></span>
<span class="line"><span>      maxUnavailable: 1 # 示在更新过程中能够进入不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span></span>
<span class="line"><span>    type: RollingUpdate # 滚动更新策略</span></span>
<span class="line"><span>  template: # 模版</span></span>
<span class="line"><span>    metadata: # 资源的元数据/属性</span></span>
<span class="line"><span>      labels: # 设定资源的标签</span></span>
<span class="line"><span>        app: app-zhontai-webui</span></span>
<span class="line"><span>    spec: # 资源规范字段</span></span>
<span class="line"><span>      containers:</span></span>
<span class="line"><span>        - image: nexus.devops.test.com/projectapp/zhontai_webui:latest # 容器使用的镜像地址</span></span>
<span class="line"><span>          name: app-zhontai-webui # 容器的名字</span></span>
<span class="line"><span>          # 每次Pod启动拉取镜像策略，三个选择 Always、Never、IfNotPresent</span></span>
<span class="line"><span>          # Always，每次都检查；Never，每次都不检查（不管本地是否有）；IfNotPresent，如果本地有就不检查，如果没有就拉取</span></span>
<span class="line"><span>          imagePullPolicy: Always </span></span>
<span class="line"><span>          resources: # 资源管理</span></span>
<span class="line"><span>            # limits: # 最大使用</span></span>
<span class="line"><span>            #   cpu: 300m # CPU，1核心 = 1000m</span></span>
<span class="line"><span>            #   memory: 500Mi # 内存，1G = 1024Mi</span></span>
<span class="line"><span>            # requests: # 容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span></span>
<span class="line"><span>            #   cpu: 100m</span></span>
<span class="line"><span>            #   memory: 100Mi</span></span>
<span class="line"><span>          livenessProbe: # pod 内部健康检查的设置</span></span>
<span class="line"><span>            httpGet: # 通过httpget检查健康，返回200-399之间，则认为容器正常</span></span>
<span class="line"><span>              path: / # URI地址</span></span>
<span class="line"><span>              port: 80 # 端口</span></span>
<span class="line"><span>              scheme: HTTP # 协议</span></span>
<span class="line"><span>            initialDelaySeconds: 10 # 表明第一次检测在容器启动后多长时间后开始</span></span>
<span class="line"><span>            timeoutSeconds: 5 # 检测的超时时间</span></span>
<span class="line"><span>            periodSeconds: 30 # 检查间隔时间</span></span>
<span class="line"><span>            successThreshold: 1 # 成功门槛</span></span>
<span class="line"><span>            failureThreshold: 5 # 失败门槛，连接失败5次，pod杀掉，重启一个新的pod</span></span>
<span class="line"><span>          ports:</span></span>
<span class="line"><span>            - name: http # 名称</span></span>
<span class="line"><span>              containerPort: 80 # 容器开发对外的端口</span></span>
<span class="line"><span>              protocol: TCP # 协议</span></span>
<span class="line"><span>          env:</span></span>
<span class="line"><span>            # 时区</span></span>
<span class="line"><span>            - name: TZ</span></span>
<span class="line"><span>              value: Asia/Shanghai</span></span>
<span class="line"><span>            # app name</span></span>
<span class="line"><span>            - name: APP_NAME</span></span>
<span class="line"><span>              value: app.zhontai.webui</span></span>
<span class="line"><span>      #重启策略</span></span>
<span class="line"><span>      restartPolicy: Always    </span></span>
<span class="line"><span>      imagePullSecrets: # 镜像仓库拉取密钥</span></span>
<span class="line"><span>        - name: nexus-login-registry</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>执行部署：<code>kubectl apply -f zhontai_webui.yaml</code></p></li></ul><figure><img src="`+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="配置-ingress-使用域名访问" tabindex="-1"><a class="header-anchor" href="#配置-ingress-使用域名访问"><span>配置 Ingress 使用域名访问</span></a></h4><ul><li>部署成功后添加对应 ingress 配置，即可使用域名访问</li></ul><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>前端项目需要修改为对应的接口地址</p><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>确保绑定的域名正常解析到 k8s 节点，即可使用域名访问了，我这里使用的 DnsServer 泛解析，故可以直接访问，</p><figure><img src="'+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>至此，一步步将一个单体项目部署到了 k8s 中，仅供参考，实际如果时微服务，还设计到一些通用和环境的配置，后面再慢慢分享。</p><p>根据上面的步骤，后面分享将其整理成脚本，以便后续可以直接使用。</p><h2 id="相关文档" tabindex="-1"><a class="header-anchor" href="#相关文档"><span>相关文档</span></a></h2><ul><li><p>相关文章</p><ul><li><a href="https://www.cnblogs.com/morang/p/devops-nexus3-nuget-docker-install-use.html" target="_blank" rel="noopener noreferrer">一篇适合躺收藏夹的 Nexus3 搭建 NuGet&amp;Docker 私有库的安装使用总结</a></li><li><a href="https://www.cnblogs.com/morang/p/devops-k8s-install-use.html" target="_blank" rel="noopener noreferrer">一篇可供参考的 K8S 落地实践经验</a></li><li><a href="https://www.cnblogs.com/morang/p/devops-nginx-install-use.html" target="_blank" rel="noopener noreferrer">前后端都用得上的 Nginx 日常使用经验</a></li></ul></li><li><p>参考文章</p><ul><li><a href="https://www.cnblogs.com/InCerry/p/how-to-build-dotnet-image-with-trace-tool.html" target="_blank" rel="noopener noreferrer">如何创建一个带诊断工具的.net 镜像</a></li></ul></li></ul><h2 id="后语" tabindex="-1"><a class="header-anchor" href="#后语"><span>后语</span></a></h2><blockquote><p>本文始于2023末，结束于2024始。</p><p>2023的最后两个月，是这几年以来，学习，产出最高的的两个月。</p><p>始于国庆，不止步于元旦。</p><p>新年快乐！</p></blockquote>',53)]))}const I=n(T,[["render",q],["__file","devops_docker_to_nexus_deploy_k8s_use.html.vue"]]),U=JSON.parse('{"path":"/posts/devops/devops_docker_to_nexus_deploy_k8s_use.html","title":"构建 dotnet&vue 应用镜像->推送到 Nexus 仓库->部署为 k8s 服务实践","lang":"zh-CN","frontmatter":{"title":"构建 dotnet&vue 应用镜像->推送到 Nexus 仓库->部署为 k8s 服务实践","date":"2024-01-02T08:36:00.000Z","category":["DevOps"],"tag":[".net core","devops","docker","k8s","vue"],"description":"前言 前面分享了 k8s 的部署安装，本篇来点实操，将会把一个 .net core + vue 的项目（zhontai），打包构建成 docker 镜像，推送到 nexus 镜像仓库，并部署到 k8s 中 准备 要实现项目的部署，除了准备要部署的环境（k8s），还需要准备项目所用到的各中间件，本文旨在分享部署的一个整体流程，对项目中所使用到的各中间件（...","head":[["meta",{"property":"og:url","content":"https://www.yimo.link/posts/devops/devops_docker_to_nexus_deploy_k8s_use.html"}],["meta",{"property":"og:site_name","content":"易墨网"}],["meta",{"property":"og:title","content":"构建 dotnet&vue 应用镜像->推送到 Nexus 仓库->部署为 k8s 服务实践"}],["meta",{"property":"og:description","content":"前言 前面分享了 k8s 的部署安装，本篇来点实操，将会把一个 .net core + vue 的项目（zhontai），打包构建成 docker 镜像，推送到 nexus 镜像仓库，并部署到 k8s 中 准备 要实现项目的部署，除了准备要部署的环境（k8s），还需要准备项目所用到的各中间件，本文旨在分享部署的一个整体流程，对项目中所使用到的各中间件（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T11:15:42.000Z"}],["meta",{"property":"article:tag","content":".net core"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"k8s"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:published_time","content":"2024-01-02T08:36:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-28T11:15:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"构建 dotnet&vue 应用镜像->推送到 Nexus 仓库->部署为 k8s 服务实践\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-02T08:36:00.000Z\\",\\"dateModified\\":\\"2024-10-28T11:15:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"易墨\\",\\"url\\":\\"https://www.yimo.link\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":2,"title":"使用 Docker 打包应用镜像","slug":"使用-docker-打包应用镜像","link":"#使用-docker-打包应用镜像","children":[{"level":3,"title":".Net Core 7.0 项目镜像","slug":"net-core-7-0-项目镜像","link":"#net-core-7-0-项目镜像","children":[{"level":4,"title":"构建 dotnet sdk 7.0 打包镜像","slug":"构建-dotnet-sdk-7-0-打包镜像","link":"#构建-dotnet-sdk-7-0-打包镜像","children":[]},{"level":4,"title":"构建 dotnet runtime 7.0 运行时镜像","slug":"构建-dotnet-runtime-7-0-运行时镜像","link":"#构建-dotnet-runtime-7-0-运行时镜像","children":[]},{"level":4,"title":"构建 zhontai 后端项目的应用镜像","slug":"构建-zhontai-后端项目的应用镜像","link":"#构建-zhontai-后端项目的应用镜像","children":[]}]},{"level":3,"title":"Vue 3 项目打包","slug":"vue-3-项目打包","link":"#vue-3-项目打包","children":[{"level":4,"title":"构建 nodejs 18.17.1 打包镜像","slug":"构建-nodejs-18-17-1-打包镜像","link":"#构建-nodejs-18-17-1-打包镜像","children":[]},{"level":4,"title":"构建 nginx 1.24 运行时镜像","slug":"构建-nginx-1-24-运行时镜像","link":"#构建-nginx-1-24-运行时镜像","children":[]},{"level":4,"title":"构建 zhontai 前端项目的应用镜像","slug":"构建-zhontai-前端项目的应用镜像","link":"#构建-zhontai-前端项目的应用镜像","children":[]}]}]},{"level":2,"title":"将 Docker 应用镜像部署到 K8S","slug":"将-docker-应用镜像部署到-k8s","link":"#将-docker-应用镜像部署到-k8s","children":[{"level":4,"title":"应用镜像的拉取凭证设置","slug":"应用镜像的拉取凭证设置","link":"#应用镜像的拉取凭证设置","children":[]},{"level":4,"title":"使用 Deployment 部署应用","slug":"使用-deployment-部署应用","link":"#使用-deployment-部署应用","children":[]},{"level":4,"title":"配置 Ingress 使用域名访问","slug":"配置-ingress-使用域名访问","link":"#配置-ingress-使用域名访问","children":[]}]},{"level":2,"title":"相关文档","slug":"相关文档","link":"#相关文档","children":[]},{"level":2,"title":"后语","slug":"后语","link":"#后语","children":[]}],"git":{"createdTime":1730114142000,"updatedTime":1730114142000,"contributors":[{"name":"yimo","email":"yimo@wikiglobal.com","commits":1}]},"readingTime":{"minutes":13.83,"words":4148},"filePathRelative":"posts/devops/devops_docker_to_nexus_deploy_k8s_use.md","localizedDate":"2024年1月2日","excerpt":"<h2>前言</h2>\\n<blockquote>\\n<p>前面分享了 k8s 的部署安装，本篇来点实操，将会把一个 .net core + vue 的项目（zhontai），打包构建成 docker 镜像，推送到 nexus 镜像仓库，并部署到 k8s 中</p>\\n</blockquote>\\n<h2>准备</h2>\\n<blockquote>\\n<p>要实现项目的部署，除了准备要部署的环境（k8s），还需要准备项目所用到的各中间件，本文旨在分享部署的一个整体流程，对项目中所使用到的各中间件（mysql，redis 等）的安装使用可自行在本<a href=\\"https://www.cnblogs.com/morang/category/2348249.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"> DevOps 系列文章</a>中找到</p>\\n</blockquote>","autoDesc":true}');export{I as comp,U as data};
