import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as i,o as s}from"./app-CzakNbIb.js";const l="/assets/662652-20231101185424248-135378606-Q74Frd1g.png",t="/assets/662652-20231101185424309-1264965100-BTSAfy7I.png",r="/assets/662652-20231101185424234-50329605-nrFemz3Q.png",o="/assets/662652-20231101185424352-1355032663-tqGVvRoW.png",p="/assets/662652-20231101185424326-996976653-DoPZ3I9I.png",c="/assets/662652-20231101185424228-1410910054-UvtcrlZh.png",d="/assets/662652-20231101185425021-289919222-DFm5WG_z.png",m="/assets/662652-20231101185424272-112382850-Bh6xKgvC.png",b="/assets/662652-20231101185424351-685188641-CkyYwFw6.png",h={};function g(u,e){return s(),n("div",null,e[0]||(e[0]=[i(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><blockquote><p>RabbitMQ 是一个功能强大的开源消息队列系统，它实现了高效的消息通信和异步处理。</p><p>本文主要介绍其基于 Docker-Compose 的部署安装和一些使用的经验。</p></blockquote><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ul><li>成熟，稳定</li><li>消息持久化</li><li>灵活的消息路由</li><li>高性能，高可用性，可扩展性高</li><li>支持插件系统：RabbitMQ 具有丰富的插件系统，可以通过安装插件来扩展其功能，例如管理界面、消息追踪、消息转换等。</li><li>官方提供了 .NET/Java 的 SDK</li></ul><h3 id="使用情况" tabindex="-1"><a class="header-anchor" href="#使用情况"><span>使用情况</span></a></h3><ul><li>项目中用于日志记录，消息发送，数据同步等，稳定可靠</li><li>业务模块的初始化，数据导入异步处理</li><li>做好幂等处理，不同场景使用不同的确认方式，防止消息的重复消费</li><li>RabbitMQ 默认不支持延迟消息，使用<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange" target="_blank" rel="noopener noreferrer">延迟消息插件</a>实现即可（<strong>有局限，仅支持最多一两天的延迟消息</strong>）</li><li>使用 .NET SDK：RabbitMQ.Client，后面再分享二次封装使用</li></ul><h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践"><span>实践</span></a></h2><p>使用 Docker Compose V2 安装 rabbitmq v3.12.6</p><h3 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h3><ul><li>当前版本：v3.12.6</li><li>使用镜像：rabbitmq:3.12.6-management （带 web 管理界面）</li><li>默认端口：5672:应用连接端口 15672:web 控制台</li></ul><h3 id="使用-docker-compose-安装" tabindex="-1"><a class="header-anchor" href="#使用-docker-compose-安装"><span>使用 Docker Compose 安装</span></a></h3><blockquote><p>本篇文章基于 Docker V24 及 Docker Compose V2，安装可以参考之前的<a href="https://juejin.cn/post/7283873796977197108" target="_blank" rel="noopener noreferrer">文章</a></p></blockquote><h4 id="配置说明" tabindex="-1"><a class="header-anchor" href="#配置说明"><span>配置说明</span></a></h4><ul><li>固定了镜像版本：<code>rabbitmq:3.12.6-management</code></li><li>指定的主机名：<code>rabbitserver</code></li><li>指定虚拟机名称：<code>admin_vhost</code></li><li>指定账号密码： <code>root</code> <code>devops666</code></li><li>指定端口：<code>5672</code>：应用连接端口 <code>15672</code>：web 管理界面</li><li>挂载数据目录：<code>./data:/var/lib/rabbitmq</code></li><li>挂载额外的插件目录：<code>./myplugins:/myplugins</code> RabbitMQ 容器中默认插件目录是 /plugins 不推荐挂载</li><li>将 ./myplugins 挂载到容器的，并将其加入插件查找的目录中：<code>RABBITMQ_PLUGINS_DIR: &#39;/plugins:/myplugins&#39;</code></li><li>指定网络：devopsnetwork (<code>docker network create devopsnetwork</code>)</li></ul><h4 id="配置文件-compose-yml" tabindex="-1"><a class="header-anchor" href="#配置文件-compose-yml"><span>配置文件 compose.yml</span></a></h4><ul><li><p>准备好 compose.yml 拷贝到服务器</p></li><li><p>然后运行<code>docker compose up -d</code>即可</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> version: &#39;3.1&#39;</span></span>
<span class="line"><span> services:</span></span>
<span class="line"><span>   rabbitmq:</span></span>
<span class="line"><span>     image: rabbitmq:3.12.6-management</span></span>
<span class="line"><span>     container_name: rabbitmq_3_12</span></span>
<span class="line"><span>     restart: always</span></span>
<span class="line"><span>     # 节点名 rabbit@rabbitserver，不然会去容器ID</span></span>
<span class="line"><span>     hostname: rabbitserver</span></span>
<span class="line"><span>     environment:</span></span>
<span class="line"><span>       # 默认虚拟机名</span></span>
<span class="line"><span>       RABBITMQ_DEFAULT_VHOST: admin_vhost</span></span>
<span class="line"><span>       # 用户名</span></span>
<span class="line"><span>       RABBITMQ_DEFAULT_USER: root</span></span>
<span class="line"><span>       # 密码</span></span>
<span class="line"><span>       RABBITMQ_DEFAULT_PASS: devops666</span></span>
<span class="line"><span>       # 指定自定义插件目录</span></span>
<span class="line"><span>       RABBITMQ_PLUGINS_DIR: &#39;/plugins:/myplugins&#39;</span></span>
<span class="line"><span>     ports:</span></span>
<span class="line"><span>       - &quot;5672:5672&quot;</span></span>
<span class="line"><span>       - &quot;15672:15672&quot;</span></span>
<span class="line"><span>     volumes:</span></span>
<span class="line"><span>       - ./data:/var/lib/rabbitmq</span></span>
<span class="line"><span>       - ./myplugins:/myplugins</span></span>
<span class="line"><span>     networks:</span></span>
<span class="line"><span>       - devopsnetwork</span></span>
<span class="line"><span></span></span>
<span class="line"><span> networks:</span></span>
<span class="line"><span>   devopsnetwork:</span></span>
<span class="line"><span>     external: true</span></span>
<span class="line"><span> \`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="部署成功" tabindex="-1"><a class="header-anchor" href="#部署成功"><span>部署成功</span></a></h4><p>部署机器IP：192.168.123.214</p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="安装插件-延迟消息插件" tabindex="-1"><a class="header-anchor" href="#安装插件-延迟消息插件"><span>安装插件：延迟消息插件</span></a></h3><blockquote><p>注意：插件消息发布延迟只支持到 数秒、分钟或数小时，最多一两天，注意！！！</p><p>原文： This plugin was designed for delaying message publishing for a number of seconds， minutes， or hours。 A day or two at most.</p></blockquote><blockquote><p>! ! ! 前面的 compose.yml 默认是将。/myplugins 挂载到容器的，并指定了多个插件目录 系统：/plugins 自己添加：/myplugins ,优化了流程，安装插件不需要复制文件和重启容器</p></blockquote><ol><li><p>需要先下载插件：rabbitmq_delayed_message_exchange-3.12.0.ez，下载对应版本的 。ez 文件：<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases" target="_blank" rel="noopener noreferrer">Github Releases</a></p></li><li><p>将下载的插件文件放到 。/myplugins 文件夹 前面将 myplugins 挂载到了容器</p></li><li><p>连接容器执行启用插件：<code>docker exec -it rabbitmq_3_12 /bin/bash -c &quot;rabbitmq-plugins enable rabbitmq_delayed_message_exchange&quot;</code></p></li><li><p>因为已经挂载 myplugins 和设置为插件目录了 会自己去找 /plugins 和/myplugins 对应的 ez 文件以安装</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>启用成功，可在 Exchanges 页查看</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><h3 id="踩过的坑" tabindex="-1"><a class="header-anchor" href="#踩过的坑"><span>踩过的坑</span></a></h3><ul><li><p>根据上文配置来不会再出现下面的问题，遇到一样的问题可参考</p></li><li><p>延迟消息仅支持最多一两天的延迟消息，项目中有个定时发消息的功能，设置的适合时间设置超过阈值无法被消费 <a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange#intended-use-cases" target="_blank" rel="noopener noreferrer">说明</a></p></li><li><p>不要挂载/plugins 插件目录，可以用<code>RABBITMQ_PLUGINS_DIR: &#39;/plugins:/myplugins&#39;</code>来指定多个目录，这样只需要执行 <a href="https://www.rabbitmq.com/relocate.html#unix" target="_blank" rel="noopener noreferrer">文档</a></p></li><li><p>不指定 hostname 节点名称会是容器 Id</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>使用了 rabbitmq:3.x-management 镜像（具有 web 管理页面的功能）但是挂载了空的插件目录会报错：<code>{&quot;init terminating in do_boot&quot;,{undef,[{rabbit,boot,[],[]},{init,start_em,1,[]},{init,do_boot,3,[]}]}}</code></p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>Admin 页面提示报错：升级版本吧 <a href="https://github.com/rabbitmq/rabbitmq-server/issues/7425" target="_blank" rel="noopener noreferrer">issues</a> 我开始用的 3.9.29-management（tags 列表排序 3.9 排在前面，（ ╯□╰ ）），报这个错</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>切换版本前需要经。/data 数据清空，不然启动不起来</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>Exchanges 页面报错： 我把版本换成 3.12.6-management 后报了这个错，没有退出登录，只需 Ctrl+F5，重新登录下就好</p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><h4 id="net-sdk" tabindex="-1"><a class="header-anchor" href="#net-sdk"><span>.NET SDK</span></a></h4><p>官方：<a href="https://github.com/rabbitmq/rabbitmq-dotnet-client" target="_blank" rel="noopener noreferrer">RabbitMQ.Client</a></p><h4 id="连接配置" tabindex="-1"><a class="header-anchor" href="#连接配置"><span>连接配置</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var factory = new ConnectionFactory</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    HostName = &quot;192.168.123.214&quot;,</span></span>
<span class="line"><span>    Port = 5672,</span></span>
<span class="line"><span>    VirtualHost = &quot;admin_vhost&quot;,</span></span>
<span class="line"><span>    UserName = &quot;root&quot;,</span></span>
<span class="line"><span>    Password = &quot;devops666&quot;,</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="demo-示例" tabindex="-1"><a class="header-anchor" href="#demo-示例"><span>Demo 示例</span></a></h4><p>建了一个 demo 测试使用 <a href="https://github.com/yimogit/MeDevOps/tree/main/demos/DevopsDemo/MqDemo" target="_blank" rel="noopener noreferrer">Demo地址</a> ，后续二次封装的时候再展开说怎么封装使用</p><h3 id="相关文档" tabindex="-1"><a class="header-anchor" href="#相关文档"><span>相关文档</span></a></h3><ul><li><a href="https://github.com/rabbitmq/rabbitmq-server" target="_blank" rel="noopener noreferrer">RabbitMQ 项目仓库</a></li><li><a href="https://hub.docker.com/_/rabbitmq/" target="_blank" rel="noopener noreferrer">DockerHub 镜像</a></li><li><a href="https://rabbitmq.com/documentation.html" target="_blank" rel="noopener noreferrer">官方文档</a></li><li><a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases" target="_blank" rel="noopener noreferrer">延迟消息插件下载</a></li><li><a href="https://github.com/rabbitmq/rabbitmq-dotnet-client" target="_blank" rel="noopener noreferrer">.NET SDK 仓库</a></li></ul><h2 id="后语" tabindex="-1"><a class="header-anchor" href="#后语"><span>后语</span></a></h2><blockquote><p>安装还是比较简单的，版本选对，更多的是使用时需要根据业务选择适合的方案</p><p>插件的安装倒腾了一阵子，研究优化了流程</p></blockquote>`,37)]))}const f=a(h,[["render",g],["__file","devops_rabbitmq_install.html.vue"]]),_=JSON.parse('{"path":"/posts/docker/devops_rabbitmq_install.html","title":"使用 Docker Compose 部署 RabbitMQ 的一些经验与踩坑记录","lang":"zh-CN","frontmatter":{"title":"使用 Docker Compose 部署 RabbitMQ 的一些经验与踩坑记录","date":"2023-11-02T08:30:00.000Z","category":["Docker"],"tag":["devops","docker","docker-compose","队列"],"description":"前言 RabbitMQ 是一个功能强大的开源消息队列系统，它实现了高效的消息通信和异步处理。 本文主要介绍其基于 Docker-Compose 的部署安装和一些使用的经验。 特点 成熟，稳定 消息持久化 灵活的消息路由 高性能，高可用性，可扩展性高 支持插件系统：RabbitMQ 具有丰富的插件系统，可以通过安装插件来扩展其功能，例如管理界面、消息追踪...","head":[["meta",{"property":"og:url","content":"https://www.yimo.link/posts/docker/devops_rabbitmq_install.html"}],["meta",{"property":"og:site_name","content":"易墨网"}],["meta",{"property":"og:title","content":"使用 Docker Compose 部署 RabbitMQ 的一些经验与踩坑记录"}],["meta",{"property":"og:description","content":"前言 RabbitMQ 是一个功能强大的开源消息队列系统，它实现了高效的消息通信和异步处理。 本文主要介绍其基于 Docker-Compose 的部署安装和一些使用的经验。 特点 成熟，稳定 消息持久化 灵活的消息路由 高性能，高可用性，可扩展性高 支持插件系统：RabbitMQ 具有丰富的插件系统，可以通过安装插件来扩展其功能，例如管理界面、消息追踪..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T11:15:42.000Z"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"docker-compose"}],["meta",{"property":"article:tag","content":"队列"}],["meta",{"property":"article:published_time","content":"2023-11-02T08:30:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-28T11:15:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 Docker Compose 部署 RabbitMQ 的一些经验与踩坑记录\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-02T08:30:00.000Z\\",\\"dateModified\\":\\"2024-10-28T11:15:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"易墨\\",\\"url\\":\\"https://www.yimo.link\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"使用情况","slug":"使用情况","link":"#使用情况","children":[]}]},{"level":2,"title":"实践","slug":"实践","link":"#实践","children":[{"level":3,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":3,"title":"使用 Docker Compose 安装","slug":"使用-docker-compose-安装","link":"#使用-docker-compose-安装","children":[{"level":4,"title":"配置说明","slug":"配置说明","link":"#配置说明","children":[]},{"level":4,"title":"配置文件 compose.yml","slug":"配置文件-compose-yml","link":"#配置文件-compose-yml","children":[]},{"level":4,"title":"部署成功","slug":"部署成功","link":"#部署成功","children":[]}]},{"level":3,"title":"安装插件：延迟消息插件","slug":"安装插件-延迟消息插件","link":"#安装插件-延迟消息插件","children":[]},{"level":3,"title":"踩过的坑","slug":"踩过的坑","link":"#踩过的坑","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[{"level":4,"title":".NET SDK","slug":"net-sdk","link":"#net-sdk","children":[]},{"level":4,"title":"连接配置","slug":"连接配置","link":"#连接配置","children":[]},{"level":4,"title":"Demo 示例","slug":"demo-示例","link":"#demo-示例","children":[]}]},{"level":3,"title":"相关文档","slug":"相关文档","link":"#相关文档","children":[]}]},{"level":2,"title":"后语","slug":"后语","link":"#后语","children":[]}],"git":{"createdTime":1730114142000,"updatedTime":1730114142000,"contributors":[{"name":"yimo","email":"yimo@wikiglobal.com","commits":1}]},"readingTime":{"minutes":4.37,"words":1310},"filePathRelative":"posts/docker/devops_rabbitmq_install.md","localizedDate":"2023年11月2日","excerpt":"<h2>前言</h2>\\n<blockquote>\\n<p>RabbitMQ 是一个功能强大的开源消息队列系统，它实现了高效的消息通信和异步处理。</p>\\n<p>本文主要介绍其基于 Docker-Compose 的部署安装和一些使用的经验。</p>\\n</blockquote>\\n<h3>特点</h3>\\n<ul>\\n<li>成熟，稳定</li>\\n<li>消息持久化</li>\\n<li>灵活的消息路由</li>\\n<li>高性能，高可用性，可扩展性高</li>\\n<li>支持插件系统：RabbitMQ 具有丰富的插件系统，可以通过安装插件来扩展其功能，例如管理界面、消息追踪、消息转换等。</li>\\n<li>官方提供了 .NET/Java 的 SDK</li>\\n</ul>","autoDesc":true}');export{f as comp,_ as data};
