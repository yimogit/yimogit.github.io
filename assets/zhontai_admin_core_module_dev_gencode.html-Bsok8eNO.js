import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as a,o as s}from"./app-BfNe1MN3.js";const l="/assets/662652-20240622004500980-707057869-CBQbNP0B.png",t="/assets/662652-20240622004501061-1299490512-CnPGyW3K.png",p="/assets/662652-20240622004501135-1234286908-CWvFcEV4.png",o="/assets/662652-20240622004500856-1477631956-D3EcEncA.png",d="/assets/662652-20240622004500921-66663155-BMx4A_vl.png",r="/assets/662652-20240622004501046-1136903022-DORNHVKR.png",c="/assets/662652-20240622004500990-580179204-DcznSv_j.png",u="/assets/662652-20240622004501134-832704711-kyA4qVeD.png",g="/assets/662652-20240622004501102-486872856-CIDn4VYi.png",m="/assets/662652-20240622004501132-1081676030-CDiMzjDC.png",h="/assets/662652-20240622004501092-1516792939-B11BtDjQ.png",v="/assets/662652-20240622004501133-328498649-ISx6FVwA.png",f="/assets/662652-20240622004501087-1288769207-Cr9gP_Dw.png",b="/assets/662652-20240622004500912-833140382-BWeEiN6m.png",_="/assets/662652-20240622004501048-143411727-CooX4mGl.png",y="/assets/662652-20240622004501890-588321040-CpnOuznG.png",k="/assets/662652-20240622004501080-86368081-Cyw-nDQZ.png",x="/assets/662652-20240622004501131-2102854-CG9UIGsu.png",q="/assets/662652-20240622004501059-1490917989-CaLD0ei2.png",z="/assets/662652-20240622004501228-1982707361-ZafS7exL.png",C="/assets/662652-20240622004501058-2013758925-DH8T35fO.png",A="/assets/662652-20240622004501248-1985589637-cG1SeIMT.png",N="/assets/662652-20240622004501073-2038435755-CGHI7ICr.png",L="/assets/662652-20240622004501132-642058349-DHpIJ2m7.png",T="/assets/662652-20240622004501025-1234490709-DkyjzOEd.png",D="/assets/662652-20240622004501134-1245827351-DJLWqK7b.png",I="/assets/662652-20240622004501057-1128983974-wq1A11jz.png",U={};function w(M,i){return s(),e("div",null,i[0]||(i[0]=[a('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><blockquote><p>之前已经分享过几篇关于中台项目框架的文章，相关介绍就不再赘述</p><p>所谓工欲善其事必先利其器，一个项目拥有一个代码生成器是很有必要的，能够大大的节省时间，减少手误，提供开发效率(ps:特别小团队搞微服务但是没有代码生成器，简直要了老命)</p><p>本文将分享如何在中台框架项目 Admin.Core 中添加代码生成器模块，助力项目的快速开发</p></blockquote><h2 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h2><p>作为本系列的第一篇第一个模块，我们将从拉取代码开始，当然也可以通过仓库的脚手架直接创建自己的项目，本系列后续都将直接基于源码开发，保持框架的同步更新</p><h3 id="克隆或下载-admin-core-代码" tabindex="-1"><a class="header-anchor" href="#克隆或下载-admin-core-代码"><span>克隆或下载 Admin.Core 代码</span></a></h3><p><code> git clone https://github.com/zhontai/Admin.Core.git</code></p><p>当然，也可以直接拉取改造创建好的模块仓库 https://github.com/yimogit/Admin.Core</p><h3 id="新建模块文件夹" tabindex="-1"><a class="header-anchor" href="#新建模块文件夹"><span>新建模块文件夹</span></a></h3><p>添加 <code>modules</code> 文件夹及解决方案文件夹，存放模块代码</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="添加代码生成器模块" tabindex="-1"><a class="header-anchor" href="#添加代码生成器模块"><span>添加代码生成器模块</span></a></h2><ul><li><p>功能：</p><ul><li><p>中台模块服务代码生成</p></li><li><p>后续计划</p><ul><li>自定义模板管理</li><li>通用代码生成器</li></ul></li></ul></li><li><p>参考之前的<a href="https://www.cnblogs.com/morang/p/zhontai_admin_core_book_03.html" target="_blank" rel="noopener noreferrer">配置文章</a>，代码可直接从当前<a href="https://github.com/yimogit/Admin.Core/tree/main/src/modules/ZhonTai.Module.Dev" target="_blank" rel="noopener noreferrer">仓库</a>获取最新代码</p></li></ul><h3 id="配置后端" tabindex="-1"><a class="header-anchor" href="#配置后端"><span>配置后端</span></a></h3><ul><li>添加模块类库 ZhonTai.Module.Dev</li></ul><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>ZhonTai.Module.Dev 需添加对 ZhonTai.Admin 的引用</p></li><li><p>ZhonTai.Host 需添加对 modules/ZhonTai.Module.Dev 的引用，确保 xml 生成，不然 swagger 显示不了中文</p></li><li><p>修改配置 Configs/appconfig.json</p><ul><li>程序集配置：<code>&quot;assemblyNames&quot;: [ &quot;ZhonTai.Admin&quot;, &quot;ZhonTai.Module.Dev&quot; ]</code></li><li>Swagger 配置：</li><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&quot;swagger&quot;: {</span></span>
<span class="line"><span>  //启用</span></span>
<span class="line"><span>  &quot;enable&quot;: true,</span></span>
<span class="line"><span>  &quot;projects&quot;: [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      &quot;name&quot;: &quot;中台Admin&quot;,</span></span>
<span class="line"><span>      &quot;code&quot;: &quot;admin&quot;,</span></span>
<span class="line"><span>      &quot;version&quot;: &quot;v8.2.0&quot;,</span></span>
<span class="line"><span>      &quot;description&quot;: &quot;&quot;</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      &quot;name&quot;: &quot;代码生成&quot;,</span></span>
<span class="line"><span>      &quot;code&quot;: &quot;dev&quot;,</span></span>
<span class="line"><span>      &quot;version&quot;: &quot;v8.2.0&quot;,</span></span>
<span class="line"><span>      &quot;description&quot;: &quot;&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Ctrl+F5 运行后模块加载成功，后端配置完成</p></li></ul><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="配置前端" tabindex="-1"><a class="header-anchor" href="#配置前端"><span>配置前端</span></a></h3><ul><li>安装包：<code>npm run install</code></li><li>修改 gen/gen-api.js 添加生成器模块</li></ul><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>将生成器代码复制到 views 中</li></ul><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>执行：<code>npm run gen:api</code> 重新生成接口映射，会把后端接口转为前台可以直接调用的 ts 代码</li></ul><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>个人建议：可以根据模块独立一个文件，添加模块生成 gen-module.js，就只会重新生成模块文件</li></ul><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>运行项目：<code>npm run dev</code> 使用 admin 123asd 即可登录到系统</li></ul><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="配置菜单" tabindex="-1"><a class="header-anchor" href="#配置菜单"><span>配置菜单</span></a></h3><ul><li><p>代码生成器的代码添加了，但是目前还无法再页面中显示出来，有<s>两</s>三种做法</p></li><li><p>第一种：可以直接修改 /src/router/route.ts 将下面的路由配置添加到参考样例的路由中，只能在开发时使用</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    {</span></span>
<span class="line"><span>        path: &#39;/dev&#39;,</span></span>
<span class="line"><span>        name: &#39;dev&#39;,</span></span>
<span class="line"><span>        redirect: &#39;/dev/codegen&#39;,</span></span>
<span class="line"><span>        meta: {</span></span>
<span class="line"><span>          title: &#39;生成器&#39;,</span></span>
<span class="line"><span>          isLink: &#39;&#39;,</span></span>
<span class="line"><span>          isHide: false,</span></span>
<span class="line"><span>          isKeepAlive: true,</span></span>
<span class="line"><span>          isAffix: false,</span></span>
<span class="line"><span>          isIframe: false,</span></span>
<span class="line"><span>          roles: [&#39;admin&#39;],</span></span>
<span class="line"><span>          icon: &#39;iconfont icon-zujian&#39;,</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        children: [</span></span>
<span class="line"><span>          {</span></span>
<span class="line"><span>            path: &#39;/dev/codegen&#39;,</span></span>
<span class="line"><span>            name: &#39;/dev/codegen&#39;,</span></span>
<span class="line"><span>            component: () =&gt; import(&#39;/@/views/dev/codegen/index.vue&#39;),</span></span>
<span class="line"><span>            meta: {</span></span>
<span class="line"><span>              title: &#39;代码生成&#39;,</span></span>
<span class="line"><span>              isLink: &#39;&#39;,</span></span>
<span class="line"><span>              isHide: false,</span></span>
<span class="line"><span>              isKeepAlive: true,</span></span>
<span class="line"><span>              isAffix: false,</span></span>
<span class="line"><span>              isIframe: false,</span></span>
<span class="line"><span>              roles: [&#39;admin&#39;],</span></span>
<span class="line"><span>              icon: &#39;iconfont icon-zujian&#39;,</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>          }]</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      //...{path: &#39;/example&#39;,...}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>第二种方法是正常使用动态路由添加</p><ul><li>系统管理-视图管理中添加对应的视图（代码中的路由的定义，地址为 dev/codegen/index）</li><li><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li>权限管理-权限管理中添加对应菜单（路由地址：/codegen，路由命名：devgen）</li><li><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li>添加后刷新页面即可访问到代码生成页面</li><li><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li><li><p>第三种方法：直接执行 sql 即可（这个也是根据前面的操作生成的）</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>--添加视图</span></span>
<span class="line"><span>INSERT INTO ad_view (Id,ParentId,Name,Label,&quot;Path&quot;,Description,Cache,Sort,Enabled,CreatedUserId,CreatedUserName,CreatedUserRealName,CreatedTime,ModifiedUserId,ModifiedUserName,ModifiedUserRealName,ModifiedTime,IsDeleted) VALUES</span></span>
<span class="line"><span>         (558530915442693,0,NULL,&#39;代码管理&#39;,NULL,NULL,0,99,1,161223411986501,&#39;admin&#39;,&#39;管理员&#39;,&#39;2024-06-16 16:08:08&#39;,161223411986501,&#39;admin&#39;,&#39;管理员&#39;,&#39;2024-06-16 16:08:16&#39;,0),</span></span>
<span class="line"><span>         (558531082424325,558530915442693,&#39;codegen&#39;,&#39;代码生成&#39;,&#39;dev/codegen/index&#39;,NULL,0,1,1,161223411986501,&#39;admin&#39;,&#39;管理员&#39;,&#39;2024-06-16 16:08:49&#39;,NULL,NULL,NULL,NULL,0);</span></span>
<span class="line"><span>-- 添加权限</span></span>
<span class="line"><span>INSERT INTO ad_permission (Id,ParentId,Label,Code,&quot;Type&quot;,ViewId,Name,&quot;Path&quot;,Redirect,Icon,Hidden,Opened,NewWindow,&quot;External&quot;,IsKeepAlive,IsAffix,Link,IsIframe,Sort,Description,Enabled,CreatedUserId,CreatedUserName,CreatedUserRealName,CreatedTime,ModifiedUserId,ModifiedUserName,ModifiedUserRealName,ModifiedTime,IsDeleted) VALUES</span></span>
<span class="line"><span>         (558531409440773,0,&#39;代码生成&#39;,NULL,2,558531082424325,&#39;devgen&#39;,&#39;/codegen&#39;,NULL,&#39;ele-Memo&#39;,0,0,0,0,0,0,NULL,0,5,NULL,1,161223411986501,&#39;admin&#39;,&#39;管理员&#39;,&#39;2024-06-16 16:10:09&#39;,161223411986501,&#39;admin&#39;,&#39;管理员&#39;,&#39;2024-06-16 16:10:55&#39;,0);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码生成服务已就位，接下来分享如何使用</p><h2 id="使用代码生成器的使用" tabindex="-1"><a class="header-anchor" href="#使用代码生成器的使用"><span>使用代码生成器的使用</span></a></h2><ul><li><p>使用需知：在本地运行访问生成器列表时，将会同步迁移生成器表，自动创建表到数据库（默认与后台模块同一个库）</p><ul><li><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li><li><p>使用前确保有可用数据源，本地直接运行默认 sqlite 数据库，选择数据库后可以查看已有数据库表来进行代码生成</p></li></ul><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>当然，也可以直接创建表生成代码&amp;创建表，这里以新建一个家常管理系统的模块作为演示</li><li>~~前置条件：需要先在 modules 中创建对应类库 ZhonTai.Module.Homely，并添加对 ZhonTai.Admin 的引用，创建 DbKeys.AppDb 指定数据库注册键，HomelyConsts.AreaName 指定默认区域名称 ~~（目前已支持类库的自动创建）</li></ul><h3 id="配置生成规则" tabindex="-1"><a class="header-anchor" href="#配置生成规则"><span>配置生成规则</span></a></h3><ul><li><p>第一步：选择数据源后，创建业务相关表：家常管理-物品管理</p><ul><li>根据格式来创建即可，实体名帕斯卡命名，会自动转换写法</li><li>父菜单：需要在生成菜单前创建菜单分组</li></ul></li></ul><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>建议保存后再进行字段配置，避免误操作</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建完成后点击按钮【生成代码】即可</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="添加代码到项目" tabindex="-1"><a class="header-anchor" href="#添加代码到项目"><span>添加代码到项目</span></a></h3><ul><li><p>第二步：生成代码后，将【后台代码】其拷贝到对应模块文件夹 ZhonTai.Module.Homely 中，并添加类库添加到 modules 文件夹（可根据需要分离 Default_Consts 内容，其中包含了路由前缀，数据库键值的默认配置，Core 文件夹只第一次使用，后续生成可以只覆盖实体&amp;仓储&amp;服务）</p><ul><li><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li>修改 ZhonTai.Host 项目，添加对模块类库 ZhonTai.Module.Homely 的引用，并修改配置文件 appconfig.json 或者 appconfig.Development.json（若启用了配置中心 UseConfigCenter:true 则修改 ConfigCenter 文件夹下的配置，我这里因为配置中心的配置无效，于是禁用了）</li><li><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li>配置完成运行项目即可</li><li><img src="'+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li>然后将前台代码【views】 文件夹拷贝到对应前端目录中，执行 <code>npm run gen:api</code> 或 <code>npm run gen:module</code> 生成新接口的前端映射文件，<strong>重新启动</strong> <strong>下前端项目</strong></li><li><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li></ul><h3 id="生成迁移数据-菜单-权限" tabindex="-1"><a class="header-anchor" href="#生成迁移数据-菜单-权限"><span>生成迁移数据&amp;菜单&amp;权限</span></a></h3><ul><li>第三步：生成迁移脚本到剪切板，连接到数据库进行执行（没有直接生成，实际应用场景中，生产环境一般手动执行，为了确保脚本的正确性，还是先看一眼，后面加个生成并执行）</li></ul><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>第四步：因为是模块的第一个服务，所以需要先在权限管理中创建一个【家常管理】的分组，这里的名字和代码生成器中填写的父菜单需要一致，否则无法生成菜单</p><ul><li><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li>这里可以重定向的路由地址由后续生成，默认列表页以 /list 结尾</li></ul></li><li><p>第五步：接口管理中同步最新接口</p></li></ul><figure><img src="'+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+L+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>第六步：在代码生成列表点击【生成菜单数据】将会自动将模块的菜单，视图生成</li></ul><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="效果展示" tabindex="-1"><a class="header-anchor" href="#效果展示"><span>效果展示</span></a></h3><p>生成成功，刷新页面，一个简单的物品管理的基础功能就出来了</p><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>新增编辑页面已同步优化为弹窗</p><figure><img src="'+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="后语" tabindex="-1"><a class="header-anchor" href="#后语"><span>后语</span></a></h2><p>至此，代码生成器又一次被我重新改造了一番，后续有时间还会继续完善代码生成器。</p><p>flag 先立在这：做一个可以自定义模块的通用代码生成器</p><p>有感兴趣的小伙伴欢迎一起加 zhontai 群沟通交流</p><p>改代码不易，写作更不易，希望路过的大佬们点个赞，指点一二</p><h3 id="相关仓库" tabindex="-1"><a class="header-anchor" href="#相关仓库"><span>相关仓库</span></a></h3><ul><li>新版代码生成器模块源码仓库：https://github.com/yimogit/Admin.Core <a href="https://github.com/yimogit/Admin.Core/tree/main/src/modules/ZhonTai.Module.Dev" target="_blank" rel="noopener noreferrer">生成器模块代码</a></li><li>中台框架仓库：https://github.com/zhontai/Admin.Core</li></ul>',65)]))}const E=n(U,[["render",w],["__file","zhontai_admin_core_module_dev_gencode.html.vue"]]),H=JSON.parse('{"path":"/posts/admincore/zhontai_admin_core_module_dev_gencode.html","title":"中台框架模块开发实践-代码生成器的添加及使用","lang":"zh-CN","frontmatter":{"title":"中台框架模块开发实践-代码生成器的添加及使用","date":"2024-06-24T09:01:00.000Z","category":["DotNetCore"],"tag":[".net core","zhontai","代码生成"],"description":"前言 之前已经分享过几篇关于中台项目框架的文章，相关介绍就不再赘述 所谓工欲善其事必先利其器，一个项目拥有一个代码生成器是很有必要的，能够大大的节省时间，减少手误，提供开发效率(ps:特别小团队搞微服务但是没有代码生成器，简直要了老命) 本文将分享如何在中台框架项目 Admin.Core 中添加代码生成器模块，助力项目的快速开发 准备 作为本系列的第一...","head":[["meta",{"property":"og:url","content":"https://www.yimo.link/posts/admincore/zhontai_admin_core_module_dev_gencode.html"}],["meta",{"property":"og:site_name","content":"易墨网"}],["meta",{"property":"og:title","content":"中台框架模块开发实践-代码生成器的添加及使用"}],["meta",{"property":"og:description","content":"前言 之前已经分享过几篇关于中台项目框架的文章，相关介绍就不再赘述 所谓工欲善其事必先利其器，一个项目拥有一个代码生成器是很有必要的，能够大大的节省时间，减少手误，提供开发效率(ps:特别小团队搞微服务但是没有代码生成器，简直要了老命) 本文将分享如何在中台框架项目 Admin.Core 中添加代码生成器模块，助力项目的快速开发 准备 作为本系列的第一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-29T02:56:06.000Z"}],["meta",{"property":"article:tag","content":".net core"}],["meta",{"property":"article:tag","content":"zhontai"}],["meta",{"property":"article:tag","content":"代码生成"}],["meta",{"property":"article:published_time","content":"2024-06-24T09:01:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-29T02:56:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中台框架模块开发实践-代码生成器的添加及使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-24T09:01:00.000Z\\",\\"dateModified\\":\\"2024-10-29T02:56:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"易墨\\",\\"url\\":\\"https://www.yimo.link\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[{"level":3,"title":"克隆或下载 Admin.Core 代码","slug":"克隆或下载-admin-core-代码","link":"#克隆或下载-admin-core-代码","children":[]},{"level":3,"title":"新建模块文件夹","slug":"新建模块文件夹","link":"#新建模块文件夹","children":[]}]},{"level":2,"title":"添加代码生成器模块","slug":"添加代码生成器模块","link":"#添加代码生成器模块","children":[{"level":3,"title":"配置后端","slug":"配置后端","link":"#配置后端","children":[]},{"level":3,"title":"配置前端","slug":"配置前端","link":"#配置前端","children":[]},{"level":3,"title":"配置菜单","slug":"配置菜单","link":"#配置菜单","children":[]}]},{"level":2,"title":"使用代码生成器的使用","slug":"使用代码生成器的使用","link":"#使用代码生成器的使用","children":[{"level":3,"title":"配置生成规则","slug":"配置生成规则","link":"#配置生成规则","children":[]},{"level":3,"title":"添加代码到项目","slug":"添加代码到项目","link":"#添加代码到项目","children":[]},{"level":3,"title":"生成迁移数据&菜单&权限","slug":"生成迁移数据-菜单-权限","link":"#生成迁移数据-菜单-权限","children":[]},{"level":3,"title":"效果展示","slug":"效果展示","link":"#效果展示","children":[]}]},{"level":2,"title":"后语","slug":"后语","link":"#后语","children":[{"level":3,"title":"相关仓库","slug":"相关仓库","link":"#相关仓库","children":[]}]}],"git":{"createdTime":1730114142000,"updatedTime":1730170566000,"contributors":[{"name":"yimo","email":"yimo@wikiglobal.com","commits":2}]},"readingTime":{"minutes":6.84,"words":2052},"filePathRelative":"posts/admincore/zhontai_admin_core_module_dev_gencode.md","localizedDate":"2024年6月24日","excerpt":"<h2>前言</h2>\\n<blockquote>\\n<p>之前已经分享过几篇关于中台项目框架的文章，相关介绍就不再赘述</p>\\n<p>所谓工欲善其事必先利其器，一个项目拥有一个代码生成器是很有必要的，能够大大的节省时间，减少手误，提供开发效率(ps:特别小团队搞微服务但是没有代码生成器，简直要了老命)</p>\\n<p>本文将分享如何在中台框架项目 Admin.Core 中添加代码生成器模块，助力项目的快速开发</p>\\n</blockquote>\\n<h2>准备</h2>\\n<p>作为本系列的第一篇第一个模块，我们将从拉取代码开始，当然也可以通过仓库的脚手架直接创建自己的项目，本系列后续都将直接基于源码开发，保持框架的同步更新</p>","autoDesc":true}');export{E as comp,H as data};
