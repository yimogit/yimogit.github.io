import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,g as s,o as l}from"./app-_tngh30b.js";const i={};function p(o,n){return l(),a("div",null,n[0]||(n[0]=[s(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><blockquote><p>Apollo（阿波罗）是携程开源的分布式配置管理中心。</p><p>本文主要介绍其基于 Docker-Compose 的部署安装和一些使用的经验</p></blockquote><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ul><li>成熟，稳定</li><li>支持管理多环境/多集群/多命名空间的配置</li><li>配置修改发布实时（1s）通知到应用程序</li><li>支持权限控制、配置继承，版本管理，灰度发布，使用监控等</li><li>官方提供了 。NET/Java/Go 的 SDK 以及 Http 接口</li><li>国产中文，文档友好，大厂背书，使用方案成熟</li><li>使用简单，支持 Docker ， K8S，官方也提供多种高可用方案参考</li></ul><h3 id="使用情况" tabindex="-1"><a class="header-anchor" href="#使用情况"><span>使用情况</span></a></h3><ul><li>目前在微服务项目中做为配置中心，表现稳定，体验良好</li><li>内存情况：新安装启动在 100M 左右，工作中实际 20 项目，80 客户端使用时，三个服务占 1.5G 左右</li><li>测试环境和生产环境分开，安全及避免错误操作</li><li>为什么选择 Apollo：稳定&amp;简单，虽然比不上 Nacos 的性能，也没有服务发现功能，但是稳定啊！！！</li><li>在我自己部署前，会觉得这个东西好难，好重，好麻烦。写这篇文章的时候的感受只有两个字：牛*</li></ul><h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践"><span>实践</span></a></h2><h3 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h3><ul><li><p>当前版本：v2.1</p></li><li><p>apollo-db：mysql 5.6.6+ 数据库</p><ul><li>默认端口：3306</li><li>依赖两个数据库：ApolloPortalDB，ApolloConfigDB</li><li>默认账号/密码：apollo/admin</li></ul></li><li><p>apollo-configservice：Config Service 提供配置的读取、推送等功能。</p><ul><li>默认端口：8080</li><li>应用程序端连接到此服务使用</li></ul></li><li><p>apollo-adminservice: Admin Service 提供配置的修改、发布等功能</p><ul><li>默认端口：8090</li><li>管理界面使用此服务</li></ul></li><li><p>apollo-portal：Portal 提供 Web 界面用来管理配置</p><ul><li>默认端口：8070</li><li>Web 管理界面</li><li>默认账号/密码：apollo/admin</li></ul></li><li><p>Deureka：提供服务注册和发现</p><ul><li>Config Service 和 Admin Service 会向 Eureka 注册服务，并保持心跳</li><li>在 Admin Service 需要指定 <code>eureka.service.url</code></li></ul></li><li><p>服务配置方式的优先级从高到低分别为：系统参数&gt;环境变量&gt;外部配置文件</p></li></ul><h3 id="使用-docker-compose-安装" tabindex="-1"><a class="header-anchor" href="#使用-docker-compose-安装"><span>使用 Docker Compose 安装</span></a></h3><blockquote><p>本篇文章基于 Docker V24 及 Docker Compose V2，安装可以参考之前的<a href="https://juejin.cn/post/7283873796977197108" target="_blank" rel="noopener noreferrer">文章</a></p></blockquote><h4 id="配置说明" tabindex="-1"><a class="header-anchor" href="#配置说明"><span>配置说明</span></a></h4><ul><li>挂载了日志文件到。/logs 目录</li><li>固定了镜像版本 mysql v5.7 ， apollo v2.1.0</li><li>指定 MySql 账号密码： root devops666 ，修改了端口映射 13306:3306</li><li>挂载 MySql 数据，初始化脚本文件夹 。/initsql（<a href="https://github.com/yimogit/MeDevOps/tree/main/configservice/01.apollo/initsql" target="_blank" rel="noopener noreferrer">v2.1 脚本</a>）</li><li>Apollo 服务中使用服务名 apollo-db 连接 MySql：<code>SPRING_DATASOURCE_URL:&#39;...apollo-db:3306/...&#39;</code></li><li>设置先启动数据库：<code>depends_on:apollo-db</code></li><li>apollo-configservice 服务中指定向 Deureka（Apollo 服务发现组件）注册的地址：<code>http://192.168.123.214:8080</code></li><li>apollo-adminservice 服务中指定向 Deureka 注册的服务地址：<code>http://192.168.123.214:809</code></li><li>apollo-adminservice 服务<a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_321-eurekaserviceurl-eureka%e6%9c%8d%e5%8a%a1url" target="_blank" rel="noopener noreferrer">需指定 Deureka 服务地址</a>：<code>-Deureka.service.url=\`\`http://192.168.123.214:8080/eureka/</code></li><li>指定网络：devopsnetwork (<code>docker network create devopsnetwork</code>)</li><li>web 管理端默认账号密码：apollo admin，登录后修改！！！</li></ul><h4 id="配置文件-compose-yml" tabindex="-1"><a class="header-anchor" href="#配置文件-compose-yml"><span>配置文件 compose.yml</span></a></h4><ul><li><p>准备好 compose.yml 及 。/initsql/初始化脚本，修改其中的 IP</p></li><li><p>拷贝到服务器</p></li><li><p>然后运行<code>docker compose up -d</code>即可</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> version: &#39;3.1&#39;</span></span>
<span class="line"><span> services:</span></span>
<span class="line"><span>   # Apollo数据库</span></span>
<span class="line"><span>   apollo-db:</span></span>
<span class="line"><span>     image: mysql:5.7</span></span>
<span class="line"><span>     container_name: apollo_db_5_7</span></span>
<span class="line"><span>     restart: always</span></span>
<span class="line"><span>     environment:</span></span>
<span class="line"><span>       TZ: Asia/Shanghai</span></span>
<span class="line"><span>       MYSQL_ROOT_PASSWORD: &#39;devops666&#39;</span></span>
<span class="line"><span>     ports:</span></span>
<span class="line"><span>       - &quot;13306:3306&quot;</span></span>
<span class="line"><span>     volumes:</span></span>
<span class="line"><span>       - ./initsql:/docker-entrypoint-initdb.d</span></span>
<span class="line"><span>       - ./data:/var/lib/mysql</span></span>
<span class="line"><span>     networks:</span></span>
<span class="line"><span>       - devopsnetwork</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   # Apollo 服务发现注册中心</span></span>
<span class="line"><span>   apollo-configservice:</span></span>
<span class="line"><span>     container_name: apollo_configservice_2_1</span></span>
<span class="line"><span>     image: apolloconfig/apollo-configservice:2.1.0</span></span>
<span class="line"><span>     restart: always</span></span>
<span class="line"><span>     depends_on:</span></span>
<span class="line"><span>       - apollo-db</span></span>
<span class="line"><span>     environment:</span></span>
<span class="line"><span>       SPRING_DATASOURCE_URL: &#39;jdbc:mysql://apollo-db:3306/ApolloConfigDB?characterEncoding=utf8&#39;</span></span>
<span class="line"><span>       SPRING_DATASOURCE_USERNAME: &#39;root&#39;</span></span>
<span class="line"><span>       SPRING_DATASOURCE_PASSWORD: &#39;devops666&#39;</span></span>
<span class="line"><span>       JAVA_OPTS: &quot;-Deureka.instance.homePageUrl=http://192.168.123.214:8080&quot;</span></span>
<span class="line"><span>       # EUREKA_INSTANCE_HOME_PAGE_URL: http://192.168.123.214:8080</span></span>
<span class="line"><span>       # EUREKA_INSTANCE_PREFER_IP_ADDRESS: false</span></span>
<span class="line"><span>     volumes:</span></span>
<span class="line"><span>       - ./logs:/opt/logs</span></span>
<span class="line"><span>     ports:</span></span>
<span class="line"><span>       - &quot;8080:8080&quot;</span></span>
<span class="line"><span>     networks:</span></span>
<span class="line"><span>       - devopsnetwork</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   #核心接口服务</span></span>
<span class="line"><span>   apollo-adminservice:</span></span>
<span class="line"><span>     container_name: apollo_adminservice_2_1</span></span>
<span class="line"><span>     image: apolloconfig/apollo-adminservice:2.1.0</span></span>
<span class="line"><span>     restart: always</span></span>
<span class="line"><span>     environment:</span></span>
<span class="line"><span>       SPRING_DATASOURCE_URL: &#39;jdbc:mysql://apollo-db:3306/ApolloConfigDB?characterEncoding=utf8&#39;</span></span>
<span class="line"><span>       SPRING_DATASOURCE_USERNAME: &#39;root&#39; </span></span>
<span class="line"><span>       SPRING_DATASOURCE_PASSWORD: &#39;devops666&#39;</span></span>
<span class="line"><span>       JAVA_OPTS: &quot;-Deureka.instance.homePageUrl=http://192.168.123.214:8090 -Deureka.service.url=http://192.168.123.214:8080/eureka/ &quot;</span></span>
<span class="line"><span>     depends_on:</span></span>
<span class="line"><span>       - apollo-db</span></span>
<span class="line"><span>     ports:</span></span>
<span class="line"><span>       - &quot;8090:8090&quot;</span></span>
<span class="line"><span>     volumes:</span></span>
<span class="line"><span>       - ./logs/:/opt/logs      </span></span>
<span class="line"><span>     networks:</span></span>
<span class="line"><span>       - devopsnetwork</span></span>
<span class="line"><span>       </span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>   apollo-portal:</span></span>
<span class="line"><span>     image: apolloconfig/apollo-portal:2.1.0</span></span>
<span class="line"><span>     container_name: apollo_portal_2_1</span></span>
<span class="line"><span>     restart: always</span></span>
<span class="line"><span>     environment:</span></span>
<span class="line"><span>       SPRING_DATASOURCE_URL: &#39;jdbc:mysql://apollo-db:3306/ApolloPortalDB?characterEncoding=utf8&#39;</span></span>
<span class="line"><span>       SPRING_DATASOURCE_USERNAME: &#39;root&#39;</span></span>
<span class="line"><span>       SPRING_DATASOURCE_PASSWORD: &#39;devops666&#39;</span></span>
<span class="line"><span>       APOLLO_PORTAL_ENVS: &#39;dev&#39;      </span></span>
<span class="line"><span>       DEV_META: &#39;http://192.168.123.214:8080&#39;</span></span>
<span class="line"><span>       # 默认账号 apollo admin</span></span>
<span class="line"><span>     depends_on:</span></span>
<span class="line"><span>       - apollo-db</span></span>
<span class="line"><span>     ports:</span></span>
<span class="line"><span>       - &quot;8070:8070&quot;</span></span>
<span class="line"><span>     volumes:</span></span>
<span class="line"><span>       - ./logs/:/opt/logs         </span></span>
<span class="line"><span>     networks:</span></span>
<span class="line"><span>       - devopsnetwork</span></span>
<span class="line"><span></span></span>
<span class="line"><span> networks:</span></span>
<span class="line"><span>   devopsnetwork:</span></span>
<span class="line"><span>     external: true</span></span>
<span class="line"><span> \`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="部署成功" tabindex="-1"><a class="header-anchor" href="#部署成功"><span>部署成功</span></a></h4><p>部署机器IP：192.168.123.214</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e9e622afa7645e197e9626db96e6b64~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1822&amp;h=107&amp;s=27837&amp;e=png&amp;b=1c1c1c" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41444b13b8cc448ab2f2ca2267411e20~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1920&amp;h=712&amp;s=94937&amp;e=png&amp;b=fefefe" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="使用-k8s-安装" tabindex="-1"><a class="header-anchor" href="#使用-k8s-安装"><span>使用 K8S 安装</span></a></h3><p>跟着官方文档一步步来即可，helm 的文件可以从 <a href="https://github.com/apolloconfig/apollo-helm-chart" target="_blank" rel="noopener noreferrer">apolloconfig/apollo-helm-chart</a> 获取，这里只分享下步骤和些注意的地方</p><ol><li><p>初始化数据库</p><ol><li>可以使用已有或者部署 mysql 服务，并创建 apollo 专门的账号密码</li><li>执行 Apollo 对应版本的 <a href="https://github.com/apolloconfig/apollo/tree/v2.1.0/scripts/sql" target="_blank" rel="noopener noreferrer">v2.1 默认初始化脚本</a> 创建 ApolloConfigDB，ApolloPortalDB</li><li>生产环境 记得修改 ServerConfig 表的 环境和组织<code>apollo.portal.envs:pro</code> <code>organizations:[{&quot;orgId&quot;:&quot;xxx&quot;,&quot;orgName&quot;:&quot;xxx公司&quot;}]</code></li></ol></li><li><p>使用 helm 添加 apollo repo</p></li><li><p>安装 apollo-service</p></li><li><p>安装 apollo-portal</p></li><li><p>k8s 使用</p><ul><li>可以将 Apollo 相关配置存储到 k8s 的 <strong>ConfigMap</strong> 中方便 k8s 服务中使用</li></ul></li></ol><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><h4 id="net-sdk" tabindex="-1"><a class="header-anchor" href="#net-sdk"><span>.NET SDK</span></a></h4><p>官方：<a href="https://github.com/apolloconfig/apollo.net" target="_blank" rel="noopener noreferrer">Com.Ctrip.Framework.Apollo.Configuration</a></p><ol><li><p>添加包：<code>Com.Ctrip.Framework.Apollo.Configuration</code></p></li><li><p>appsetting.json 中添加 apollo 配置</p><ol><li>MetaServer：Apollo 服务地址，系统信息中也可以查看到</li><li>AppId:应用 Id</li><li>Namespaces:命名空间默认是 application</li></ol></li><li><p>获取参数注册：可以是配置，也可以是从环境变量中</p><p><code>builder.Configuration.AddApollo(builder.Configuration.GetSection(&quot;apollo&quot;));</code></p></li><li><p>注入 <code>IConfiguration</code> 使用即可</p></li></ol><h4 id="连接配置" tabindex="-1"><a class="header-anchor" href="#连接配置"><span>连接配置</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  &quot;apollo&quot;: {</span></span>
<span class="line"><span>    &quot;MetaServer&quot;: &quot;http://192.168.123.214:8080&quot;,</span></span>
<span class="line"><span>    &quot;AppId&quot;: &quot;devops.test&quot;,</span></span>
<span class="line"><span>    &quot;Namespaces&quot;: [ &quot;application&quot; ]</span></span>
<span class="line"><span>  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23e848a4d5e4438eb27edf9647b06408~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1023&amp;h=276&amp;s=37762&amp;e=png&amp;b=fefdfd" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e26639a638ab464785ab479ffa314694~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1311&amp;h=436&amp;s=46459&amp;e=png&amp;b=fdfdfd" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="demo-示例" tabindex="-1"><a class="header-anchor" href="#demo-示例"><span>Demo 示例</span></a></h4><p>dotnet v7.0</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var builder = WebApplication.CreateBuilder(args);</span></span>
<span class="line"><span>builder.Configuration.AddApollo(builder.Configuration.GetSection(&quot;apollo&quot;));</span></span>
<span class="line"><span>app.MapGet(&quot;/config&quot;, context =&gt;</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    context.Response.Headers[&quot;Content-Type&quot;] = &quot;text/html; charset=utf-8&quot;;</span></span>
<span class="line"><span>    //配置服务</span></span>
<span class="line"><span>    var configService = context.RequestServices.GetRequiredService&lt;IConfiguration&gt;();</span></span>
<span class="line"><span>    string? key = context.Request.Query[&quot;key&quot;];</span></span>
<span class="line"><span>    if (string.IsNullOrWhiteSpace(key))</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        return context.Response.WriteAsync(&quot;获取配置：/config?key=test&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    var value = configService[key];</span></span>
<span class="line"><span>    return context.Response.WriteAsync(value ?? &quot;undefined&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整 Demo 示例 :<a href="https://github.com/yimogit/MeDevOps/tree/main/demos/DevopsDemo/ApolloDemo" target="_blank" rel="noopener noreferrer">Github 地址</a></p><h3 id="踩过的坑" tabindex="-1"><a class="header-anchor" href="#踩过的坑"><span>踩过的坑</span></a></h3><ul><li>数据库配置连接，使用服务名，而不是容器名</li><li>-Deureka.instance.homePageUrl 和 -Deureka.service.url 参数一开始没有理解到是做什么的，只知道配置健康检查失败，看了文档才理解到是 Deureka.instance.homePageUrl 是注册的服务地址，-Deureka.service.url 是注册中心的接口地址</li></ul><h3 id="相关文档" tabindex="-1"><a class="header-anchor" href="#相关文档"><span>相关文档</span></a></h3><ul><li><a href="https://github.com/apolloconfig/apollo" target="_blank" rel="noopener noreferrer">Github 地址</a></li><li><a href="https://www.apolloconfig.com/#/zh/design/apollo-introduction" target="_blank" rel="noopener noreferrer">官方文档</a></li><li><a href="https://www.apolloconfig.com/#/zh/design/apollo-design?id=_132-admin-service" target="_blank" rel="noopener noreferrer">模块介绍</a></li><li><a href="https://www.apolloconfig.com/#/zh/deployment/quick-start-docker" target="_blank" rel="noopener noreferrer">Docker 方式部署 Quick Start</a></li><li><a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide" target="_blank" rel="noopener noreferrer">分布式部署</a></li><li><a href="https://www.apolloconfig.com/#/zh/deployment/deployment-architecture" target="_blank" rel="noopener noreferrer">部署架构</a></li><li><a href="https://www.apolloconfig.com/#/zh/misc/apollo-benchmark" target="_blank" rel="noopener noreferrer">性能测试</a></li><li><a href="https://github.com/apolloconfig/apollo.net" target="_blank" rel="noopener noreferrer">.NET SDK: apollo.net</a></li><li><a href="https://github.com/apolloconfig/apollo/tree/v2.1.0/scripts/sql" target="_blank" rel="noopener noreferrer">默认初始化脚本</a></li><li><a href="https://www.apolloconfig.com/#/zh/usage/java-sdk-user-guide?id=_1222-%e8%b7%b3%e8%bf%87apollo-meta-server%e6%9c%8d%e5%8a%a1%e5%8f%91%e7%8e%b0" target="_blank" rel="noopener noreferrer">跳过服务发现</a></li><li><a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=%e4%b8%89%e3%80%81%e6%9c%8d%e5%8a%a1%e7%ab%af%e9%85%8d%e7%bd%ae%e8%af%b4%e6%98%8e" target="_blank" rel="noopener noreferrer">配置说明</a></li></ul><h2 id="后语" tabindex="-1"><a class="header-anchor" href="#后语"><span>后语</span></a></h2><p>时间充裕的情况最好是过一遍文档，知道是怎么设计的，遇到问题真会一头雾水。</p><p>每天进步一点，哪怕只是一点！</p>`,41)]))}const c=e(i,[["render",p],["__file","devops_apollo_install.html.vue"]]),d=JSON.parse('{"path":"/posts/devops/devops_apollo_install.html","title":"Apollo 配置中心的部署与使用经验","lang":"zh-CN","frontmatter":{"title":"Apollo 配置中心的部署与使用经验","date":"2023-10-31T19:14:00.000Z","category":["DevOps"],"tag":["devops","apollo","配置中心"],"description":"前言 Apollo（阿波罗）是携程开源的分布式配置管理中心。 本文主要介绍其基于 Docker-Compose 的部署安装和一些使用的经验 特点 成熟，稳定 支持管理多环境/多集群/多命名空间的配置 配置修改发布实时（1s）通知到应用程序 支持权限控制、配置继承，版本管理，灰度发布，使用监控等 官方提供了 。NET/Java/Go 的 SDK 以及 H...","head":[["meta",{"property":"og:url","content":"https://www.yimo.link/posts/devops/devops_apollo_install.html"}],["meta",{"property":"og:site_name","content":"易墨网"}],["meta",{"property":"og:title","content":"Apollo 配置中心的部署与使用经验"}],["meta",{"property":"og:description","content":"前言 Apollo（阿波罗）是携程开源的分布式配置管理中心。 本文主要介绍其基于 Docker-Compose 的部署安装和一些使用的经验 特点 成熟，稳定 支持管理多环境/多集群/多命名空间的配置 配置修改发布实时（1s）通知到应用程序 支持权限控制、配置继承，版本管理，灰度发布，使用监控等 官方提供了 。NET/Java/Go 的 SDK 以及 H..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e9e622afa7645e197e9626db96e6b64~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1822&h=107&s=27837&e=png&b=1c1c1c"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T11:15:42.000Z"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"apollo"}],["meta",{"property":"article:tag","content":"配置中心"}],["meta",{"property":"article:published_time","content":"2023-10-31T19:14:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-28T11:15:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Apollo 配置中心的部署与使用经验\\",\\"image\\":[\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e9e622afa7645e197e9626db96e6b64~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1822&h=107&s=27837&e=png&b=1c1c1c\\",\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41444b13b8cc448ab2f2ca2267411e20~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1920&h=712&s=94937&e=png&b=fefefe\\",\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23e848a4d5e4438eb27edf9647b06408~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1023&h=276&s=37762&e=png&b=fefdfd\\",\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e26639a638ab464785ab479ffa314694~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1311&h=436&s=46459&e=png&b=fdfdfd\\"],\\"datePublished\\":\\"2023-10-31T19:14:00.000Z\\",\\"dateModified\\":\\"2024-10-28T11:15:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"易墨\\",\\"url\\":\\"https://www.yimo.link\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"使用情况","slug":"使用情况","link":"#使用情况","children":[]}]},{"level":2,"title":"实践","slug":"实践","link":"#实践","children":[{"level":3,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":3,"title":"使用 Docker Compose 安装","slug":"使用-docker-compose-安装","link":"#使用-docker-compose-安装","children":[{"level":4,"title":"配置说明","slug":"配置说明","link":"#配置说明","children":[]},{"level":4,"title":"配置文件 compose.yml","slug":"配置文件-compose-yml","link":"#配置文件-compose-yml","children":[]},{"level":4,"title":"部署成功","slug":"部署成功","link":"#部署成功","children":[]}]},{"level":3,"title":"使用 K8S 安装","slug":"使用-k8s-安装","link":"#使用-k8s-安装","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[{"level":4,"title":".NET SDK","slug":"net-sdk","link":"#net-sdk","children":[]},{"level":4,"title":"连接配置","slug":"连接配置","link":"#连接配置","children":[]},{"level":4,"title":"Demo 示例","slug":"demo-示例","link":"#demo-示例","children":[]}]},{"level":3,"title":"踩过的坑","slug":"踩过的坑","link":"#踩过的坑","children":[]},{"level":3,"title":"相关文档","slug":"相关文档","link":"#相关文档","children":[]}]},{"level":2,"title":"后语","slug":"后语","link":"#后语","children":[]}],"git":{"createdTime":1730114142000,"updatedTime":1730114142000,"contributors":[{"name":"yimo","email":"yimo@wikiglobal.com","commits":1}]},"readingTime":{"minutes":5.74,"words":1723},"filePathRelative":"posts/devops/devops_apollo_install.md","localizedDate":"2023年10月31日","excerpt":"<h2>前言</h2>\\n<blockquote>\\n<p>Apollo（阿波罗）是携程开源的分布式配置管理中心。</p>\\n<p>本文主要介绍其基于 Docker-Compose 的部署安装和一些使用的经验</p>\\n</blockquote>\\n<h3>特点</h3>\\n<ul>\\n<li>成熟，稳定</li>\\n<li>支持管理多环境/多集群/多命名空间的配置</li>\\n<li>配置修改发布实时（1s）通知到应用程序</li>\\n<li>支持权限控制、配置继承，版本管理，灰度发布，使用监控等</li>\\n<li>官方提供了 。NET/Java/Go 的 SDK 以及 Http 接口</li>\\n<li>国产中文，文档友好，大厂背书，使用方案成熟</li>\\n<li>使用简单，支持 Docker ， K8S，官方也提供多种高可用方案参考</li>\\n</ul>","autoDesc":true}');export{c as comp,d as data};
