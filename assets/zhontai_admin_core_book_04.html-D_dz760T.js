import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as l,o as e}from"./app-DCEOXUJ9.js";const s="/assets/662652-20230827233709025-1845798153-CIXbdc-g.png",t="/assets/662652-20230827233709627-545875304-C0LvdA8n.png",h="/assets/662652-20230827233710087-428916637-CHxEXV4e.png",p={};function r(k,i){return e(),a("div",null,i[0]||(i[0]=[l(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><blockquote><p>Github Actions是什么？是 GitHub 提供的一种持续集成/持续部署（CI/CD）工作流程自动化服务,助力项目的自动化构建、测试和部署。<br> 依托于平台，本文将分享使用 GitHub Actions 完成对一个.Net Core+Vue 的前后端分离项目 zhontai 的构建，并使用 docker 部署到云服务器(阿里云)</p></blockquote><h3 id="使用说明" tabindex="-1"><a class="header-anchor" href="#使用说明"><span>使用说明</span></a></h3><p>经过一番尝试学习，个人感受是其功能齐全,文档完善，使用 GitHub 托管仓库完成自己的 CI/CD，不再需要自己搞构建服务了。<br> 关于使用费用问题：每个用户/组织都有免费的使用额度：2000 分钟/月, 不同的项目归类到不同的组织，完全足够使用了。</p><h3 id="本文环境" tabindex="-1"><a class="header-anchor" href="#本文环境"><span>本文环境</span></a></h3><ul><li>GitHub 项目 <ul><li>.Net Core 项目：<a href="https://github.com/yimogit/Admin.Core" target="_blank" rel="noopener noreferrer">https://github.com/yimogit/Admin.Core</a> fork 自 <a href="https://github.com/zhontai/Admin.Core" target="_blank" rel="noopener noreferrer">zhontai/Admin.Core</a></li><li>Vue 项目：<a href="https://github.com/yimogit/admin.ui.plus" target="_blank" rel="noopener noreferrer">https://github.com/yimogit/admin.ui.plus</a> fork 自 <a href="https://github.com/zhontai/admin.ui.plus" target="_blank" rel="noopener noreferrer">zhontai/admin.ui.plus</a></li></ul></li><li>安装了 docker 的 Linux 服务器</li></ul><h2 id="后端-asp-net-core7-0-项目的部署" tabindex="-1"><a class="header-anchor" href="#后端-asp-net-core7-0-项目的部署"><span>后端 asp.net core7.0 项目的部署</span></a></h2><h3 id="执行步骤及重点" tabindex="-1"><a class="header-anchor" href="#执行步骤及重点"><span>执行步骤及重点</span></a></h3><ul><li>仓库地址：<a href="https://github.com/yimogit/Admin.Core" target="_blank" rel="noopener noreferrer">https://github.com/yimogit/Admin.Core</a></li><li>部署文件：<a href="https://github.com/yimogit/Admin.Core/blob/master/.github/workflows/test-deploy.yml" target="_blank" rel="noopener noreferrer"><code>.github\\workflows\\test-deploy.yml</code></a></li><li>目录结构<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>├─.github</span></span>
<span class="line"><span>│  └─workflows</span></span>
<span class="line"><span>│    └─test-deploy.yml</span></span>
<span class="line"><span>├─docker</span></span>
<span class="line"><span>│    ├─Dockerfile</span></span>
<span class="line"><span>│    - publish_output publish生成的文件会复制到此，rsync上传到linux服务器</span></span>
<span class="line"><span>├─src</span></span>
<span class="line"><span>│    ├─hosts</span></span>
<span class="line"><span>├─...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol><li><p>新建 github actions 配置文件: <code>.github\\workflows\\test-deploy.yml</code></p><ul><li>仓库的 .github/workflows 目录中定义将会被 github actions 识别</li><li>测试可以用，生产则可以用 <code>on: workflow_dispatch</code> 指定手动构建</li></ul></li><li><p>拉取分支</p><ul><li>actions 库：<code>actions/checkout@v3</code></li></ul></li><li><p>安装 Dotnet7</p><ul><li>actions 库：<code>actions/setup-dotnet@v3</code></li></ul></li><li><p>执行打包生成 publish_output 目录</p><ul><li><code>dotnet publish ./src/hosts/ZhonTai.Host -c Release -o ./publish_output --self-contained true --runtime linux-x64 --framework net7.0</code></li></ul></li><li><p>使用 ssh 部署到服务器</p><ul><li>actions 库：<code>easingthemes/ssh-deploy@v4.1.8</code></li><li>将 publish_output 复制到 docker 目录，在将 docker 目录，将其上传到服务器后执行脚本</li><li>ssh 连接后需要创建挂载目录，一个数据库的目录，一个上传目录</li><li>默认 ZhonTai.Host 的端口是 8000</li><li>创建挂载目录：<code>mkdir /root/zhontai/volumns/upload -p</code></li><li>docker 运行:<code>docker run --name my-zhontai-apihost -d -p 9902:8000 -e -v /root/zhontai/volumns/admindb.db:/app/admindb.db -v /root/zhontai/volumns/upload:/app/wwwroot/upload zhontai/apihost:latest</code></li></ul></li><li><p>ssh 使用需要配置的环境变量</p><ul><li><code>\${{ secrets.SSH_PRIVATE_KEY }}</code>：服务器的 ssh 密钥:~/.ssh/id_rsa 内容</li><li><code>\${{ secrets.REMOTE_HOST }}</code>：服务器 IP: xxx.xxx.xxx.xxx</li><li><code>\${{ secrets.REMOTE_USER }}</code>：用户名 root</li><li><code>\${{ secrets.REMOTE_TARGET }}</code>：远程目录 /root/zhontai/api</li></ul></li><li><p>配置需要的环境变量</p><ul><li>配置路径：项目-&gt;Settings-&gt;Security-&gt;Secrets and variables-&gt;Actions-&gt;New repository secret</li><li><img src="`+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li>ssh 的生成参考<a href="https://github.com/marketplace/actions/ssh-deploy#configuration" target="_blank" rel="noopener noreferrer">ssh-deploy 配置部分</a></li><li><code>ssh-keygen -m PEM -t rsa -b 4096</code> 生成 ssh，然后复制公钥到 authorized_keys (<code>cat ~/.ssh/id_rsa.pub&gt;&gt;~/.ssh/authorized_keys</code>)</li><li>设置完最好是重启下</li></ul></li><li><p>构建完成</p><ul><li>记得开启云服务器的防火墙端口：9902，即可在浏览器中访问到前台页面</li><li><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li></ol><h3 id="github-workflows-test-deploy-yml" tabindex="-1"><a class="header-anchor" href="#github-workflows-test-deploy-yml"><span>.github/workflows/test-deploy.yml</span></a></h3><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># test-deploy.yml</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">后端测试环境直接部署</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 手动构建</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#on: workflow_dispatch</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    branches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">master</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">jobs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    runs-on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    steps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 拉取仓库文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">拉取master分支代码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">actions/checkout@v3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          # 默认当前分支</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;master&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # action命令，安装Dotnet7</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">安装 Dotnet7</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">actions/setup-dotnet@v3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          dotnet-version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7.0.400</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 执行打包命令</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">dotnet --version &amp;&amp; dotnet publish ./src/hosts/ZhonTai.Host -c Release -o ./publish_output --self-contained true --runtime linux-x64 --framework net7.0</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 将dist复制到docker目录中</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cp ./publish_output ./docker -rf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 使用 ssh 将api-dist文件拷贝到 linux</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">使用ssh部署</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">easingthemes/ssh-deploy@v4.1.8</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          SSH_PRIVATE_KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${{ secrets.SSH_PRIVATE_KEY }}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          ARGS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;-rlgoDzvc -i --delete&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          SOURCE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;docker&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          REMOTE_HOST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${{ secrets.REMOTE_HOST }}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          REMOTE_USER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${{ secrets.REMOTE_USER }}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          TARGET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${{ secrets.REMOTE_TARGET }}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          EXCLUDE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/node_modules/&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          SCRIPT_BEFORE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            mkdir \${{ secrets.REMOTE_TARGET }} -p</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          SCRIPT_AFTER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            cd \${{ secrets.REMOTE_TARGET }}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            cd docker</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            docker build --rm -f ./Dockerfile -t zhontai/apihost:latest .</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            # 检查容器是否存在</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            if docker container ls -a | grep -q &quot;my-zhontai-apihost&quot;; then</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                echo &quot;容器已存在&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                # 停止并移除容器</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                docker stop my-zhontai-apihost</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                docker rm my-zhontai-apihost</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            fi</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            # 容器挂载的路径</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            mkdir /root/zhontai/volumns/upload -p</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            docker run --name my-zhontai-apihost -d -p 9902:8000  -e ASPNETCORE_ENVIRONMENT=Testing  -v /root/zhontai/volumns/admindb.db:/app/admindb.db -v /root/zhontai/volumns/upload:/app/wwwroot/upload zhontai/apihost:latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-dockerfile" tabindex="-1"><a class="header-anchor" href="#docker-dockerfile"><span>docker/Dockerfile</span></a></h3><ul><li>打包在 GitHub Actions 完成，生成了 publish_output,所以只需要运行时镜像部署即可</li><li>指定工作目录为 /app</li><li>指定监听应用端口，Admin.Core 默认端口为 8000,启动库为 ZhonTai.Host</li></ul><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" data-title="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用 ASP.NET Core 运行时镜像作为最终镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mcr.microsoft.com/dotnet/aspnet:7.0 </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> runtime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 复制构建好的应用程序文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ./publish_output /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置运行时环境变量</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ASPNETCORE_URLS=http://+:8000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定容器启动时要执行的命令</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dotnet&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ZhonTai.Host.dll&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="前台-vue-项目的部署" tabindex="-1"><a class="header-anchor" href="#前台-vue-项目的部署"><span>前台 vue 项目的部署</span></a></h2><p>整个过程类似镜像构建一样，一步步设置自己需要的环境，然后执行命令或者设置对应的操作，可以在使用前过一遍<a href="https://docs.github.com/zh/actions" target="_blank" rel="noopener noreferrer">中文文档</a>有个大概的了解，本文就跳过基础介绍直接说实现方式及重点</p><h3 id="执行的步骤及重点" tabindex="-1"><a class="header-anchor" href="#执行的步骤及重点"><span>执行的步骤及重点</span></a></h3><ul><li>仓库地址：<a href="https://github.com/yimogit/admin.ui.plus" target="_blank" rel="noopener noreferrer">https://github.com/yimogit/admin.ui.plus</a></li><li>部署文件：<a href="https://github.com/yimogit/admin.ui.plus/blob/master/.github/workflows/test-deploy.yml" target="_blank" rel="noopener noreferrer"><code>.github\\workflows\\test-deploy.yml</code></a></li><li>目录结构<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>├─.github</span></span>
<span class="line"><span>│  └─workflows</span></span>
<span class="line"><span>│    └─test-deploy.yml</span></span>
<span class="line"><span>├─docker</span></span>
<span class="line"><span>│    ├─Dockerfile</span></span>
<span class="line"><span>│    └─nginx.conf</span></span>
<span class="line"><span>│    - dist build生成的dist会复制到此，rsync上传到linux服务器</span></span>
<span class="line"><span>├─public</span></span>
<span class="line"><span>├─src</span></span>
<span class="line"><span>├─...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol><li><p>新建 github actions 配置文件: <code>.github\\workflows\\test-deploy.yml</code></p><ul><li>仓库的 .github/workflows 目录中定义将会被 github actions 识别</li><li>测试可以用，生产则可以用 <code>on: workflow_dispatch</code> 指定手动构建</li></ul></li><li><p>拉取分支</p><ul><li>actions 库：<code>actions/checkout@v3</code></li></ul></li><li><p>安装 node v18.17.1</p><ul><li>actions 库：<code>actions/setup-node@v3</code></li></ul></li><li><p>执行打包生成 dist 目录</p><ul><li><code>npm install &amp;&amp; npm run build</code></li><li>默认打包使用的 production 环境的配置，如需打包其他环境则可以使用<code>npm run build --mode testing</code> 指定环境 testing，并使用 .env.testing 环境变量文件</li><li>使用<code>echo -e &quot;\\nVITE_API_URL=\${{ secrets.API_HOST }}&quot; &gt;&gt; .env.production</code> 将配置中的 API_HOST 写入环境变量中</li></ul></li><li><p>使用 ssh 部署到服务器</p><ul><li>actions 库：<code>easingthemes/ssh-deploy@v4.1.8</code></li><li>将 dist 复制到 docker 目录，在将 docker 目录，将其上传到服务器后执行脚本</li></ul></li><li><p>ssh 使用需要配置的环境变量</p><ul><li><code>\${{ secrets.SSH_PRIVATE_KEY }}</code>：服务器的 ssh 密钥</li><li><code>\${{ secrets.REMOTE_HOST }}</code>：服务器 IP</li><li><code>\${{ secrets.REMOTE_USER }}</code>：用户名</li><li><code>\${{ secrets.REMOTE_TARGET }}</code>：远程目录</li><li><code>\${{ secrets.API_HOST }}</code>: 接口地址，配置后写入<code>VITE_API_URL=xxx.com</code></li></ul></li><li><p>配置需要的环境变量</p><ul><li>配置路径：项目-&gt;Settings-&gt;Security-&gt;Secrets and variables-&gt;Actions-&gt;New repository secret</li><li><img src="`+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li>ssh 的生成参考<a href="https://github.com/marketplace/actions/ssh-deploy#configuration" target="_blank" rel="noopener noreferrer">ssh-deploy 配置部分</a></li><li><code>ssh-keygen -m PEM -t rsa -b 4096</code> 生成 ssh，然后复制公钥到 authorized_keys</li></ul></li><li><p>构建完成</p><ul><li>记得开启云服务器的防火墙端口：9901，即可在浏览器中访问到前台页面</li><li><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li></ol><h3 id="github-workflows-test-deploy-yml-1" tabindex="-1"><a class="header-anchor" href="#github-workflows-test-deploy-yml-1"><span>.github/workflows/test-deploy.yml</span></a></h3><ul><li>完整的部署配置</li></ul><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># test-deploy.yml</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">前端直接部署</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 手动构建</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># on: workflow_dispatch</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 自动构建</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    branches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">master</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">jobs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    runs-on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    steps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 拉取仓库文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">拉取master分支代码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">actions/checkout@v3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          # 默认当前分支</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;master&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # action命令，安装Node v18.17.1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">安装 node</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">actions/setup-node@v3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          node-version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">18.17.1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;npm&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 执行打包命令</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          if [ -n &quot;\${{ secrets.API_HOST }}&quot; ]; then</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            # 使用设置中的接口地址</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            echo -e &quot;\\nVITE_API_URL=\${{ secrets.API_HOST }}&quot; &gt;&gt; .env.production</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          fi</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">node -v &amp;&amp; npm -v &amp;&amp; npm install &amp;&amp; npm run build</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 将dist复制到docker目录中</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cp ./dist ./docker -rf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 使用 ssh 将dist文件拷贝到 linux</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">使用ssh部署到服务器</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">easingthemes/ssh-deploy@v4.1.8</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          SSH_PRIVATE_KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${{ secrets.SSH_PRIVATE_KEY }}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          ARGS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;-rlgoDzvc -i --delete&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          SOURCE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;docker&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          REMOTE_HOST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${{ secrets.REMOTE_HOST }}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          REMOTE_USER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${{ secrets.REMOTE_USER }}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          TARGET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${{ secrets.REMOTE_TARGET }}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          EXCLUDE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/node_modules/&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          SCRIPT_BEFORE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            mkdir \${{ secrets.REMOTE_TARGET }} -p</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          SCRIPT_AFTER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            cd \${{ secrets.REMOTE_TARGET }}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            cd docker</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            docker build --rm -f ./Dockerfile -t zhontai/adminui:latest .</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            # 检查容器是否存在</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            if docker container ls -a | grep -q &quot;my-zhontai-adminui&quot;; then</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                echo &quot;容器已存在,停止并移除容器&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                docker stop my-zhontai-adminui</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                docker rm my-zhontai-adminui</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            fi</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            docker run --name my-zhontai-adminui -d -p 9901:80 zhontai/adminui:latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-dockerfile-1" tabindex="-1"><a class="header-anchor" href="#docker-dockerfile-1"><span>docker/Dockerfile</span></a></h3><ul><li>使用 nginx 1.18 镜像，添加前端页面及 nginx 配置</li><li>对应使用脚本：<code>docker build --rm -f ./Dockerfile -t zhontai/adminui:latest .</code></li></ul><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" data-title="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nginx:1.18</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 80</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ./dist /usr/share/nginx/html</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ./nginx.conf /etc/nginx/conf.d/default.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-nginx-conf" tabindex="-1"><a class="header-anchor" href="#docker-nginx-conf"><span>docker/nginx.conf</span></a></h3><ul><li>nginx v1.18 的配置,外层没有 http 节点了</li><li>并且会覆盖默认的 default.conf 才行</li></ul><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    listen </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server_name </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> localhost;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    charset </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">utf-8;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  /usr/share/nginx/html;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try_files </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/ /index.html;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        index </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> index.html index.htm;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #error_page  404              /404.html;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    error_page </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  500</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 502</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 503</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 504</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  /50x.html;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/50x.html </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  html;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一些碎碎念" tabindex="-1"><a class="header-anchor" href="#一些碎碎念"><span>一些碎碎念</span></a></h2><ol><li>本文的做法适用于测试，如果要构建生产，还需要更加严谨，比如需要手动执行，而不是自动构建，以及可以将打包和部署分开，生成构建物体，快速回滚部署</li><li>本文为了演示远程 docker，所以每次都是构建了 docker，其实也可以直接上传到服务器目录，不需要重启 docker</li><li>文章大部分都是用命令完成，方便迁移到其他构建工具，后续也可以直接在Github使用。</li></ol><p>不完全踩坑记录</p><ul><li>ssh部署：看了好久才看明白，一开始生成了没有复制到authorized_keys，然后生成了密钥没重启就是连接不上</li><li><a href="https://github.com/marketplace/actions/ssh-deploy#issues" target="_blank" rel="noopener noreferrer">actions/ssh-deploy 使用私钥链接提示无权限</a>的时候需要将公钥复制到 authorized_keys：<code>cat ~/.ssh/id_rsa.pub&gt;&gt;~/.ssh/authorized_keys</code></li><li>docker nginx：nginx.conf挂载的地址不对，之前的旧版本是在/etc/nginx/nginx.conf,新的在/etc/nginx/conf.d/default.conf</li><li>nginx.conf的格式新版去掉了http节点，直接配置server节点就行，配置文件没对，导致误以为是我history模式nginx写法不对</li><li>覆盖.env.production中接口地址的配置，想要换行加一句，试了好多次才行：<code>echo -e &quot;\\nVITE_API_URL=xxx&quot; &gt;&gt; .env.production</code></li><li>api项目挂载的位置搞错了几次：数据库和文件上传的地址分别是：/app/admindb.db,/app/wwwroot/upload</li><li>api项目挂载文件需要先行创建目录，启动后将会生成数据库</li><li>api项目的端口默认8000</li></ul><p>时间过得太快了，周末两天第一次沉下心研究了一天Github Actions,各种尝试踩坑，第二天将过程整理分享出来，写完这句，发现眨眼间就周一了。 似乎学习，能让我在迷茫中找到些许方向吧。</p><p>By <a href="https://www.cnblogs.com/morang" target="_blank" rel="noopener noreferrer">易墨</a> 转载请注明出处</p><h2 id="相关资料" tabindex="-1"><a class="header-anchor" href="#相关资料"><span>相关资料</span></a></h2><h3 id="项目说明" tabindex="-1"><a class="header-anchor" href="#项目说明"><span>项目说明</span></a></h3><p>如果对部署的项目感兴趣可以参考前两篇文章</p><ul><li>zhontai Admin.Core: <a href="https://www.cnblogs.com/morang/p/zhontai_admin_core_book_01.html" target="_blank" rel="noopener noreferrer">01.前后端分离中台框架后端 Admin.Core 学习-介绍与配置说明</a></li><li>zhontai admin.ui.plus：<a href="https://www.cnblogs.com/morang/p/zhontai_admin_core_book_02.html" target="_blank" rel="noopener noreferrer">02.前后端分离中台框架前端 admin.ui.plus 学习-介绍与简单使用</a></li><li>zhontai 代码生成：<a href="https://www.cnblogs.com/morang/p/zhontai_admin_core_book_03.html" target="_blank" rel="noopener noreferrer">03.前后端分离中台框架 zhontai 项目代码生成器的使用</a></li></ul><h3 id="github-actions-相关地址" tabindex="-1"><a class="header-anchor" href="#github-actions-相关地址"><span>Github Actions 相关地址</span></a></h3><ul><li><a href="https://docs.github.com/zh/actions" target="_blank" rel="noopener noreferrer">GitHub Actions 中文文档</a></li><li><a href="https://docs.github.com/zh/billing/managing-billing-for-github-actions/about-billing-for-github-actions" target="_blank" rel="noopener noreferrer">GitHub Actions 计费</a></li><li><a href="https://github.com/settings/billing" target="_blank" rel="noopener noreferrer">GitHub Actions 个人使用情况</a></li></ul><h3 id="本文使用到的-action-库" tabindex="-1"><a class="header-anchor" href="#本文使用到的-action-库"><span>本文使用到的 action 库</span></a></h3><ul><li><code>actions/checkout@v3</code> 拉取仓库代码:<a href="https://github.com/marketplace/actions/checkout?version=v3.6.0" target="_blank" rel="noopener noreferrer">v3.6.0 文档</a></li><li><code>actions/setup-node@v3</code> 安装 node <a href="https://github.com/marketplace/actions/setup-node-js-environment?version=v3.8.1" target="_blank" rel="noopener noreferrer">v3.8.1 文档 </a></li><li><code>actions/setup-dotnet@v3</code> 安装 dotnet <a href="https://github.com/marketplace/actions/setup-net-core-sdk?version=v3.2.0" target="_blank" rel="noopener noreferrer">v3.2.0 文档</a></li><li><code>easingthemes/ssh-deploy@v4.1.8</code> ssh 连接服务器 <a href="https://github.com/marketplace/actions/ssh-deploy?version=v4.1.8" target="_blank" rel="noopener noreferrer">v4.1.8 文档</a></li><li>其他 <ul><li><code>actions/upload-artifact@v3</code> 上传文件 <a href="https://github.com/marketplace/actions/upload-a-build-artifact?version=v3.1.2" target="_blank" rel="noopener noreferrer">v3.1.2 文档</a></li><li><code>actions/download-artifact@v3</code> 下载文件 <a href="https://github.com/marketplace/actions/download-a-build-artifact?version=v3.0.2" target="_blank" rel="noopener noreferrer">v3.0.2 文档</a></li></ul></li></ul>`,43)]))}const c=n(p,[["render",r],["__file","zhontai_admin_core_book_04.html.vue"]]),g=JSON.parse('{"path":"/posts/admincore/zhontai_admin_core_book_04.html","title":"04.使用 github actions+docker 自动部署前后端分离项目 zhontai (.net core+vue)","lang":"zh-CN","frontmatter":{"title":"04.使用 github actions+docker 自动部署前后端分离项目 zhontai (.net core+vue)","date":"2023-08-28T00:20:00.000Z","category":["DotNetCore"],"tag":[".net core","docker","zhontai"],"description":"前言 Github Actions是什么？是 GitHub 提供的一种持续集成/持续部署（CI/CD）工作流程自动化服务,助力项目的自动化构建、测试和部署。 依托于平台，本文将分享使用 GitHub Actions 完成对一个.Net Core+Vue 的前后端分离项目 zhontai 的构建，并使用 docker 部署到云服务器(阿里云) 使用说明 ...","head":[["meta",{"property":"og:url","content":"https://www.yimo.link/posts/admincore/zhontai_admin_core_book_04.html"}],["meta",{"property":"og:site_name","content":"易墨网"}],["meta",{"property":"og:title","content":"04.使用 github actions+docker 自动部署前后端分离项目 zhontai (.net core+vue)"}],["meta",{"property":"og:description","content":"前言 Github Actions是什么？是 GitHub 提供的一种持续集成/持续部署（CI/CD）工作流程自动化服务,助力项目的自动化构建、测试和部署。 依托于平台，本文将分享使用 GitHub Actions 完成对一个.Net Core+Vue 的前后端分离项目 zhontai 的构建，并使用 docker 部署到云服务器(阿里云) 使用说明 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-29T02:56:06.000Z"}],["meta",{"property":"article:tag","content":".net core"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"zhontai"}],["meta",{"property":"article:published_time","content":"2023-08-28T00:20:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-29T02:56:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04.使用 github actions+docker 自动部署前后端分离项目 zhontai (.net core+vue)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-28T00:20:00.000Z\\",\\"dateModified\\":\\"2024-10-29T02:56:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"易墨\\",\\"url\\":\\"https://www.yimo.link\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[{"level":3,"title":"使用说明","slug":"使用说明","link":"#使用说明","children":[]},{"level":3,"title":"本文环境","slug":"本文环境","link":"#本文环境","children":[]}]},{"level":2,"title":"后端 asp.net core7.0 项目的部署","slug":"后端-asp-net-core7-0-项目的部署","link":"#后端-asp-net-core7-0-项目的部署","children":[{"level":3,"title":"执行步骤及重点","slug":"执行步骤及重点","link":"#执行步骤及重点","children":[]},{"level":3,"title":".github/workflows/test-deploy.yml","slug":"github-workflows-test-deploy-yml","link":"#github-workflows-test-deploy-yml","children":[]},{"level":3,"title":"docker/Dockerfile","slug":"docker-dockerfile","link":"#docker-dockerfile","children":[]}]},{"level":2,"title":"前台 vue 项目的部署","slug":"前台-vue-项目的部署","link":"#前台-vue-项目的部署","children":[{"level":3,"title":"执行的步骤及重点","slug":"执行的步骤及重点","link":"#执行的步骤及重点","children":[]},{"level":3,"title":".github/workflows/test-deploy.yml","slug":"github-workflows-test-deploy-yml-1","link":"#github-workflows-test-deploy-yml-1","children":[]},{"level":3,"title":"docker/Dockerfile","slug":"docker-dockerfile-1","link":"#docker-dockerfile-1","children":[]},{"level":3,"title":"docker/nginx.conf","slug":"docker-nginx-conf","link":"#docker-nginx-conf","children":[]}]},{"level":2,"title":"一些碎碎念","slug":"一些碎碎念","link":"#一些碎碎念","children":[]},{"level":2,"title":"相关资料","slug":"相关资料","link":"#相关资料","children":[{"level":3,"title":"项目说明","slug":"项目说明","link":"#项目说明","children":[]},{"level":3,"title":"Github Actions 相关地址","slug":"github-actions-相关地址","link":"#github-actions-相关地址","children":[]},{"level":3,"title":"本文使用到的 action 库","slug":"本文使用到的-action-库","link":"#本文使用到的-action-库","children":[]}]}],"git":{"createdTime":1730114142000,"updatedTime":1730170566000,"contributors":[{"name":"yimo","email":"yimo@wikiglobal.com","commits":2}]},"readingTime":{"minutes":8.67,"words":2600},"filePathRelative":"posts/admincore/zhontai_admin_core_book_04.md","localizedDate":"2023年8月28日","excerpt":"<h2>前言</h2>\\n<blockquote>\\n<p>Github Actions是什么？是 GitHub 提供的一种持续集成/持续部署（CI/CD）工作流程自动化服务,助力项目的自动化构建、测试和部署。<br>\\n依托于平台，本文将分享使用 GitHub Actions 完成对一个.Net Core+Vue 的前后端分离项目 zhontai 的构建，并使用 docker 部署到云服务器(阿里云)</p>\\n</blockquote>\\n<h3>使用说明</h3>\\n<p>经过一番尝试学习，个人感受是其功能齐全,文档完善，使用 GitHub 托管仓库完成自己的 CI/CD，不再需要自己搞构建服务了。<br>\\n关于使用费用问题：每个用户/组织都有免费的使用额度：2000 分钟/月, 不同的项目归类到不同的组织，完全足够使用了。</p>","autoDesc":true}');export{c as comp,g as data};
