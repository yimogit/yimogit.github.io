<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[weexpack打包weex项目运行/打包记录]]></title>
      <url>/2017/05/14/06-weex-build-apk/</url>
      <content type="html"><![CDATA[<h1 id="构建weex项目"><a href="#构建weex项目" class="headerlink" title="构建weex项目"></a>构建weex项目</h1><ol>
<li>安装weex-toolkit  <code>cnpm install -g weex-toolkit</code>       </li>
<li>初始化一个项目只需新建文件夹并在目录下执行 <code>weex init</code> 即可     </li>
<li>安装依赖：<code>cnpm install</code>  </li>
<li>编译项目：<code>npm run dev</code>   </li>
<li>启动服务器：<code>npm run serve</code> //可以修改package.json的端口号来改变监听端口                   </li>
<li>可以执行的命令一览<br> <img src="https://dn-coding-net-production-pp.qbox.me/bbe02f9d-111a-4200-960a-d6f7931f56b7.png" alt="图片"> </li>
</ol>
<a id="more"></a>
<h1 id="使用weexpack打包weex项目"><a href="#使用weexpack打包weex项目" class="headerlink" title="使用weexpack打包weex项目"></a>使用weexpack打包weex项目</h1><blockquote>
<p>各种百度 ‘weex打包’ ‘如何打包weex apk’ ‘weex 发布 apk’  未果<br>最后在<a href="https://github.com/weexteam/article/issues/4#issuecomment-268810351" target="_blank" rel="external">这里</a>看到了这玩意T_T</p>
</blockquote>
<h2 id="weexpack-介绍-更多详情见Github"><a href="#weexpack-介绍-更多详情见Github" class="headerlink" title="weexpack 介绍 更多详情见Github"></a>weexpack 介绍 <a href="https://github.com/weexteam/weex-pack/blob/master/README.md" target="_blank" rel="external">更多详情见Github</a></h2><p>weexpack 是 weex 新一代的工程开发套件，是基于weex快速搭建应用原型的利器。它能够帮助开发者通过命令行创建weex工程，添加相应平台的weex app模版，并基于模版从本地、GitHub 或者  weex 应用市场安装插件，快速打包 weex 应用并安装到手机运行，对于具有分享精神的开发者而言还能够创建weex插件模版并发布插件到weex应用市场。</p>
<h2 id="开始我的安装"><a href="#开始我的安装" class="headerlink" title="开始我的安装"></a>开始我的安装</h2><ol>
<li><p>安装Android需要的环境：android环境折腾可参考<a href="http://www.cnblogs.com/morang/p/react-native-java-build.html" target="_blank" rel="external">windows下react-native环境搭建</a>    </p>
</li>
<li><p>安装weexpack：<a href="https://github.com/weexteam/weex-pack" target="_blank" rel="external">项目地址</a><br> <code>cnpm install -g weexpack</code>            </p>
</li>
<li>初始化一个weexpack程序：<br> <code>weexpack init dsb-weexpack</code></li>
<li>还原依赖：<br> <code>cnpm install</code></li>
<li>如果没有安装android SDK的好需要去安装sdk，安装好了就添加平台到项目：<code>weexpack platform add android</code><br>  <img src="https://dn-coding-net-production-pp.qbox.me/07d500bd-b616-49b2-9d30-68ef068ff51b.png" alt="图片"> </li>
<li><p>修改gradle-wrapper.properties文件gradle下载地址distributionUrl值为：<code>distributionUrl=file:///F:/gradle-2.14.1-all.zip</code></p>
</li>
<li><p>打包编译：<br> <code>weexpack build android</code>        </p>
</li>
<li>苦等ing……</li>
<li>两天过去了，于3月1日清晨成功下载完毕，且没有挂vpn~<br>生成文件如图所示<br><img src="http://images2015.cnblogs.com/blog/662652/201703/662652-20170301074624704-1290399162.png" alt=""></li>
<li>在夜神模拟器运行：首先使用adb连接到夜神模拟器<code>adb connect 127.0.0.1:62001</code>,再执行<code>weexpack run android</code>即可在模拟器中运行<br><img src="http://images2015.cnblogs.com/blog/662652/201703/662652-20170301075210157-753921257.png" alt=""></li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="https://github.com/weexteam/weex-pack" target="_blank" rel="external">https://github.com/weexteam/weex-pack</a><br><a href="https://github.com/vczero/weex-learning" target="_blank" rel="external">https://github.com/vczero/weex-learning</a><br><a href="https://github.com/apache/incubator-weex" target="_blank" rel="external">https://github.com/apache/incubator-weex</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 程序猿之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react学习记录]]></title>
      <url>/2017/05/14/07-react-study-record/</url>
      <content type="html"><![CDATA[<h1 id="react学习记录"><a href="#react学习记录" class="headerlink" title="react学习记录"></a>react学习记录</h1><h2 id="2017-01-08"><a href="#2017-01-08" class="headerlink" title="2017.01.08"></a>2017.01.08</h2><ol>
<li><p>在iOS上使用http链接的图片地址可能不会显示，参见<a href="https://segmentfault.com/a/1190000002933776" target="_blank" rel="external">这篇说明</a>修改。        </p>
</li>
<li><p>需要的组件都要在顶部引用。<br><img src="https://dn-coding-net-production-pp.qbox.me/981a29a8-2574-4e04-9432-d86f61132054.png" alt="图片"> </p>
</li>
<li><p>不能直接在组件外面写样式，需要显示传递，样式名按骆驼命名法书写<br>顺序声明和使用style属性，以借鉴CSS中的“层叠”做法（即后声明的属性会覆盖先声明的同名属性）       </p>
</li>
<li><p>Flexbox布局的说明 <a href="http://reactnative.cn/docs/0.40/layout-props.html" target="_blank" rel="external">http://reactnative.cn/docs/0.40/layout-props.html</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 程序猿之路 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[从零开始在win10系统搭建react-native开发环境]]></title>
      <url>/2017/05/14/05-react-native-java-build/</url>
      <content type="html"><![CDATA[<h1 id="win10-react-native环境搭建"><a href="#win10-react-native环境搭建" class="headerlink" title="win10 react-native环境搭建"></a>win10 react-native环境搭建</h1><hr>
<blockquote>
<p>首先不得不先吐槽一下自己，一个坑总是踩很多次，且乐此不疲。<br>咋办? 写博客记录记录呗。               </p>
</blockquote>
<h2 id="零、记录的点"><a href="#零、记录的点" class="headerlink" title="零、记录的点"></a>零、记录的点</h2><ol>
<li><p>Java环境的下载与配置</p>
</li>
<li><p>Android环境的下载与配置</p>
</li>
<li><p>Node环境的下载与配置</p>
</li>
<li><p>创建第一个react-native应用  </p>
</li>
</ol>
<p>最终能够达到的目的：在手机上能够运行第一个React-Native应用~</p>
<p>以备后用，已将安装包上传到了<a href="http://pan.baidu.com/s/1dFgLPuT" target="_blank" rel="external">网盘</a> 密码：bqbc              </p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/f5d0a6f2-9324-4899-9378-0da577a5b33d.png" alt="图片"><br><a id="more"></a></p>
<h2 id="一、Java环境的下载与配置"><a href="#一、Java环境的下载与配置" class="headerlink" title="一、Java环境的下载与配置"></a>一、Java环境的下载与配置</h2><p>记录下Java里面的三个<a href="http://blog.csdn.net/songkai320/article/details/51819046" target="_blank" rel="external">术语理解</a>    </p>
<h4 id="JDK是什么？"><a href="#JDK是什么？" class="headerlink" title="JDK是什么？"></a>JDK是什么？</h4><blockquote>
<p>答曰：JDK乃【Java开发工具包】 (Java Development Kit ) 的缩写,<br>是一种用于构建在 Java 平台上发布的应用程序、applet 和组件的开发环境</p>
</blockquote>
<h3 id="JRE是什么？"><a href="#JRE是什么？" class="headerlink" title="JRE是什么？"></a>JRE是什么？</h3><blockquote>
<p>答曰：JRE乃【Java运行环境】(Java Runtime Environment)的缩写,<br>其包含JVM标准实现及Java核心类库</p>
</blockquote>
<h3 id="JVM是什么？"><a href="#JVM是什么？" class="headerlink" title="JVM是什么？"></a>JVM是什么？</h3><blockquote>
<p>答曰：JVM是【Java虚拟机】(Java Virtual Machine)的缩写</p>
</blockquote>
<h3 id="下载安装配置JDK"><a href="#下载安装配置JDK" class="headerlink" title="下载安装配置JDK"></a>下载安装配置JDK</h3><ol>
<li>到<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">官网</a> 或者<a href="http://jdk.android-studio.org/" target="_blank" rel="external">android-studio</a>下载JDK                </li>
<li>安装JDK，我安装到的<code>D:\Software\JavaJdk</code> </li>
<li>必须得配置环境变量滴<br> ①java_home:<code>D:\Software\JavaJdk</code><br> ②classpath(.;开头):<code>.;%java_home%\lib\dt.jar;%java_home%\lib\tools.jar</code><br> ③追加path变量的值:<code>;%java_home%\bin</code><br><img src="https://dn-coding-net-production-pp.qbox.me/d5996b21-1403-4e67-ba41-8e647ea2cc2b.png" alt="图片"> </li>
</ol>
<h2 id="二、Android环境的下载与配置"><a href="#二、Android环境的下载与配置" class="headerlink" title="二、Android环境的下载与配置"></a>二、Android环境的下载与配置</h2><h3 id="下载Android-SDK"><a href="#下载Android-SDK" class="headerlink" title="下载Android SDK"></a>下载Android SDK</h3><hr>
<p>到<a href="http://tools.android-studio.org/index.php/sdk" target="_blank" rel="external">android-studio</a>下载SDK。<br>运行installer_r24.4.1-windows.exe安装、或zip解压出来的<code>SDK Manager.exe</code>        </p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/407332aa-a5ee-40da-aefa-1de323e107fd.png" alt="图片"> </p>
<p>然后我安装了以下这些包(我的react-native版本是0.40.0)</p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/e47c55bd-0f90-443c-bf16-c8860c8b726e.png" alt="图片">     </p>
<h3 id="SDKManager使用说明："><a href="#SDKManager使用说明：" class="headerlink" title="SDKManager使用说明："></a>SDKManager使用说明：</h3><hr>
<p>被镜像坑了，所以不推荐镜像，直接修改hosts文件就成—&gt;<a href="https://laod.cn" target="_blank" rel="external">去找最新的hosts</a><br>镜像地址—&gt;<a href="http://tools.android-studio.org/index.php/proxy" target="_blank" rel="external">去找最新的镜像地址</a>    </p>
<h3 id="镜像使用说明"><a href="#镜像使用说明" class="headerlink" title="镜像使用说明"></a>镜像使用说明</h3><hr>
<p>使用镜像安装不了23.0.1的同学趁早换hosts的方式或者挂vpn。     </p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/a37b209b-56ba-4329-a044-a55429ef75b8.png" alt="图片">     </p>
<p>科学上网还是得备个vpn呐~~~     </p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/d6a81e25-2b2c-40a0-bd85-dd70644f5de6.png" alt="图片"> </p>
<h3 id="SDK包下好了，接下来就配置系统环境变量吧"><a href="#SDK包下好了，接下来就配置系统环境变量吧" class="headerlink" title="SDK包下好了，接下来就配置系统环境变量吧"></a>SDK包下好了，接下来就配置系统环境变量吧</h3><hr>
<p>①ANDROID_HOME:<code>D:\Software\JavaAndroidSdk</code><br>②追加path变量的值:<code>%ANDROID_HOME%\platforms\;%ANDROID_HOME%\platform-tools\;%ANDROID_HOME%\tools\;%ANDROID_HOME%;</code><br>我的Path图</p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/d63ba276-04c3-44df-bb6e-fd6b41972e1a.png" alt="图片"> </p>
<h3 id="测试Java环境，Android环境"><a href="#测试Java环境，Android环境" class="headerlink" title="测试Java环境，Android环境"></a>测试Java环境，Android环境</h3><hr>
<p><img src="https://dn-coding-net-production-pp.qbox.me/2c7e4384-a916-42af-9cff-51701bd7c882.png" alt="图片">     </p>
<p>失败自行回退检查~~</p>
<h2 id="三、安装node-js"><a href="#三、安装node-js" class="headerlink" title="三、安装node.js"></a>三、安装node.js</h2><p>node官网历史版本修改下载链接的值就能下载历史版本了<br>如：我使用的是版本是<a href="https://nodejs.org/dist/v6.2.0/node-v6.2.0-x64.msi" target="_blank" rel="external">V6.2.0</a><br>然后就是node的一些设置了<br><code>npm config set prefix &quot;D:\Program Files\nodejs\node_global&quot;</code>  //设置全局包目录<br><code>npm config set cache &quot;D:\Program Files\nodejs\node_cache&quot;</code>    //设置缓存目录<br><code>npm config set registry https://registry.npm.taobao.org&quot;</code>     //设置淘宝镜像</p>
<p>之前有安装过node，卸载旧版重新安装到之前的目录就==升级了<br>npm升级命令<code>npm update</code></p>
<h2 id="四、创建第一个在手机上运行的react-native应用"><a href="#四、创建第一个在手机上运行的react-native应用" class="headerlink" title="四、创建第一个在手机上运行的react-native应用"></a>四、创建第一个在手机上运行的react-native应用</h2><ol>
<li>启动CMD定位到开发目录：例<code>F:\ReactDemo</code></li>
<li>全局安装<a href="https://github.com/facebook/react-native" target="_blank" rel="external"><code>npm install -g react-native-cli</code></a></li>
<li>初始化一个项目：<code>react-native init yimoapp</code></li>
<li><code>cd yimoapp</code></li>
<li>运行packager：<code>react-native start</code>  <blockquote>
<p>如果你碰到了ERROR Watcher took too long to load的报错，请尝试将这个文件中的MAX_WAIT_TIME值改得更大一些 (文件在node_modules/react-native/目录下)。<br>成功运行这时候可以用浏览器访问<bdi>http//localhost:8081/index.android.bundle?platform=android</bdi>查看服务端是否已成功启动</p>
</blockquote>
</li>
<li>真机运行,使用usb连接手机，开启USB调试权限</li>
<li>查看连接的设备：<code>adb devices</code><br>  <img src="https://dn-coding-net-production-pp.qbox.me/6130f787-3bf3-437b-a353-746550210595.png" alt="图片"> </li>
<li><p><code>react-native run-android</code>构建工程并自动安装到手机</p>
<blockquote>
<p>不要慌，先做点准备工作。<a href="http://gradle.android-studio.org/" target="_blank" rel="external">手动下载gradle-2.4-all.zip</a>到本地<br>修改 <code>F:\ReactDemo\yimoapp\android\gradle\wrapper\gradle-wrapper.properties</code>文件的<code>distributionUrl</code>配置为[本地的gradle-2.4-all.zip路径]以使其可离线下载<br><img src="https://dn-coding-net-production-pp.qbox.me/7bf85be0-1f5a-4ec2-be7a-ba93e2740b8f.png" alt="gradle-2.4-all配置图"><br><img src="https://dn-coding-net-production-pp.qbox.me/adf94677-334f-4832-aed5-46f9d1cbac08.png" alt="成功离线下载"> </p>
</blockquote>
</li>
<li><p>包安装得差不多的时候会提示你安装应用<br> <img src="https://dn-coding-net-production-pp.qbox.me/5772db37-212f-4d62-b85f-9182d228dab7.png" alt="图片"><br> 可能会有一个这样的错误，奇怪的是第一次安装有,这一次安装就没有遇到了。</p>
<p>  <img src="https://dn-coding-net-production-pp.qbox.me/495d3c84-c3e8-49d3-9bc2-c24f5cd2e27d.png" alt="图片"><br> 将android/build.gradle文件中的 classpath ‘com.android.tools.build:gradle:1.3.1’ 改为 classpath ‘com.android.tools.build:gradle:1.2.3’ 。猜测是插件包不兼容导致。</p>
</li>
<li><p>解决白屏问题<br>找到并开启应用的悬浮窗权限,以mui8.1为例，设置-&gt;授权管理-&gt;应用权限管理-&gt;yimoapp-&gt;勾选显示浮窗权限<br>然后再次打开yimoapp。我去。这次来个大红色的错误了</p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/bbc9f9bd-a116-4e9f-a1cc-f439cd7266cc.png" alt="图片"> </p>
<p>咋办。摇一摇说不定有奇迹</p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/4ea624fe-1062-452e-b0c2-6e91b84202b1.png" alt="图片"><br><img src="https://dn-coding-net-production-pp.qbox.me/835cf850-602f-47c7-8d67-4bb5bb0225c9.png" alt="图片"> </p>
<p>在回退刷新前。我去改了改<code>index.android.js</code>，好了回到页面摇一摇然后刷新    </p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/180e6277-28ea-4f81-afdb-c4d379db529b.png" alt="图片">         </p>
</li>
</ol>
<h2 id="总结与收获"><a href="#总结与收获" class="headerlink" title="总结与收获"></a>总结与收获</h2><p>总结是很有必要的。<br>有很多问题是在Java和Android环境没有弄好的情况下会出现的。<br>参考文章：</p>
<ol>
<li><a href="http://www.tuicool.com/articles/26byiuZ" target="_blank" rel="external">http://www.tuicool.com/articles/26byiuZ</a> 这里面的错我也都遇到过~~</li>
<li><a href="http://www.cnblogs.com/suxun/p/5220564.html" target="_blank" rel="external">http://www.cnblogs.com/suxun/p/5220564.html</a> 有配置模拟器的</li>
</ol>
<p>一天就这样结束，一天就这样开始。</p>
]]></content>
      
        <categories>
            
            <category> 程序猿之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用node自动生成html并调用cmd命令提交代码到仓库]]></title>
      <url>/2017/05/14/04-node-cmd-git/</url>
      <content type="html"><![CDATA[<h1 id="生成html提交到git仓库"><a href="#生成html提交到git仓库" class="headerlink" title="生成html提交到git仓库"></a>生成html提交到git仓库</h1><blockquote>
<p>基于目前的express博客,写了一点代码,通过request模块来请求站点，将html保存到coding-pages目录，复制静态文件夹到coding-pages,最后使用node的child_process模块执行cmd命令提交到仓库~~<br><a id="more"></a></p>
<h2 id="1-发送http请求"><a href="#1-发送http请求" class="headerlink" title="1. 发送http请求"></a>1. 发送http请求</h2><hr>
<pre><code>var request = require(&apos;request&apos;);
var options = {
    url: url,
    encoding: null,
    headers: { &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Macintosh; 
    Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.65 Safari/537.36&apos; }
};
request(options, function (error, response, body) {
    //请求的回调，编码问题使用iconv模块解决
    //var iconv = require(&apos;iconv-lite&apos;);
    //var html=iconv.decode(body,&apos;utf-8&apos;);
    //若是需要解析html则可以使用cheerio模块
    //var cheerio=require(&apos;cheerio&apos;).load(html,{decodeEntities: false});
    //然后就可以像jqueryy一样去解析html了。
    //cheerio(&apos;选择器&apos;);
});
</code></pre><p>然后就可以愉快的抓数据了。之前也写过基于request，iconv，cheerio,schedule(定时调度模块)写了一个抓取的<a href="https://coding.net/u/yimocoding/p/YFKDataGrab/git" target="_blank" rel="external">框架</a> </p>
</blockquote>
<h2 id="2-保存html到目录"><a href="#2-保存html到目录" class="headerlink" title="2.  保存html到目录   "></a>2.  保存html到目录   </h2><p>得到url的路径部分(除去域名)，即：/index.html,/msg.html…<br>现在只需要根据这个路径和获取到的html保存即可<br>此时有了保存的路径和内容，保存还不小事一桩么。如下。    </p>
<pre><code>function writeText(pathName,content){   
    var dir= pathHelper.dirname(pathName);//获取到路径中的目录
    fs.exists(dir, function (exists) {//如果不存在则创建目录
        if(exists==false){
            fs.mkdir(dir);
        }
    });
    fs.writeFile(pathName, content, function (err) {//写入内容
        if (err){
            console.log(pathName+&apos;生成失败&apos;);
        }
    });
}
</code></pre><h2 id="3-使用node执行-bat文件复制静态文件到coding-pages目录"><a href="#3-使用node执行-bat文件复制静态文件到coding-pages目录" class="headerlink" title="3. 使用node执行.bat文件复制静态文件到coding-pages目录"></a>3. 使用node执行.bat文件复制静态文件到coding-pages目录</h2><blockquote>
<p>复制目录可以使用<a href="https://coding.net/u/yimocoding/p/yimocoding/git/blob/server/website/utils/dirHelper.js" target="_blank" rel="external">async模块实现的目录操作</a><br>调用copyDir方法即可。<br>也可以使用child_process模块来调用cmd命令实现     </p>
</blockquote>
<p>注：直接使用require(‘child_process’).exec 执行xcopy并不能复制目录，需要一种折中的方式<br>如下：         </p>
<pre><code>var exec = require(&apos;child_process&apos;).exec;
var execbat = __dirname + &apos;\\exec.bat&apos;;
//1. 创建复制脚本
commonHelper.writeText(execbat, &apos;xcopy F:\\CodingRepos\\yimocoding\\coding-pages\\tag F:\\CodingRepos\\yimocoding\\coding-pages\\tag3 /s /e /Q /Y /I&apos;);
//2.执行批处理复制目录
exec(execbat, function (err, stdout, stderr) {
    if (err) {
        console.log(err);
    }
    else{
        console.log(&apos;复制成功&apos;);
    }
});
//3.删除批处理文件
exec(&apos;del &apos; + execbat, function (err, stdout, stderr) {
    if (err) {
        console.log(err);
    }else{
        console.log(&apos;删除脚本成功&apos;);
    }
})
</code></pre><h2 id="4-啥？怎么提交到git"><a href="#4-啥？怎么提交到git" class="headerlink" title="4. 啥？怎么提交到git"></a>4. 啥？怎么提交到git</h2><p>运行环境安装好。能从cmd命令提交(配置环境变量)<br>然后，看代码呗~~</p>
<pre><code>var cmds = [
    &apos;git add *&apos;,
    &apos;git commit -m &quot;提交。。。&quot;&apos;,
    &apos;git push&apos;
]
cmds.forEach(function (cmd, i) {
    setTimeout(function () {
        console.log(cmd);
        exec(cmd, function (err, stdout, stderr) {
            if (err) {
                console.log(err);
            }
        });
    }, i * 1000);
})
</code></pre><p>写文章还是挺累的。但是把用到的东西记录下来是有必要的。文笔欠佳，然记录一二也是挺好滴。</p>
]]></content>
      
        <categories>
            
            <category> 程序猿之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017，我迈出了第一步]]></title>
      <url>/2017/05/14/03-yimo-blogs-v3/</url>
      <content type="html"><![CDATA[<h1 id="博客满血复活了，啦啦啦"><a href="#博客满血复活了，啦啦啦" class="headerlink" title="博客满血复活了，啦啦啦"></a>博客满血复活了，啦啦啦</h1><blockquote>
<p>不知不觉天就亮了，2017年的第一步也随着朝霞的升起而迈出。<a href="http://www.yimo.link/" target="_blank" rel="external">http://www.yimo.link/</a> 我的博客又活过来了;<br>第一版是在2015,第二版是在2016，第三版即这一版在今天2017年1月1日;<br>每一个版本都收获了许多，成长了许多，让自己知道幸苦是没有白费的;<br>从第一版的后台使用angularjs+webapi的快速开发，到第二版的asp.net mvc的正确使用姿势，再到第三版的node-express-jshtml。<br>踩了无数的坑，熬了无数的夜，做出东西了，那无与伦比的成就感。哈哈哈哈哈哈</p>
<p>只有不断的尝试，才会有所获，有所得。<br><a id="more"></a></p>
<h2 id="回首2016，我还做了这些玩意"><a href="#回首2016，我还做了这些玩意" class="headerlink" title="回首2016，我还做了这些玩意"></a>回首2016，我还做了这些玩意</h2></blockquote>
<p>一、 尝试着搭建了一个asp.net mvc的框架：<a href="https://coding.net/u/yimocoding/p/YimoFramework/git" target="_blank" rel="external">YimoFramework源码</a><br>二、 C#写的一个自动签到的服务：<a href="https://coding.net/u/yimocoding/p/AutomaticSignService/git" target="_blank" rel="external">AutomaticSignService源码</a><br>三、 node写的一个抓数据的程序：<a href="https://coding.net/u/yimocoding/p/YFKDataGrab/git" target="_blank" rel="external">YFKDataGrab源码</a><br>四、 用vue2.0+mui3.3写了一个导航的App：<a href="https://coding.net/u/yimocoding/p/vue-mui-app/git" target="_blank" rel="external">vue-mui-app源码</a> <a href="http://app.yimo.link/" target="_blank" rel="external">http://app.yimo.link/</a><br>五、 用vue2.0+layui封装了一些组件，后面做博客的后台管理：<a href="https://coding.net/u/yimocoding/p/vue-layui/git" target="_blank" rel="external">vue-layui源码</a> <a href="http://vue-layui.yimo.link/#/admin" target="_blank" rel="external">http://vue-layui.yimo.link/#/admin</a><br>六、node-express+jshtml写的博客站点：<a href="https://coding.net/u/yimocoding/p/yimocoding/git" target="_blank" rel="external">yimocoding源码</a> <a href="http://www.yimo.link" target="_blank" rel="external">http://www.yimo.link</a></p>
<p>如图图所示，2016结束了，2017，迎接新的改变吧。<br> <img src="https://dn-coding-net-production-pp.qbox.me/49a0bec8-54d6-48eb-a256-81369b7b4835.png" alt="图片"> </p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/662ab51a-ecf8-4d2d-a7aa-1bac64c4067b.png" alt="图片"> </p>
<hr>
<p>等等，还没完呢。踩的坑还没有记录呢   </p>
<ol>
<li>问：jshtml文件没有语法高亮，看着好难受怎么办   </li>
</ol>
<p>答： vscode是可以配置文件管理的,文件-》首选项-》用户设置-》设置files.associations即可<br> <img src="https://dn-coding-net-production-pp.qbox.me/0d6ae02c-9ee0-4faa-9424-4bbed0c646d0.png" alt="图片"> </p>
<ol>
<li>问：写node的使用，node_modules如何不让他提交到git，不包含到工作区？</li>
</ol>
<p>答: 1问配置.gitignore文件，添加一行<code>node_modules/</code>即可;vscode可以设置files.exclude排除文件/夹   </p>
<ol>
<li>问：nginx到底要怎么配置反向代理,又如何再windows服务器上使用nginx后不影响存在的iis站点（公用80）</li>
</ol>
<p>答：访问www.yimo.link会经由nginx转发到代理地址上，如果服务器使用iis就将iis中的站点重新配置其他端口，然后一个站点配置一个server即可</p>
<pre><code>server {
    listen       80;
    server_name  www.yimo.link;//解析的域名
location / {
    proxy_pass http://127.0.0.1:2333; //代理的地址/域名+端口的形式也可以
}       
</code></pre><p>over，发布，睡觉。</p>
]]></content>
      
        <categories>
            
            <category> 程序猿之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 闲言碎语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[asp.net mvc项目自定义区域]]></title>
      <url>/2017/05/14/02-mvc-custom-areas/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>直接上干货就是，就不废话了。<br>使用场景：分离模块，多站点等~~   </p>
<h2 id="一、分离模块"><a href="#一、分离模块" class="headerlink" title="一、分离模块"></a>一、分离模块</h2><p>自定义视图引擎，设置视图路径格式<br>项目结构图<br><img src="http://images2015.cnblogs.com/blog/662652/201608/662652-20160810235943465-541781227.png" alt=""><br><a id="more"></a></p>
<h1 id="1-Code-在Global-asax-Application-Start方法中添加自定义的视图引擎"><a href="#1-Code-在Global-asax-Application-Start方法中添加自定义的视图引擎" class="headerlink" title="1.Code: 在Global.asax Application_Start方法中添加自定义的视图引擎"></a>1.Code: 在Global.asax Application_Start方法中添加自定义的视图引擎</h1></blockquote>
<pre><code>using System.Collections.Generic;
using System.Web.Mvc;
namespace MvcProjectMain.AreasViewEngine
{

    /// &lt;summary&gt;       
    /// 自定义视图引擎
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;
    ///  ViewEngines.Engines.Add(new MvcProjectMain.AreasViewEngine.ThemableRazorViewEngine());
    /// &lt;/remarks&gt;
    public class ThemableRazorViewEngine : VirtualPathProviderViewEngine
    {
        //所有区域分离到Modules文件夹,{2}为区域名
        public ThemableRazorViewEngine()
        {
            ViewEngines.Engines.Clear();
            AreaViewLocationFormats = new[]
            {
            &quot;~/Modules/{2}/Views/{1}/{0}.cshtml&quot;, 
            &quot;~/Modules/{2}/Views/Shared/{0}.cshtml&quot;,
            };

            AreaMasterLocationFormats = new[]
            {
            &quot;~/Modules/{2}/Views/{1}/{0}.cshtml&quot;, 
            &quot;~/Modules/{2}/Views/Shared/{0}.cshtml&quot;,
            };

            AreaPartialViewLocationFormats = new[]
            {
            &quot;~/Modules/{2}/Views/{1}/{0}.cshtml&quot;, 
            &quot;~/Modules/{2}/Views/Shared/{0}.cshtml&quot;, 
            };

            ViewLocationFormats = new[]
            {
            &quot;~/Views/{1}/{0}.cshtml&quot;, 
            &quot;~/Views/Shared/{0}.cshtml&quot;,
            };

            MasterLocationFormats = new[]
            {
            &quot;~/Views/{1}/{0}.cshtml&quot;, 
            &quot;~/Views/Shared/{0}.cshtml&quot;, 
            };
            PartialViewLocationFormats = new[]
            {
            &quot;~/Views/{1}/{0}.cshtml&quot;, 
            &quot;~/Views/Shared/{0}.cshtml&quot;, 
            };

            FileExtensions = new[] { &quot;cshtml&quot; };
        }

        protected override IView CreatePartialView(ControllerContext controllerContext, string partialPath)
        {
            string layoutPath = null;
            var runViewStartPages = false;
            IEnumerable&lt;string&gt; fileExtensions = base.FileExtensions;
            return new RazorView(controllerContext, partialPath, layoutPath, runViewStartPages, fileExtensions);
        }

        protected override IView CreateView(ControllerContext controllerContext, string viewPath, string masterPath)
        {
            string layoutPath = masterPath;
            var runViewStartPages = true;
            IEnumerable&lt;string&gt; fileExtensions = base.FileExtensions;
            return new RazorView(controllerContext, viewPath, layoutPath, runViewStartPages, fileExtensions);
        }
    }
}
</code></pre><p>2.Code:在Global.asax中添加注册区域–&gt;AreaRegistration.RegisterAllAreas();</p>
<pre><code>public class ThemesAreaRegistration : AreaRegistration
    {
        public override string AreaName
        {
            get
            {
                return &quot;MvcProjectThemes&quot;;
            }
        }

        public override void RegisterArea(AreaRegistrationContext context)
        {
            context.MapRoute(
                &quot;MvcProjectThemes&quot;,
                &quot;MvcProjectThemes/{controller}/{action}/{id}&quot;,
                new { controller = &quot;Home&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional, },
                namespaces: new string[] { &quot;MvcProjectThemes.Controllers&quot; }
            );
        }
    }
</code></pre><p>3.Code:注册主项目MvcProjectMain的路由 RouteConfig.RegisterRoutes(RouteTable.Routes);</p>
<pre><code>namespace MvcProjectMain
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute(&quot;{resource}.axd/{*pathInfo}&quot;);

            routes.MapRoute(
                name: &quot;Default&quot;,
                url: &quot;{controller}/{action}/{id}&quot;,
                defaults: new { controller = &quot;Home&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional },
                namespaces: new string[] { &quot;MvcProjectMain.Controllers&quot; }
            );
        }
    }
}
</code></pre><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>主要代码就是步骤1中的ThemableRazorViewEngine.cs类。自定义查找路径，其他的都是MVC的基础知识了,不懂自行查阅资料</p>
]]></content>
      
        <categories>
            
            <category> 程序猿之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随便记录下系列 - node->express]]></title>
      <url>/2017/05/14/01-node-express/</url>
      <content type="html"><![CDATA[<h1 id="随便记录下系列-node-gt-express"><a href="#随便记录下系列-node-gt-express" class="headerlink" title="随便记录下系列 - node-&gt;express"></a>随便记录下系列 - node-&gt;express</h1><blockquote>
<p>文章用啥写？→<em>→ VsCode。<br>代码用啥写？→</em>→ VsCode。<br>编辑器下载：<a href="http://pan.baidu.com/s/1qYpmzpE" target="_blank" rel="external">VsCode</a>  </p>
</blockquote>
<h2 id="一、windows下安装node-js环境：-下载地址"><a href="#一、windows下安装node-js环境：-下载地址" class="headerlink" title="一、windows下安装node.js环境： 下载地址"></a>一、windows下安装node.js环境： <a href="http://nodejs.cn/download/" target="_blank" rel="external">下载地址</a></h2><hr>
<blockquote>
<p>相比以前搭过的服务端语言的环境,node环境的安装简直是业界良心<br>即使第一次折腾了2天，第二次折腾了2小时，第三次折腾了2分钟</p>
</blockquote>
<ol>
<li>下载其他版本只需要替换下载链接 <code>https://nodejs.org/dist/v6.2.0/node-v6.2.0-x64.msi</code> 的2个版本号6.2.0为你需要的版本即可   </li>
<li>尽量别把node安装在C盘(使用D:\Program Files\nodejs) </li>
<li>基础配置项(根据需要设置环境变量)<br> 设置全局安装包路径： <code>npm config set prefix &quot;D:\Program Files\nodejs\node_global</code><br> 设置缓存目录： <code>npm config set cache &quot;D:\Program Files\nodejs\node_cache</code><br> 设置淘宝镜像源： <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>    </li>
</ol>
<blockquote>
<p>PS： vue2.0用node-v4.5吧~，npm升级命令<code>npm update</code> 升级npm版本,若是不行则切换为32位版本的试试,再不行换个系统试试T-_-T</p>
</blockquote>
<a id="more"></a>
<h2 id="二、使用express"><a href="#二、使用express" class="headerlink" title="二、使用express"></a>二、使用express</h2><hr>
<h3 id="安装express-中文网"><a href="#安装express-中文网" class="headerlink" title="安装express 中文网"></a>安装express <a href="http://www.expressjs.com.cn/" target="_blank" rel="external">中文网</a></h3><blockquote>
<p>看文档！！！</p>
<ol>
<li>有网,有 node ,有 npm/cnpm/…</li>
<li>全局安装express： <code>npm install express -g</code></li>
<li>安装express应用生成器： <code>npm install express-generator -g</code></li>
<li>创建一个express(v4.14.0)应用： <code>express mydemo</code></li>
<li>启动应用： <code>npm start</code>  </li>
</ol>
</blockquote>
<h3 id="自动更新修改-supervisor"><a href="#自动更新修改-supervisor" class="headerlink" title="自动更新修改 supervisor"></a>自动更新修改 <a href="https://www.npmjs.com/package/supervisor" target="_blank" rel="external">supervisor</a></h3><hr>
<blockquote>
<p>运行起express应用,并做了一丁点修改后，习惯性保存后去刷新了页面，卧槽，【假装这是一张表情图】，左思右想百思不得其解~~~<br>于是百度 “<code>express 自动刷新</code>“,你以为出来了么？并没有~<br>那就换个词试试：”<code>express 修改更新</code>“,遂知<a href="https://www.npmjs.com/package/supervisor" target="_blank" rel="external">supervisor</a>~      </p>
</blockquote>
<ol>
<li>安装：<code>npm install supervisor -g</code></li>
<li>启动express：<code>supervisor ./bin/www</code></li>
<li>名字太长了~，改package.json-&gt;scripts-&gt;start配置啊：<code>{&quot;start&quot;: &quot;supervisor ./bin/www&quot;}</code>      </li>
<li>在正确的目录使用正确的姿势执行<code>npm start</code></li>
</ol>
<h3 id="修改模板引擎为jshtml"><a href="#修改模板引擎为jshtml" class="headerlink" title="修改模板引擎为jshtml"></a>修改模板引擎为<a href="https://github.com/elmerbulthuis/jshtml" target="_blank" rel="external">jshtml</a></h3><hr>
<blockquote>
<p>若要问我为什么，我只能说看着爽,即使jshtml最后一次更新在n年前~</p>
</blockquote>
<ol>
<li>安装<a href="https://github.com/elmerbulthuis/jshtml-express" target="_blank" rel="external"><code>jshtml-express</code></a>到项目：<code>npm install jshtml-express --save</code></li>
<li>在app.js设置模板引擎为jsthml<br> <code>app.engine(&#39;jshtml&#39;, require(&#39;jshtml-express&#39;));</code><br> <code>app.set(&#39;view engine&#39;, &#39;jshtml&#39;);</code></li>
<li>视图文件修改后缀名为.jshtml(.jshtml没高亮？把后缀改成cshtml写代码,然后修改vscode文件关联项：<code>files.associations</code>为<code>{&quot;*.jshtml&quot;:&quot;cshtml&quot;}</code>)</li>
<li>然后就去瞅文档吧。哈哈</li>
</ol>
<ul>
<li>路由中输出模型的时候需要用<code>res.locals = model;</code>输出模型，视图中使用<code>@locals</code>表示为模型</li>
<li>博客已使用express+jshtml：<a href="https://coding.net/u/yimocoding/p/yimocoding/git/tree/server/" target="_blank" rel="external">https://coding.net/u/yimocoding/p/yimocoding/git/tree/server/</a></li>
</ul>
<hr>
<p>博客园主页：<a href="http://www.cnblogs.com/morang/" target="_blank" rel="external">cnblogs.com</a><br>Coding主页：<a href="https://coding.net/u/yimocoding" target="_blank" rel="external">coding.net</a>      </p>
]]></content>
      
        <categories>
            
            <category> 程序猿之路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
