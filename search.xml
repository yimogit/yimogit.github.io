<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>使用travis-ci集成一个vue.js项目</title>
      <link href="/2017/07/24/%E4%BD%BF%E7%94%A8travis-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2github%E4%B8%8A%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
      <url>/2017/07/24/%E4%BD%BF%E7%94%A8travis-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2github%E4%B8%8A%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h1 id="travis-ci是什么？"><a href="#travis-ci是什么？" class="headerlink" title="travis-ci是什么？"></a>travis-ci是什么？</h1><blockquote><p>一个使用yaml格式配置用于持续集成完成自动化测试部署的开源项目<br>官网：<a href="https://travis-ci.org/" target="_blank" rel="noopener">https://travis-ci.org/</a></p></blockquote><h1 id="使用travis-ci集成vue-js项目"><a href="#使用travis-ci集成vue-js项目" class="headerlink" title="使用travis-ci集成vue.js项目"></a>使用travis-ci集成vue.js项目</h1><blockquote><p>首先，您需要一个github账号 and 一个vue.js项目~ 没有的话试试这个啊<a href="https://github.com/yimogit/metools" target="_blank" rel="noopener">metools</a></p></blockquote><h2 id="1-登录Github并拥有一个项目"><a href="#1-登录Github并拥有一个项目" class="headerlink" title="1. 登录Github并拥有一个项目"></a>1. 登录Github并拥有一个项目</h2><blockquote><p>登录<a href="https://github.com/" target="_blank" rel="noopener">github</a> 然后Star,Fork <a href="https://github.com/yimogit/metools" target="_blank" rel="noopener">metools</a><br>当然可以先去看看这个项目是啥..<a href="http://tools.yimo.link/" target="_blank" rel="noopener">http://tools.yimo.link/</a></p></blockquote><h2 id="2-前往travis-ci官网"><a href="#2-前往travis-ci官网" class="headerlink" title="2. 前往travis-ci官网"></a>2. 前往travis-ci官网</h2><blockquote><p>使用Github账号登录<br><img src="https://dn-coding-net-production-pp.qbox.me/add807a1-5617-4df6-ba0d-a63568bbffd6.png" alt="图片"></p></blockquote><a id="more"></a><h2 id="3-登录成功回到用户中心"><a href="#3-登录成功回到用户中心" class="headerlink" title="3. 登录成功回到用户中心"></a>3. 登录成功回到用户中心</h2><blockquote><p>默认会同步一部分仓库，如果太多的话需要点击Sync account进行同步<br><img src="https://dn-coding-net-production-pp.qbox.me/155adb08-745f-4937-ad64-15eae01ef7e3.png" alt="图片"> </p></blockquote><h2 id="4-开启对-metools-项目的集成并进入设置页面"><a href="#4-开启对-metools-项目的集成并进入设置页面" class="headerlink" title="4. 开启对 metools 项目的集成并进入设置页面"></a>4. 开启对 metools 项目的集成并进入设置页面</h2><blockquote><p><img src="https://dn-coding-net-production-pp.qbox.me/2e93e40d-35fb-44fe-a62e-0a96e258dcc2.png" alt="图片"><br>如下图所示，根据需要配置构建信息<br>添加github的Token到环境变量中，用户名，邮箱也可添加进去，这样配置文件中就可以使用了<br>生成Token见步骤5.因为github上面只能看到一次，所以在travis-ci中就可以显示出来以备后用<br><img src="https://dn-coding-net-production-pp.qbox.me/88ec5462-f9ff-499e-876d-38130df95840.png" alt="图片"><br>根据步骤6的配置，还需要添加一些环境变量使起更方便(地址别填错了)<br><img src="https://dn-coding-net-production-pp.qbox.me/eb84e86d-0119-49f4-b7b8-3f9a61995cb3.png" alt="图片"><br>图中配置依次为：</p><ol><li><code>GH_REF</code>：仓库地址</li><li><code>GH_TOKEN</code>：生成的令牌</li><li><code>P_BRANCH</code>：推送的pages分支</li><li><code>U_EMAIL</code>：邮箱</li><li><code>U_NAME</code>：名称</li></ol></blockquote><h2 id="5-Github生成访问令牌-即添加授权"><a href="#5-Github生成访问令牌-即添加授权" class="headerlink" title="5. Github生成访问令牌 (即添加授权)"></a>5. Github生成访问令牌 (即添加授权)</h2><blockquote><p>访问令牌的作用就是授权仓库操作权限 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a><br>Github&gt;settings&gt;Personal access tokens&gt; Generate new token &gt; Generate token&gt; Copy Token<br><img src="https://dn-coding-net-production-pp.qbox.me/05e1958b-cf92-46a5-897d-b5a276905cf6.png" alt="图片"> </p></blockquote><h2 id="6-travis-yml-文件的简单配置"><a href="#6-travis-yml-文件的简单配置" class="headerlink" title="6. .travis.yml 文件的简单配置"></a>6. .travis.yml 文件的简单配置</h2><blockquote><p><code>.travis.yml</code>文件的作用就是在代码提交的时候travis-ci会根据该配置文件执行配置的任务<br>在项目根目录中创建(或修改)<code>.travis.yml</code> 文件，其中<code>${环境变量}</code>为环境变量在travis中配置即可<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="comment"># nodejs版本</span></span><br><span class="line"><span class="attr">node_js:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">'6'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Travis-CI Caching</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  directories:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># S: Build Lifecycle</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无其他依赖项所以执行npm run build 构建就行了</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cd</span> <span class="string">./dist</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"$&#123;U_NAME&#125;"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"$&#123;U_EMAIL&#125;"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">commit</span> <span class="bullet">-m</span> <span class="string">"Update tools"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">push</span> <span class="bullet">--force</span> <span class="bullet">--quiet</span> <span class="string">"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;"</span> <span class="attr">master:$&#123;P_BRANCH&#125;</span></span><br><span class="line"><span class="comment"># E: Build LifeCycle</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr"> global:</span></span><br><span class="line">   <span class="comment"># 我将其添加到了travis-ci的环境变量中</span></span><br><span class="line">   <span class="comment">#- GH_REF: github.com/yimogit/metools.git</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="7-自动构建项目"><a href="#7-自动构建项目" class="headerlink" title="7. 自动构建项目"></a>7. 自动构建项目</h2><p>修改完成，并推送到github后，就可以在travis-ci.org中看到项目开始构建了(以后每次推送代码到仓库后都将会自动构建项目)<br><img src="https://dn-coding-net-production-pp.qbox.me/8347d189-acf9-471f-8686-8942910494dc.png" alt="图片"><br>构建完成日志<br><img src="https://dn-coding-net-production-pp.qbox.me/57f637e6-6226-4e99-b7d4-582811195582.png" alt="图片"></p><p>构建完成。在设置中可以看到默认已经将<code>gh-pages</code>分支部署到pages，访问https://用户名.github.io/metools/即可预览效果。<br><img src="https://dn-coding-net-production-pp.qbox.me/5c3f81fd-8044-4a45-962b-78d5ec212daa.png" alt="图片"> </p><p>若构建失败，可以通过travis-ci中项目面板右上角的 <code>Restart build</code> 重新构建<br><img src="https://dn-coding-net-production-pp.qbox.me/8612493c-d956-4845-a4fd-88c562ef35ba.png" alt="图片"></p>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持续集成 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asp.net mvc项目实记</title>
      <link href="/2017/07/19/asp.net%20mvc%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%B0/"/>
      <url>/2017/07/19/asp.net%20mvc%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote><p>百度这些东西，还是会浪费了一些不必要的时间，记录记录以备后续</p></blockquote><h2 id="一、开启伪静态"><a href="#一、开启伪静态" class="headerlink" title="一、开启伪静态"></a>一、开启伪静态</h2><blockquote><p>如果不在web.config中配置管道开关则伪静态无效</p></blockquote><ol><li><p>首先在RouteConfig.cs中中注册路由      </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">routes.MapRoute(</span><br><span class="line">    name: &quot;index&quot;,</span><br><span class="line">    url: &quot;index.html&quot;,</span><br><span class="line">    defaults: new &#123; controller = &quot;Home&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>在web.config中的system.webServer节点添加配置项         </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.webServer&gt;</span><br><span class="line">    &lt;modules runAllManagedModulesForAllRequests=&quot;true&quot; /&gt;</span><br><span class="line">&lt;/system.webServer&gt;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h2 id="二、使用Bundle压缩css-js"><a href="#二、使用Bundle压缩css-js" class="headerlink" title="二、使用Bundle压缩css,js"></a>二、使用Bundle压缩css,js</h2><ol><li>添加Nuget包<code>Microsoft.AspNet.Web.Optimization</code>      </li><li>配置BundleConfig.cs文件      </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class BundleConfig</span><br><span class="line">&#123;</span><br><span class="line">    public static void RegisterBundles(BundleCollection bundles)</span><br><span class="line">    &#123;</span><br><span class="line">        //若runAllManagedModulesForAllRequests未配置则不不能使用.css，.js等带后缀的静态资源名称，反之即可</span><br><span class="line">        bundles.Add(new StyleBundle(&quot;~/Content/maincss&quot;).Include(</span><br><span class="line">            &quot;~/Content/assets/css/main.css&quot;,</span><br><span class="line">            &quot;~/Content/assets/css/md.css&quot;</span><br><span class="line">            ));</span><br><span class="line">        bundles.Add(new ScriptBundle(&quot;~/Content/listjs&quot;).Include(</span><br><span class="line">            &quot;~/Content/assets/js/xss.js&quot;,</span><br><span class="line">            &quot;~/Content/assets/js/meMd.js&quot;,</span><br><span class="line">            &quot;~/Content/assets/js/marked.js&quot;,</span><br><span class="line">            &quot;~/Content/assets/js/dragscroll.js&quot;</span><br><span class="line">            ));</span><br><span class="line">        //强制开启压缩，或者由system.web节点的compilation【debug】值控制(即debug模式下不压缩合并)</span><br><span class="line">        //BundleTable.EnableOptimizations = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在Global.asax的Application_Start()中注册配置<br> <code>BundleConfig.RegisterBundles(BundleTable.Bundles);</code></li><li>需要注意的地方      <ol><li>StyleBundle构造函数中的路径为虚拟路径，即不用关心目录是否存在     </li><li>若web.config中配置了<code>&lt;modules runAllManagedModulesForAllRequests=&quot;true&quot; /&gt;</code>，则序StyleBundle传递的虚拟路径可以包含后缀名.css/.js    </li><li>Bundle压缩合并功能可由web.config中的system.web节点下<code>&lt;compilation debug=&quot;false&quot; targetFramework=&quot;4.5&quot; /&gt;</code>的debug值控制，或者在RegisterBundles方法中强制启用：<code>BundleTable.EnableOptimizations = true;</code>      </li></ol></li></ol><h2 id="三、layui富文本编辑器中的文件上传接口"><a href="#三、layui富文本编辑器中的文件上传接口" class="headerlink" title="三、layui富文本编辑器中的文件上传接口"></a>三、layui富文本编辑器中的文件上传接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">public class FileController : Controller</span><br><span class="line">&#123;</span><br><span class="line">    private static readonly string[] ImageFileExtensions = GetConfigValue(&quot;ImgExts&quot;).Split(&apos;,&apos;) ?? new string[] &#123; &quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.gif&quot;, &quot;.png&quot;, &quot;.bmp&quot;, &quot;.ico&quot; &#125;;</span><br><span class="line">    private static readonly string ImageDomain = GetConfigValue(&quot;ImgDomain&quot;);//末尾不带/</span><br><span class="line">    private static readonly string UploadDir = GetConfigValue(&quot;UploadDir&quot;, &quot;/uploads/&quot;);//相对路径吧</span><br><span class="line">    private static readonly int UploadMaxLength = int.Parse(GetConfigValue(&quot;UploadMaxLength&quot;, &quot;5242880&quot;));//默认最大5M</span><br><span class="line"></span><br><span class="line">    private static string GetConfigValue(string key, string def = &quot;&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">        return System.Configuration.ConfigurationManager.AppSettings[key] ?? def;</span><br><span class="line">    &#125;</span><br><span class="line">    [HttpPost]</span><br><span class="line">    public ActionResult Upload(HttpPostedFileBase file)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        if (file == null)</span><br><span class="line">        &#123;</span><br><span class="line">            return Json(new</span><br><span class="line">            &#123;</span><br><span class="line">                code = -1,</span><br><span class="line">                msg = &quot;未上传任何东西！&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (file.ContentLength &gt; UploadMaxLength)</span><br><span class="line">        &#123;</span><br><span class="line">            return Json(new</span><br><span class="line">            &#123;</span><br><span class="line">                code = -1,</span><br><span class="line">                msg = &quot;文件大小不能超过5M！&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        string ext = Path.GetExtension(file.FileName);</span><br><span class="line">        if (ImageFileExtensions.Any(e =&gt; e == ext))</span><br><span class="line">        &#123;</span><br><span class="line">            return Json(new</span><br><span class="line">            &#123;</span><br><span class="line">                code = -1,</span><br><span class="line">                msg = &quot;不支持此文件格式&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        string fileName = Guid.NewGuid().ToString() + ext;</span><br><span class="line">        string saveDir = System.Web.HttpContext.Current.Request.MapPath(UploadDir);</span><br><span class="line">        if (!Directory.Exists(saveDir))</span><br><span class="line">        &#123;</span><br><span class="line">            Directory.CreateDirectory(saveDir);</span><br><span class="line">        &#125;</span><br><span class="line">        string savePath = Path.Combine(saveDir, fileName);</span><br><span class="line">        file.SaveAs(savePath);</span><br><span class="line">        return Json(new</span><br><span class="line">        &#123;</span><br><span class="line">            code = 0,</span><br><span class="line">            msg = &quot;上传成功&quot;,</span><br><span class="line">            data = new</span><br><span class="line">            &#123;</span><br><span class="line">                src = ImageDomain + UploadDir + fileName,</span><br><span class="line">                title = &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、使用js-xss进行xss的防御"><a href="#四、使用js-xss进行xss的防御" class="headerlink" title="四、使用js-xss进行xss的防御"></a>四、使用js-xss进行xss的防御</h2><ol><li>保存<a href="https://raw.github.com/leizongmin/js-xss/master/dist/xss.js" target="_blank" rel="noopener">xss.js</a>到本地并在页面中引用</li><li>使用filterXss(html,options)调用函数处理，根据规则将规则内的html编码      </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用函数名 filterXSS，用法一样</span></span><br><span class="line"><span class="keyword">var</span> html = filterXSS(<span class="string">'&lt;script&gt;alert("xss");&lt;/script&gt;'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(html);<span class="comment">//"&amp;lt;script&amp;gt;alert("xss");&amp;lt;/script&amp;gt;"</span></span><br></pre></td></tr></table></figure><ol start="3"><li>实际使用         <blockquote><p>执行结果对比<br><img src="https://dn-coding-net-production-pp.qbox.me/849f6db0-ac27-46ec-bcbf-becd1696e2ff.png" alt="图片">          </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义自己的规则</span></span><br><span class="line"><span class="keyword">var</span> myXssOptions = <span class="function"><span class="keyword">function</span> (<span class="params">isEditer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        onTagAttr: <span class="function"><span class="keyword">function</span> (<span class="params">tag, name, value, isWhiteAttr</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//保留style标签 默认会将style给干掉</span></span><br><span class="line">            <span class="keyword">if</span> (name == <span class="string">'style'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"style='"</span> + value + <span class="string">"'"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//替换src为lay-src做懒加载</span></span><br><span class="line">            <span class="keyword">if</span> (!isEditer &amp;&amp; tag == <span class="string">'img'</span> &amp;&amp; name == <span class="string">'src'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"lay-src='"</span> + value + <span class="string">"'"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ol>]]></content>
      
      <categories>
          
          <category> dotnet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dotnet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一个简单的时间轴demo</title>
      <link href="/2017/07/18/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%97%B6%E9%97%B4%E8%BD%B4demo/"/>
      <url>/2017/07/18/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%97%B6%E9%97%B4%E8%BD%B4demo/</url>
      <content type="html"><![CDATA[<h2 id="一个时间轴的组成"><a href="#一个时间轴的组成" class="headerlink" title="一个时间轴的组成"></a>一个时间轴的组成</h2><ol><li>使用一个块级元素包裹内容，并未块级元素设置边框</li><li>定义圆形或者菱形等元素标签，子元素设置偏移或者定位元素将图标定位到边框上</li><li>使其中的内容不溢出，自动换行，内容自动撑高<br> 英文自动换行：<code>word-wrap:break-word;word-break:break-all</code><a id="more"></a></li></ol><h2 id="时间轴样式部分"><a href="#时间轴样式部分" class="headerlink" title="时间轴样式部分"></a>时间轴样式部分</h2><blockquote><p>使用时需要注意可能继承的样式会给li:after等伪类元素设置样式而造成效果异常<br>css中定义了一个圆形的图标<code>class=&quot;yuan&quot;</code>，一个菱形的图标<code>class=&quot;diamond&quot;</code></p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;<span class="attribute">font</span>:<span class="number">12px</span><span class="string">"宋体"</span>,<span class="string">"Arial Narrow"</span>,HELVETICA;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">-webkit-text-size-adjust</span>:<span class="number">100%</span>&#125;</span><br><span class="line">    <span class="selector-class">.ym-timeline</span>&#123;<span class="attribute">display</span>:block&#125;</span><br><span class="line">    <span class="selector-class">.ym-timeline</span> <span class="selector-tag">ul</span>&#123;<span class="attribute">margin-left</span>:<span class="number">30px</span>;<span class="attribute">border-left</span>:<span class="number">2px</span> solid green;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line">    <span class="selector-class">.ym-timeline</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">margin-left</span>:-<span class="number">12px</span>;<span class="attribute">line-height</span>:<span class="number">20px</span>;<span class="attribute">font-weight</span>:narmal;<span class="attribute">list-style</span>:none&#125;</span><br><span class="line">    <span class="comment">/*圆形图标*/</span></span><br><span class="line">    <span class="selector-class">.ym-timeline</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span><span class="selector-class">.yuan</span>&#123;<span class="attribute">width</span>:<span class="number">8px</span>;<span class="attribute">height</span>:<span class="number">8px</span>;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border</span>:<span class="number">2px</span> solid green;<span class="attribute">margin</span>:<span class="number">5px</span>;<span class="attribute">border-radius</span>:<span class="number">6px</span>;<span class="attribute">-webkit-border-radius</span>:<span class="number">6px</span>;<span class="attribute">-moz-border-radius</span>:<span class="number">6px</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">display</span>:inline-block;<span class="attribute">float</span>:left&#125;</span><br><span class="line">    <span class="comment">/*菱形图标*/</span></span><br><span class="line">    <span class="selector-class">.ym-timeline</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span><span class="selector-class">.diamond</span>&#123;<span class="attribute">width</span>:<span class="number">8px</span>;<span class="attribute">height</span>:<span class="number">8px</span>;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border</span>:<span class="number">2px</span> solid green;<span class="attribute">margin</span>:<span class="number">5px</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">display</span>:inline-block;<span class="attribute">float</span>:left;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(45deg);<span class="attribute">-ms-transform</span>:<span class="built_in">rotate</span>(45deg);<span class="attribute">-moz-transform</span>:<span class="built_in">rotate</span>(45deg);<span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(45deg);<span class="attribute">-o-transform</span>:<span class="built_in">rotate</span>(45deg)&#125;</span><br><span class="line">    <span class="selector-class">.ym-timeline</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span><span class="selector-class">.stime</span>&#123;<span class="attribute">padding-left</span>:<span class="number">7px</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">line-height</span>:<span class="number">20px</span>;<span class="attribute">color</span>:green&#125;</span><br><span class="line">    <span class="selector-class">.ym-timeline</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-class">.ym-tl-content</span>&#123;<span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">20px</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">line-height</span>:<span class="number">25px</span>;<span class="attribute">word-wrap</span>:break-word;<span class="attribute">word-break</span>:break-all&#125;</span><br><span class="line">    <span class="selector-class">.ym-timeline</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> <span class="selector-tag">span</span><span class="selector-class">.diamond</span>,<span class="selector-class">.ym-timeline</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> <span class="selector-tag">span</span><span class="selector-class">.yuan</span>&#123;<span class="attribute">margin-top</span>:<span class="number">0</span>&#125;</span><br><span class="line">    <span class="selector-class">.ym-timeline</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="selector-tag">span</span><span class="selector-class">.diamond</span>,<span class="selector-class">.ym-timeline</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="selector-tag">span</span><span class="selector-class">.yuan</span>&#123;<span class="attribute">margin-top</span>:<span class="number">8px</span>&#125;</span><br><span class="line">     <span class="selector-class">.ym-timeline</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-class">.ym-tl-content</span> <span class="selector-tag">img</span>&#123;<span class="attribute">max-width</span>:<span class="number">100%</span>;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="时间轴html结构"><a href="#时间轴html结构" class="headerlink" title="时间轴html结构"></a>时间轴html结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--效果预览http://runjs.cn/code/6udflsbt--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ym-timeline"</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"diamond"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"stime"</span>&gt;</span>2017-07-17<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ym-tl-content"</span>&gt;</span></span><br><span class="line">     是开始 ttesttesttesttesttesttesttesttesttesttesttest testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest testtesttesttesttesttesttesttesttesttesttestt 亦是结束 </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"diamond"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"stime"</span>&gt;</span>2017-07-18<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ym-tl-content"</span>&gt;</span></span><br><span class="line">     是开始 ttesttesttesttesttesttesttesttesttesttesttest testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest testtesttesttesttesttesttesttesttesttesttestt 亦是结束 </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"diamond"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"stime"</span>&gt;</span>2017-07-19<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ym-tl-content"</span>&gt;</span></span><br><span class="line">     是开始 ttesttesttesttesttesttesttesttesttesttesttest testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest testtesttesttesttesttesttesttesttesttesttestt 亦是结束 </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"diamond"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"stime"</span>&gt;</span>2017-07-20<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ym-tl-content"</span>&gt;</span></span><br><span class="line">     是开始 ttesttesttesttesttesttesttesttesttesttesttest testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest testtesttesttesttesttesttesttesttesttesttestt 亦是结束 </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"yuan"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"stime"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><blockquote><p><a href="http://runjs.cn/code/6udflsbt" target="_blank" rel="noopener">完整代码</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asp.net-core踩坑记录</title>
      <link href="/2017/07/09/asp.net-core%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/07/09/asp.net-core%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<blockquote><p>系统：win10<br>VS版本：2017<br>.NET Core 版本： 1.1</p></blockquote><h2 id="零-读取配置文件"><a href="#零-读取配置文件" class="headerlink" title="零.读取配置文件"></a>零.读取配置文件</h2><blockquote><p>参考：<a href="http://www.tuicool.com/articles/QfYVBvi" target="_blank" rel="noopener">http://www.tuicool.com/articles/QfYVBvi</a></p><ol start="0"><li>此版本无需添加其他组件</li><li>在<code>appsettings.json</code>配置中添加节点AppSettings<br>  <img src="https://dn-coding-net-production-pp.qbox.me/6e12aae7-7ebd-486f-8775-e80c989eae97.png" alt="图片"></li><li>添加配置文件的映射模型<br>  <img src="https://dn-coding-net-production-pp.qbox.me/ea4ac89a-7e83-4a90-a514-ab3f4c453af1.png" alt="图片"> </li><li>在Startup.cs  ConfigureServices方法中注册<br><img src="https://dn-coding-net-production-pp.qbox.me/7cac2c8c-c374-4558-b49f-9c963fe69906.png" alt="图片"> </li></ol></blockquote><pre><code>services.AddOptions();services.Configure&lt;AppSettings&gt;(Configuration.GetSection(&quot;AppSettings&quot;));</code></pre><a id="more"></a><ol start="4"><li>Controller中使用<br> <img src="https://dn-coding-net-production-pp.qbox.me/976314e3-77a4-4a42-844e-e42bfcd748b3.png" alt="图片"> </li></ol><h2 id="一、登录记录session"><a href="#一、登录记录session" class="headerlink" title="一、登录记录session"></a>一、登录记录session</h2><blockquote><p>参考：<a href="http://www.cnblogs.com/fonour/p/5943401.html" target="_blank" rel="noopener">http://www.cnblogs.com/fonour/p/5943401.html</a></p></blockquote><h2 id="二、发布-net-core1-1-2网站到windos服务器"><a href="#二、发布-net-core1-1-2网站到windos服务器" class="headerlink" title="二、发布.net core1.1.2网站到windos服务器"></a>二、发布.net core1.1.2网站到windos服务器</h2><blockquote><p>参考：<a href="https://docs.microsoft.com/en-us/aspnet/core/publishing/iis" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/aspnet/core/publishing/iis</a></p><ol start="0"><li>我的服务器是windows server 2012 ,.net core网站版本为1.1.2</li><li>经安装好iis</li><li>下载安装：<br>   <a href="https://go.microsoft.com/fwlink/?linkid=848766" target="_blank" rel="noopener">.NET Core Windows Server Hosting</a><br>   <a href="https://www.microsoft.com/en-us/download/details.aspx?id=53840" target="_blank" rel="noopener">Microsoft Visual C++ 2015 Redistributable Update 3</a><br><img src="https://dn-coding-net-production-pp.qbox.me/a0318ad1-a06e-413e-9412-52b30149a516.png" alt="图片"> </li><li>发布.net core网站到IIS，并将应用池的.NET CLR版本修改为[无托管代码]<br><img src="https://dn-coding-net-production-pp.qbox.me/d0ccf5ba-0535-4832-a239-dcb1a5686ae3.png" alt="图片"> </li></ol></blockquote><h2 id="三、DES加密解密算法"><a href="#三、DES加密解密算法" class="headerlink" title="三、DES加密解密算法"></a>三、DES加密解密算法</h2><blockquote><p>亲测可用</p></blockquote><pre><code>public class SecurityHelper{    #region 加密解密法一    //默认密钥向量     private static byte[] Keys = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };    /// &lt;summary&gt;     /// DES加密字符串     /// &lt;/summary&gt;     /// &lt;param name=&quot;encryptString&quot;&gt;待加密的字符串&lt;/param&gt;     /// &lt;param name=&quot;encryptKey&quot;&gt;加密密钥,要求为16位&lt;/param&gt;     /// &lt;returns&gt;加密成功返回加密后的字符串，失败返回源串&lt;/returns&gt;     public static string EncryptDES(string encryptString, string encryptKey = &quot;Key123Ace#321Key&quot;)    {        try        {            byte[] rgbKey = Encoding.UTF8.GetBytes(encryptKey.Substring(0, 16));            byte[] rgbIV = Keys;            byte[] inputByteArray = Encoding.UTF8.GetBytes(encryptString);            var DCSP = Aes.Create();            MemoryStream mStream = new MemoryStream();            CryptoStream cStream = new CryptoStream(mStream, DCSP.CreateEncryptor(rgbKey, rgbIV), CryptoStreamMode.Write);            cStream.Write(inputByteArray, 0, inputByteArray.Length);            cStream.FlushFinalBlock();            return Convert.ToBase64String(mStream.ToArray());        }        catch (Exception ex)        {            return ex.Message + encryptString;        }    }    /// &lt;summary&gt;     /// DES解密字符串     /// &lt;/summary&gt;     /// &lt;param name=&quot;decryptString&quot;&gt;待解密的字符串&lt;/param&gt;     /// &lt;param name=&quot;decryptKey&quot;&gt;解密密钥,要求为16位,和加密密钥相同&lt;/param&gt;     /// &lt;returns&gt;解密成功返回解密后的字符串，失败返源串&lt;/returns&gt;     public static string DecryptDES(string decryptString, string decryptKey = &quot;Key123Ace#321Key&quot;)    {        try        {            byte[] rgbKey = Encoding.UTF8.GetBytes(decryptKey.Substring(0, 16));            byte[] rgbIV = Keys;            byte[] inputByteArray = Convert.FromBase64String(decryptString);            var DCSP = Aes.Create();            MemoryStream mStream = new MemoryStream();            CryptoStream cStream = new CryptoStream(mStream, DCSP.CreateDecryptor(rgbKey, rgbIV), CryptoStreamMode.Write);            Byte[] inputByteArrays = new byte[inputByteArray.Length];            cStream.Write(inputByteArray, 0, inputByteArray.Length);            cStream.FlushFinalBlock();            return Encoding.UTF8.GetString(mStream.ToArray());        }        catch (Exception ex)        {            return ex.Message + decryptString;        }    }    #endregion }</code></pre><h2 id="四、过滤器定义"><a href="#四、过滤器定义" class="headerlink" title="四、过滤器定义"></a>四、过滤器定义</h2><blockquote><p>继承Attribute,实现IActionFilter即可<br>简单校验登录,获取cookie值并解密后得到用户名,未登录则跳转登录(ApplicationKey为自定义的类存放)</p></blockquote><pre><code>public class UserCheckFilterAttribute : Attribute, IActionFilter{    public void OnActionExecuted(ActionExecutedContext context)    {    }    public void OnActionExecuting(ActionExecutingContext filterContext)    {        string encryptValue = &quot;&quot;;        filterContext.HttpContext.Request.Cookies.TryGetValue(ApplicationKey.User_Cookie_Key, out encryptValue);        if (encryptValue == null)        {            filterContext.Result = new RedirectResult(&quot;/Account/Login&quot;);            return;        }        var userName = SecurityHelper.DecryptDES(encryptValue, ApplicationKey.User_Cookie_Encryption_Key);        if (string.IsNullOrEmpty(userName))        {            filterContext.Result = new RedirectResult(&quot;/Account/Login&quot;);            return;        }    }}</code></pre><h2 id="注入服务"><a href="#注入服务" class="headerlink" title="注入服务"></a>注入服务</h2><blockquote><p><code>Startup.cs</code>中的<code>ConfigureServices</code>方法调用<code>services.AddTransient&lt;IUserService,UserService&gt;();</code>注册服务<br> <img src="https://dn-coding-net-production-pp.qbox.me/7f9d0747-a9bf-4be3-89d8-5d87123c5b4d.png" alt="图片"> </p></blockquote>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netcore </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>winform复制文件到指定目录</title>
      <link href="/2017/07/05/winform%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95/"/>
      <url>/2017/07/05/winform%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h2><blockquote><ol><li>弹出选择对话框：<code>var openFileDialog = new OpenFileDialog();</code></li><li>设置选择内容,如所有图片:<code>openFileDialog.Filter=&quot;图像文件 (*.bmp;*.ico;*.gif;*.jpeg;*.jpg;*.png)|*.bmp;*.ico;*.gif;*.jpeg;*.jpg;*.png&quot;;</code></li><li>获取选择的路径集合：<code>openFileDialog.FileNames</code></li><li>复制文件:<code>File.Copy(sourcePath,targetPath);//目录重命名见下面代码</code></li></ol></blockquote><a id="more"></a><h2 id="1-打开图片选择对话框"><a href="#1-打开图片选择对话框" class="headerlink" title="1. 打开图片选择对话框"></a>1. 打开图片选择对话框</h2><blockquote><p>默认为多选，返回选择的文件路径集合，可使用<code>FirstOrDefault()</code>方法判断是否选择了文件</p></blockquote><pre><code>//打开文件对话框并获取选择的文件private List&lt;string&gt; OpenImagesDialog(bool isMulti = true){    var openFileDialog = new OpenFileDialog();    const string imgExts = &quot;图像文件 (*.bmp;*.ico;*.gif;*.jpeg;*.jpg;*.png)|*.bmp;*.ico;*.gif;*.jpeg;*.jpg;*.png&quot;;    openFileDialog.Filter = imgExts;//可选择的文件格式 (|之前为显示，之后为控制后缀显示)    openFileDialog.Multiselect = isMulti;//多选设置    openFileDialog.RestoreDirectory = true;    openFileDialog.FilterIndex = 1;    var result = new List&lt;string&gt;();    if (openFileDialog.ShowDialog() == DialogResult.OK)    {        result.AddRange(openFileDialog.FileNames);    }    return result;}</code></pre><h2 id="2-复制文件到指定目录"><a href="#2-复制文件到指定目录" class="headerlink" title="2.复制文件到指定目录"></a>2.复制文件到指定目录</h2><blockquote><p>将传递的文件复制到指定目录并以Guid重命名，目录不存在则自动创建<br>使用元组返回对应路径键值对(Item1)及失败路径集合(Item2)</p></blockquote><pre><code>/// &lt;summary&gt;/// 复制文件到指定目录并重命名/// &lt;/summary&gt;/// &lt;param name=&quot;sourcePaths&quot;&gt;要复制的文件路径集合&lt;/param&gt;/// &lt;param name=&quot;targetDir&quot;&gt;目标目录&lt;/param&gt;/// &lt;returns&gt;Item1:对应路径，Item2:失败文件路径&lt;/returns&gt;public static Tuple&lt;Dictionary&lt;string, string&gt;, List&lt;string&gt;&gt; CopyFileToDir(List&lt;string&gt; sourcePaths, string targetDir){    if (!Directory.Exists(targetDir))    {        Directory.CreateDirectory(targetDir);    }    var errorFiles = new List&lt;string&gt;();    var saveDirs = new Dictionary&lt;string, string&gt;();    sourcePaths.ForEach(item =&gt;    {        //路径不存在或者路径已存在则失败        if (!File.Exists(item) || saveDirs.ContainsKey(item))        {            errorFiles.Add(item);        }        else        {            var saveName = Guid.NewGuid() + Path.GetExtension(item);            var savePath = Path.Combine(targetDir, saveName);            File.Copy(item, savePath);            saveDirs.Add(item, savePath);        }    });    var result = new Tuple&lt;Dictionary&lt;string, string&gt;, List&lt;string&gt;&gt;(saveDirs, errorFiles);    return result;}</code></pre><blockquote><p>调用示例 ( AppendLogMsg 为追加日志方法)</p></blockquote><pre><code>var selectImgs = OpenImagesDialog(true);//打开文件对话框并获取选择的所有文件var result = FileHelper.CopyFileToDir(selectImgs, txtSaveDir.Text);//result.Item1 [{源文件路径:目标路径}]//result.Item2 [失败路径1,失败路径2]</code></pre>]]></content>
      
      <categories>
          
          <category> dotnet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>winform制作小工具的技巧</title>
      <link href="/2017/07/05/winform%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%B7%A5%E5%85%B7%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
      <url>/2017/07/05/winform%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%B7%A5%E5%85%B7%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>在使用winfrom制作一些工具的时候，一些基本设置都是去属性里面找来找去，一段时间就忘了，记录记录以备不时之需。</p><h2 id="一、窗体绘制的常用设置"><a href="#一、窗体绘制的常用设置" class="headerlink" title="一、窗体绘制的常用设置"></a>一、窗体绘制的常用设置</h2><blockquote><p>窗体的设置应当在窗体构造函数中InitializeComponent()方法前执行</p></blockquote><pre><code>public frmMain(){    this.StartPosition = FormStartPosition.CenterScreen;//窗体居中显示      this.MaximizeBox = false;//不显示最大化按钮     this.FormBorderStyle = FormBorderStyle.FixedSingle;//禁止放大缩小     InitializeComponent();}</code></pre><a id="more"></a><h2 id="二、winform文本框全选功能"><a href="#二、winform文本框全选功能" class="headerlink" title="二、winform文本框全选功能"></a>二、winform文本框全选功能</h2><blockquote><p>Control_ControlAdded事件在InitializeComponent()调用之前注册</p></blockquote><pre><code>public frmMain(){    this.ControlAdded += new System.Windows.Forms.ControlEventHandler(this.Control_ControlAdded);    InitializeComponent();}private void Control_ControlAdded(object sender, ControlEventArgs e){    //使“未来”生效    e.Control.ControlAdded += new System.Windows.Forms.ControlEventHandler(this.Control_ControlAdded);    //使“子孙”生效    foreach (Control c in e.Control.Controls)    {        Control_ControlAdded(sender, new ControlEventArgs(c));    }    //使“过去”生效    TextBox textBox = e.Control as TextBox;    if (textBox != null)    {        textBox.KeyPress += TextBox_KeyPress;    }}private void TextBox_KeyPress(object sender, KeyPressEventArgs e){    TextBox textBox = sender as TextBox;    if (textBox == null)        return;    if (e.KeyChar == (char)1)    {        textBox.SelectAll();        e.Handled = true;    }}</code></pre><h2 id="三、设置一个显示日志的文本框"><a href="#三、设置一个显示日志的文本框" class="headerlink" title="三、设置一个显示日志的文本框"></a>三、设置一个显示日志的文本框</h2><blockquote><p>首先在页面中放置一个文本框，设置Multiline=true后拖动到合适大小<br>然后在加载事件中进行设置</p></blockquote><pre><code>private static int _maxLogmsgTextLength = 10000;//日志框最大输入private void frmMain_Load(object sender, EventArgs e){    this.txtLogMsg.Multiline = true;//多选， 一般在界面中就设置了    this.txtLogMsg.ScrollBars = ScrollBars.Vertical;//日志输出显示纵向滚动条    this.txtLogMsg.ReadOnly = true; //输出日志只读    this.txtLogMsg.TextChanged += txtLogMsg_TextChanged;//注册改变事件    int.TryParse(System.Configuration.ConfigurationManager.AppSettings[&quot;MAX_LOGMSG_TEXT_LENGTH&quot;], out _maxLogmsgTextLength);//优先使用配置文件配置的值}//文本框事件 使追加日志后滚动光标到末尾void txtLogMsg_TextChanged(object sender, EventArgs e){    txtLogMsg.SelectionStart = txtLogMsg.Text.Length + 10;//设置选中文字的开始位置为文本框的文字的长度，如果超过了文本长度，则默认为文本的最后。    txtLogMsg.SelectionLength = 0;//设置被选中文字的长度为0（将光标移动到文字最后）    txtLogMsg.ScrollToCaret();//将滚动条移动到光标位置}//追加日志方法 在非UI线程中直接AppendText调试会异常private void AppendLogMsg(string msg){    //在UI线程中执行    txtLogMsg.BeginInvoke(new Action(() =&gt;    {        txtLogMsg.AppendText(msg);        txtLogMsg.AppendText(Environment.NewLine);//追加换行符    }));}</code></pre><h2 id="四、开启一个线程执行任务"><a href="#四、开启一个线程执行任务" class="headerlink" title="四、开启一个线程执行任务"></a>四、开启一个线程执行任务</h2><blockquote><p>避免界面卡死</p></blockquote><pre><code>var askThread=new Thread(() =&gt;{  //TODO  //AppendLogMsg(&quot;添加日志,调试时不会报错~~~&quot;);}askThread.Start();//.NET Framework 4.5+//Task.Run(()=&gt;{//  //TODO//})</code></pre><h2 id="五、打开图片选择对话框"><a href="#五、打开图片选择对话框" class="headerlink" title="五、打开图片选择对话框"></a>五、打开图片选择对话框</h2><blockquote><p>默认为多选，返回选择的文件路径集合，可使用<code>FirstOrDefault()</code>方法判断是否选择了文件</p></blockquote><pre><code>private List&lt;string&gt; OpenImagesDialog(bool isMulti = true){    var openFileDialog = new OpenFileDialog();    const string imgExts = &quot;图像文件 (*.bmp;*.ico;*.gif;*.jpeg;*.jpg;*.png)|*.bmp;*.ico;*.gif;*.jpeg;*.jpg;*.png&quot;;    openFileDialog.Filter = imgExts;    openFileDialog.Multiselect = isMulti;    openFileDialog.RestoreDirectory = true;    openFileDialog.FilterIndex = 1;    var result = new List&lt;string&gt;();    if (openFileDialog.ShowDialog() == DialogResult.OK)    {        result.AddRange(openFileDialog.FileNames);    }    return result;}</code></pre><h2 id="六、复制文件到指定目录"><a href="#六、复制文件到指定目录" class="headerlink" title="六、复制文件到指定目录"></a>六、复制文件到指定目录</h2><blockquote><p>将传递的文件复制到指定目录并以Guid重命名，目录不存在则自动创建<br>使用元组返回对应路径键值对(Item1)及失败路径集合(Item2)</p></blockquote><pre><code>/// &lt;summary&gt;/// 复制文件到指定目录并重命名/// &lt;/summary&gt;/// &lt;param name=&quot;sourcePaths&quot;&gt;要复制的文件路径集合&lt;/param&gt;/// &lt;param name=&quot;targetDir&quot;&gt;目标目录&lt;/param&gt;/// &lt;returns&gt;Item1:对应路径，Item2:失败文件路径&lt;/returns&gt;public static Tuple&lt;Dictionary&lt;string, string&gt;, List&lt;string&gt;&gt; CopyFileToDir(List&lt;string&gt; sourcePaths, string targetDir){    if (!Directory.Exists(targetDir))    {        Directory.CreateDirectory(targetDir);    }    var errorFiles = new List&lt;string&gt;();    var saveDirs = new Dictionary&lt;string, string&gt;();    sourcePaths.ForEach(item =&gt;    {        //路径不存在或者路径已存在则失败        if (!File.Exists(item) || saveDirs.ContainsKey(item))        {            errorFiles.Add(item);        }        else        {            var saveName = Guid.NewGuid() + Path.GetExtension(item);            var savePath = Path.Combine(targetDir, saveName);            File.Copy(item, savePath);            saveDirs.Add(item, savePath);        }    });    var result = new Tuple&lt;Dictionary&lt;string, string&gt;, List&lt;string&gt;&gt;(saveDirs, errorFiles);    return result;}</code></pre><blockquote><p>调用示例 ( AppendLogMsg 为追加日志方法)</p></blockquote><pre><code>var selectImgs = OpenImagesDialog(true);//五、打开图片选择对话框方法var result = FileHelper.CopyFileToDir(selectImgs, txtSaveDir.Text);result.Item1.Keys.ToList().ForEach(item =&gt; AppendLogMsg(item + &quot;:&quot; + result.Item1[item]));//成功时输出result.Item2.ForEach(item =&gt; AppendLogMsg(&quot;文件复制失败：&quot; + item));//文件错误输出</code></pre><h2 id="七、使用Ini文件存取配置"><a href="#七、使用Ini文件存取配置" class="headerlink" title="七、使用Ini文件存取配置"></a>七、使用Ini文件存取配置</h2><blockquote><p>保存一些配置到ini文件，是自己的工具更佳灵活</p></blockquote><h3 id="ini操作类"><a href="#ini操作类" class="headerlink" title="ini操作类"></a>ini操作类</h3><pre><code>public class IniHelper{    // 声明INI文件的写操作函数 WritePrivateProfileString()    [System.Runtime.InteropServices.DllImport(&quot;kernel32&quot;)]    private static extern long WritePrivateProfileString(string section, string key, string val, string filePath);    // 声明INI文件的读操作函数 GetPrivateProfileString()    [System.Runtime.InteropServices.DllImport(&quot;kernel32&quot;)]    private static extern int GetPrivateProfileString(string section, string key, string def, System.Text.StringBuilder retVal, int size, string filePath);    private readonly int _retLength = 500;    private readonly string _sPath = null;    /// &lt;summary&gt;    /// 初始化IniHelper    /// &lt;/summary&gt;    /// &lt;param name=&quot;path&quot;&gt;ini文件保存路径&lt;/param&gt;    /// &lt;param name=&quot;rl&quot;&gt;默认500&lt;/param&gt;    public IniHelper(string path, int? rl = null)    {        this._sPath = path;        this._retLength = rl.HasValue ? rl.Value : _retLength;    }    /// &lt;summary&gt;    /// 设置Ini配置，默认配置节为Setting    /// &lt;/summary&gt;    /// &lt;param name=&quot;key&quot;&gt;键名&lt;/param&gt;    /// &lt;param name=&quot;value&quot;&gt;键值&lt;/param&gt;    /// &lt;param name=&quot;section&quot;&gt;配置节&lt;/param&gt;    public void WriteValue(string key, string value, string section = &quot;Setting&quot;)    {        // section=配置节，key=键名，value=键值，path=路径        WritePrivateProfileString(section, key, value, _sPath);    }    /// &lt;summary&gt;    /// 根据键名节点读取Ini配置，默认节点为Setting    /// &lt;/summary&gt;    /// &lt;param name=&quot;key&quot;&gt;键名&lt;/param&gt;    /// &lt;param name=&quot;section&quot;&gt;配置节&lt;/param&gt;    /// &lt;returns&gt;&lt;/returns&gt;    public string ReadValue(string key, string section = &quot;Setting&quot;)    {        // 每次从ini中读取多少字节        System.Text.StringBuilder temp = new System.Text.StringBuilder(_retLength);        // section=配置节，key=键名，temp=上面，path=路径        GetPrivateProfileString(section, key, &quot;&quot;, temp, _retLength, _sPath);        return temp.ToString();    }}</code></pre><h3 id="IniHelper使用示例"><a href="#IniHelper使用示例" class="headerlink" title="IniHelper使用示例"></a>IniHelper使用示例</h3><pre><code>string savePath = AppDomain.CurrentDomain.BaseDirectory + &quot;config.ini&quot;;IniHelper _iniHelper = new IniHelper(savePath);//初始化_iniHelper.WriteValue(&quot;txtGitAddress&quot;);//写入_iniHelper.ReadValue(&quot;txtGitAddress&quot;);//读取</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote><p>调用本地程序：<code>System.Diagnostics.Process.Start(&quot;E:\\程序.exe&quot;, &quot;c:\\windows&quot;);</code><br>打开目录：<code>System.Diagnostics.Process.Start(&quot;Explorer.exe&quot;, “目录路径E:\abc\”);</code></p></blockquote>]]></content>
      
      <categories>
          
          <category> dotnet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>meImgs-个人私有图床搭建</title>
      <link href="/2017/07/04/meImgs-%E4%B8%AA%E4%BA%BA%E7%A7%81%E6%9C%89%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/07/04/meImgs-%E4%B8%AA%E4%BA%BA%E7%A7%81%E6%9C%89%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="在Coding中新建一个仓库"><a href="#在Coding中新建一个仓库" class="headerlink" title="在Coding中新建一个仓库"></a>在Coding中新建一个仓库</h1><p> <img src="https://dn-coding-net-production-pp.qbox.me/d41d7e18-357c-45d6-8a65-5d7792c6d5d9.png" alt="图片"> </p>]]></content>
      
      <categories>
          
          <category> dotnet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>大话数据结构-阅读笔记</title>
      <link href="/2017/07/02/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/07/02/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote><p>数据结构果然还是应该知道一点为好</p></blockquote><h2 id="2017-06-30日-第一章介绍"><a href="#2017-06-30日-第一章介绍" class="headerlink" title="2017-06-30日 第一章介绍"></a>2017-06-30日 第一章介绍</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>结构是指各个组成部分相互搭配和排列的方式<br>数据结构就是相互之间存在一种或多种特定关系的数据元素的集合</p><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>对象中数据元素之间的相互关系<br>包含 : 集合结构，线性结构，树形结构，图形结构</p><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><p>指数据的逻辑结构在计算机中的存储形式<br>包含 : 顺序存储结构，链接存储结构</p><a id="more"></a>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>db数据导出Excel工具</title>
      <link href="/2017/07/02/db%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BAExcel%E5%B7%A5%E5%85%B7/"/>
      <url>/2017/07/02/db%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BAExcel%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<blockquote><p>一个根据数据库链接字符串，sql语句 即可将结果集导出到Excel的工具 分享，支持sqlserver,mysql。</p></blockquote><h1 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h1><blockquote><p>一个月前朋友找到我，让我帮忙做一个根据sql导出查询结果到Excel的工具（之前帮他一个导入Excel然后按其规则统计数据的工具）。<br>然后扔了我一个SQL语句，瞬间懵比。卧槽。这么多列，我特么得定义这么属性，改了还得重新改程序（一直用EF）。<br>于是思考如何忽略列名，进而如何做到通用，做到于我有益，而不是简单的帮个忙。</p></blockquote><h1 id="如何完成这个需求"><a href="#如何完成这个需求" class="headerlink" title="如何完成这个需求"></a>如何完成这个需求</h1><blockquote><p>Q:程序中根据SQL查询出数据而不需要关注有哪些列？<br>A:将查询结果保存到DataTable中然后遍历<br>Q:如何将DataTable转换Excel？<br>A:一搜，一试，可用之<br>Q:如何保存到本地？<br>A:待我改改写日志的方法<br><a id="more"></a><br>使用<a href="http://www.codeisbug.com/Doc/8" target="_blank" rel="noopener"><code>SqlSugar 4.x</code></a> 进行数据操作<br>SqlSugar 4.x是一款高性能（达到ADO.NET最高性能水平）、轻量级、支持多库和人性化语法的ORM，语法方便，入门简单，功能强大。<br>对数据库结构没太多要求，支持多主键，多自增列<br>SqlSugar支持sqlserver,mysql故此工具适用于此两者数据库</p></blockquote><h2 id="0-创建项目-预览"><a href="#0-创建项目-预览" class="headerlink" title="0. 创建项目-预览"></a>0. 创建项目-预览</h2><p><img src="http://images2015.cnblogs.com/blog/662652/201707/662652-20170703163425456-1755280588.png" alt="">       </p><h2 id="1-到github仓库clone了源码至本地生成需要的dll，然后在项目中添加了引用"><a href="#1-到github仓库clone了源码至本地生成需要的dll，然后在项目中添加了引用" class="headerlink" title="1. 到github仓库clone了源码至本地生成需要的dll，然后在项目中添加了引用"></a>1. 到github仓库clone了源码至本地生成需要的dll，然后在项目中添加了引用</h2><p><img src="http://images2015.cnblogs.com/blog/662652/201707/662652-20170703154605675-241795072.png" alt=""><br><img src="http://images2015.cnblogs.com/blog/662652/201707/662652-20170703154657940-1934319122.png" alt="">           </p><h2 id="2-使用SqlSugar获取结果到DataTable中-不知道是不是最近帮朋友写ado-net的代码写多了，感觉挺好"><a href="#2-使用SqlSugar获取结果到DataTable中-不知道是不是最近帮朋友写ado-net的代码写多了，感觉挺好" class="headerlink" title="2. 使用SqlSugar获取结果到DataTable中(不知道是不是最近帮朋友写ado.net的代码写多了，感觉挺好)"></a>2. 使用SqlSugar获取结果到DataTable中(不知道是不是最近帮朋友写ado.net的代码写多了，感觉挺好)</h2><p><img src="http://images2015.cnblogs.com/blog/662652/201707/662652-20170703154936019-1655719657.png" alt="">       </p><h2 id="3-DataTable转Excel"><a href="#3-DataTable转Excel" class="headerlink" title="3. DataTable转Excel"></a>3. DataTable转Excel</h2><pre><code>public class DataTableToExcel{    private DataTableToExcel()    { }    private static DataTableToExcel _instance = null;    public static DataTableToExcel Instance    {        get        {            if (_instance == null) _instance = new DataTableToExcel();            return _instance;        }    }    /// &lt;summary&gt;    /// DataTable通过流导出Excel    /// &lt;/summary&gt;    /// &lt;param name=&quot;ds&quot;&gt;数据源DataSet&lt;/param&gt;    /// &lt;param name=&quot;columns&quot;&gt;DataTable中列对应的列名(可以是中文),若为null则取DataTable中的字段名&lt;/param&gt;    /// &lt;param name=&quot;fileName&quot;&gt;保存文件名(例如：a.xls)&lt;/param&gt;    /// &lt;returns&gt;&lt;/returns&gt;    public string StreamExport(DataTable dt, string[] columns = null,string savePath=&quot;&quot;)    {        //if (dt.Rows.Count &gt; 65535) //总行数大于Excel的行数         //{        //    throw new Exception(&quot;预导出的数据总行数大于excel的行数&quot;);        //}        StringBuilder content = new StringBuilder();        content.Append(&quot;&lt;html xmlns:o=&apos;urn:schemas-microsoft-com:office:office&apos; xmlns:x=&apos;urn:schemas-microsoft-com:office:excel&apos; xmlns=&apos;http://www.w3.org/TR/REC-html40&apos;&gt;&quot;);        content.Append(&quot;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;meta http-equiv=&apos;Content-Type&apos; content=\&quot;text/html; charset=gb2312\&quot;&gt;&quot;);        //注意：[if gte mso 9]到[endif]之间的代码，用于显示Excel的网格线，若不想显示Excel的网格线，可以去掉此代码        content.Append(&quot;&lt;!--[if gte mso 9]&gt;&quot;);        content.Append(&quot;&lt;xml&gt;&quot;);        content.Append(&quot; &lt;x:ExcelWorkbook&gt;&quot;);        content.Append(&quot;  &lt;x:ExcelWorksheets&gt;&quot;);        content.Append(&quot;   &lt;x:ExcelWorksheet&gt;&quot;);        content.Append(&quot;    &lt;x:Name&gt;Sheet1&lt;/x:Name&gt;&quot;);        content.Append(&quot;    &lt;x:WorksheetOptions&gt;&quot;);        content.Append(&quot;      &lt;x:Print&gt;&quot;);        content.Append(&quot;       &lt;x:ValidPrinterInfo /&gt;&quot;);        content.Append(&quot;      &lt;/x:Print&gt;&quot;);        content.Append(&quot;    &lt;/x:WorksheetOptions&gt;&quot;);        content.Append(&quot;   &lt;/x:ExcelWorksheet&gt;&quot;);        content.Append(&quot;  &lt;/x:ExcelWorksheets&gt;&quot;);        content.Append(&quot;&lt;/x:ExcelWorkbook&gt;&quot;);        content.Append(&quot;&lt;/xml&gt;&quot;);        content.Append(&quot;&lt;![endif]--&gt;&quot;);        content.Append(&quot;&lt;/head&gt;&lt;body&gt;&lt;table style=&apos;border-collapse:collapse;table-layout:fixed;&apos;&gt;&lt;tr&gt;&quot;);        if (columns != null)        {            for (int i = 0; i &lt; columns.Length; i++)            {                if (columns[i] != null &amp;&amp; columns[i] != &quot;&quot;)                {                    content.Append(&quot;&lt;td&gt;&lt;b&gt;&quot; + columns[i] + &quot;&lt;/b&gt;&lt;/td&gt;&quot;);                }                else                {                    content.Append(&quot;&lt;td&gt;&lt;b&gt;&quot; + dt.Columns[i].ColumnName + &quot;&lt;/b&gt;&lt;/td&gt;&quot;);                }            }        }        else        {            for (int j = 0; j &lt; dt.Columns.Count; j++)            {                content.Append(&quot;&lt;td&gt;&lt;b&gt;&quot; + dt.Columns[j].ColumnName + &quot;&lt;/b&gt;&lt;/td&gt;&quot;);            }        }        content.Append(&quot;&lt;/tr&gt;\n&quot;);        for (int j = 0; j &lt; dt.Rows.Count; j++)        {            content.Append(&quot;&lt;tr&gt;&quot;);            for (int k = 0; k &lt; dt.Columns.Count; k++)            {                object obj = dt.Rows[j][k];                Type type = obj.GetType();                if (type.Name == &quot;Int32&quot; || type.Name == &quot;Single&quot; || type.Name == &quot;Double&quot; || type.Name == &quot;Decimal&quot;)                {                    double d = obj == DBNull.Value ? 0.0d : Convert.ToDouble(obj);                    if (type.Name == &quot;Int32&quot; || (d - Math.Truncate(d) == 0))                        content.AppendFormat(&quot;&lt;td style=&apos;vnd.ms-excel.numberformat:#,##0&apos;&gt;{0}&lt;/td&gt;&quot;, obj);                    else                        content.AppendFormat(&quot;&lt;td style=&apos;vnd.ms-excel.numberformat:#,##0.00&apos;&gt;{0}&lt;/td&gt;&quot;, obj);                }                else                    content.AppendFormat(&quot;&lt;td style=&apos;vnd.ms-excel.numberformat:@&apos;&gt;{0}&lt;/td&gt;&quot;, obj);            }            content.Append(&quot;&lt;/tr&gt;\n&quot;);        }        content.Append(&quot;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&quot;);        content.Replace(&quot;&amp;nbsp;&quot;, &quot;&quot;);        using (var w = new StreamWriter(savePath, false, Encoding.UTF8))        {            w.WriteLine(content);        }        return savePath;    }}</code></pre><h2 id="4-使用Ini文件保存输入"><a href="#4-使用Ini文件保存输入" class="headerlink" title="4. 使用Ini文件保存输入"></a>4. 使用Ini文件保存输入</h2><pre><code>public class IniHelper{    // 声明INI文件的写操作函数 WritePrivateProfileString()    [System.Runtime.InteropServices.DllImport(&quot;kernel32&quot;)]    private static extern long WritePrivateProfileString(string section, string key, string val, string filePath);    // 声明INI文件的读操作函数 GetPrivateProfileString()    [System.Runtime.InteropServices.DllImport(&quot;kernel32&quot;)]    private static extern int GetPrivateProfileString(string section, string key, string def, System.Text.StringBuilder retVal, int size, string filePath);    private int retLength = 500;    private string sPath = null;    public IniHelper(string path, int rl = 500)    {        this.sPath = path;        if (rl &gt; 0)        {            this.retLength = rl;        }    }    public void WriteValue(string key, string value, string section = &quot;Setting&quot;)    {        // section=配置节，key=键名，value=键值，path=路径        WritePrivateProfileString(section, key, value, sPath);    }    public string ReadValue(string key, string section = &quot;Setting&quot;)    {        // 每次从ini中读取多少字节        System.Text.StringBuilder temp = new System.Text.StringBuilder(retLength);        // section=配置节，key=键名，temp=上面，path=路径        GetPrivateProfileString(section, key, &quot;&quot;, temp, retLength, sPath);        return temp.ToString();    }}</code></pre><h2 id="5-文本框全选功能"><a href="#5-文本框全选功能" class="headerlink" title="5. 文本框全选功能"></a>5. 文本框全选功能</h2><pre><code>public frmMain(){    this.ControlAdded += new System.Windows.Forms.ControlEventHandler(this.Control_ControlAdded); //注册全选功能    InitializeComponent();}#region 文本框能够使用Ctrl+A 全选功能private void Control_ControlAdded(object sender, ControlEventArgs e){    //使“未来”生效    e.Control.ControlAdded += new System.Windows.Forms.ControlEventHandler(this.Control_ControlAdded);    //使“子孙”生效    foreach (Control c in e.Control.Controls)    {        Control_ControlAdded(sender, new ControlEventArgs(c));    }    //使“过去”生效    TextBox textBox = e.Control as TextBox;    if (textBox != null)    {        textBox.KeyPress += TextBox_KeyPress;    }}private void TextBox_KeyPress(object sender, KeyPressEventArgs e){    TextBox textBox = sender as TextBox;    if (textBox == null)        return;    if (e.KeyChar == (char)1)    {        textBox.SelectAll();        e.Handled = true;    }}#endregion</code></pre><h2 id="6-打开保存的excel"><a href="#6-打开保存的excel" class="headerlink" title="6. 打开保存的excel"></a>6. 打开保存的excel</h2><pre><code>private void btnOpenDir_Click(object sender, EventArgs e){    var txtFileName = this.txtFileName.Text;    var txtExportDir = this.txtExportDir.Text;    var openPath = Path.Combine(txtExportDir, txtFileName);    if (File.Exists(openPath))    {        System.Diagnostics.Process.Start(openPath, &quot;c:\\windows&quot;);    }    else    {        AppendTipMsg(&quot;文件&quot; + openPath + &quot;不存在&quot;);    }}</code></pre><h2 id="7-页面主要功能代码"><a href="#7-页面主要功能代码" class="headerlink" title="7. 页面主要功能代码"></a>7. 页面主要功能代码</h2><p><img src="http://images2015.cnblogs.com/blog/662652/201707/662652-20170703182427253-1108288763.png" alt=""></p><h3 id="winform中使用多线程时给ui控件赋值"><a href="#winform中使用多线程时给ui控件赋值" class="headerlink" title="winform中使用多线程时给ui控件赋值"></a>winform中使用多线程时给ui控件赋值</h3><pre><code>var txtThread = new Thread(() =&gt; txtMsg.BeginInvoke(new Action(() =&gt; txtMsg.AppendText(&quot;向文本框中追加内容&quot;))));   txtThread.Start();</code></pre><h2 id="8-一些记录"><a href="#8-一些记录" class="headerlink" title="8. 一些记录"></a>8. 一些记录</h2><h3 id="winform中使用多线程时给ui控件赋值-1"><a href="#winform中使用多线程时给ui控件赋值-1" class="headerlink" title="winform中使用多线程时给ui控件赋值"></a>winform中使用多线程时给ui控件赋值</h3><pre><code>var txtThread = new Thread(() =&gt; txtMsg.BeginInvoke(new Action(() =&gt; txtMsg.AppendText(&quot;向文本框中追加内容&quot;))));   txtThread.Start();</code></pre><p>源码中的NopI组件可移除，此工具实际未用到    </p><p>开启线程执行导出的时候使用的是Task.Run(() =&gt;{});若将框架版本改为4.0则需要将此处修改为new Thread(() =&gt;{}).Start();        </p><h3 id="整个过程解决了一下问题"><a href="#整个过程解决了一下问题" class="headerlink" title="整个过程解决了一下问题"></a>整个过程解决了一下问题</h3><blockquote><ol start="0"><li>数据库查询（SqlSugar支持sqlserver,mysql）</li><li>datatable转excel文本</li><li>ini存取文件</li><li>winform文本框全选功能</li><li>winform中使用多线程时给ui控件赋值</li></ol></blockquote><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><blockquote><p>下载使用：<a href="http://files.cnblogs.com/files/morang/DB数据导出工具.rar" target="_blank" rel="noopener">http://files.cnblogs.com/files/morang/DB数据导出工具.rar</a><br>源码下载：<a href="http://files.cnblogs.com/files/morang/DB数据导出工具_源码.rar" target="_blank" rel="noopener">http://files.cnblogs.com/files/morang/DB数据导出工具_源码.rar</a><br>Coding地址：<a href="https://coding.net/u/yimocoding/p/WeDemo/git/tree/NopiExcelDemo" target="_blank" rel="noopener">https://coding.net/u/yimocoding/p/WeDemo/git/tree/NopiExcelDemo</a><br>git克隆：<code>git clone https://git.coding.net/yimocoding/WeDemo.git -b NopiExcelDemo</code></p></blockquote><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p><img src="http://images2015.cnblogs.com/blog/662652/201707/662652-20170704092826612-2098151036.png" alt=""><br><img src="http://images2015.cnblogs.com/blog/662652/201707/662652-20170704092837190-1992148601.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> dotnet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用批处理脚本愉快的清理缓存</title>
      <link href="/2017/06/03/%E4%BD%BF%E7%94%A8%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E6%84%89%E5%BF%AB%E7%9A%84%E6%B8%85%E7%90%86%E7%BC%93%E5%AD%98/"/>
      <url>/2017/06/03/%E4%BD%BF%E7%94%A8%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E6%84%89%E5%BF%AB%E7%9A%84%E6%B8%85%E7%90%86%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<h2 id="站点缓存着实头痛，那么-重启吧"><a href="#站点缓存着实头痛，那么-重启吧" class="headerlink" title="站点缓存着实头痛，那么~重启吧"></a>站点缓存着实头痛，那么~重启吧</h2><blockquote><p>网站做了站点缓存，测试的时候修改数据后需要重启站点来清楚缓存<br>如何无需登陆服务器又不用改代码就可以清理换网站上的缓存呢？<br>用重启iis怎么样~<br>能重启IIS，自然也能干其他的</p></blockquote><a id="more"></a><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol start="0"><li>连接到远程主机</li><li>在远程主机一个创建一个包含iisreset命令(+移除计划任务)的脚本</li><li>给远程主机添加一项过期的计划任务</li><li>立即执行计划任务</li></ol><h2 id="完整批处理脚本-重启iis-bat"><a href="#完整批处理脚本-重启iis-bat" class="headerlink" title="完整批处理脚本- 重启iis.bat"></a>完整批处理脚本- 重启iis.bat</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="comment">REM 远程地址</span></span><br><span class="line"><span class="built_in">set</span> ycip=<span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">123</span></span><br><span class="line"><span class="comment">REM 服务器登陆名</span></span><br><span class="line"><span class="built_in">set</span> ycname=Administrator</span><br><span class="line"><span class="comment">REM 服务器登陆密码</span></span><br><span class="line"><span class="built_in">set</span> ycpwd=<span class="number">123456</span></span><br><span class="line"><span class="comment">REM 计划任务名称</span></span><br><span class="line"><span class="built_in">set</span> planName=自动重启IIS</span><br><span class="line"><span class="comment">REM ipc名称</span></span><br><span class="line"><span class="built_in">set</span> ipcName=admin</span><br><span class="line"><span class="comment">REM 执行脚本地址 \\%ycip%\%ipcName%$\ 对应C:\Windows</span></span><br><span class="line"><span class="built_in">set</span> execbat=\\<span class="variable">%ycip%</span>\<span class="variable">%ipcName%</span>$\Temp\execiisresest.bat</span><br><span class="line"><span class="comment">REM 执行路径</span></span><br><span class="line"><span class="built_in">set</span> taskPath=C:\Windows\Temp\execiisresest.bat</span><br><span class="line"><span class="built_in">echo</span> 建立远程连接</span><br><span class="line"><span class="built_in">net</span> use \\<span class="variable">%ycip%</span>\<span class="variable">%ipcName%</span>$ "<span class="variable">%ycpwd%</span>" /user:<span class="variable">%ycname%</span></span><br><span class="line"><span class="built_in">echo</span> 写入脚本到远程脚本</span><br><span class="line"><span class="comment">REM ....写日志 未写入可能是权限问题</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">echo</span> <span class="variable">%time%</span>执行任务^&gt;^&gt;C:^\Windows^\Temp^\iisreset_log.txt&gt;<span class="variable">%execbat%</span></span><br><span class="line"><span class="comment">REM ....重启IIS</span></span><br><span class="line"><span class="built_in">echo</span> iisreset&gt;&gt;<span class="variable">%execbat%</span></span><br><span class="line"><span class="comment">REM ....删除计划任务 echo yes| 始终确认</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">echo</span> yes^| SCHTASKS /Delete /TN "<span class="variable">%planName%</span>" /F&gt;&gt;<span class="variable">%execbat%</span></span><br><span class="line"><span class="comment">REM 任务时间 设置一个过期时间，但是立即执行</span></span><br><span class="line"><span class="built_in">set</span> tasktime="<span class="number">00</span>:<span class="number">00</span>"</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 在远程主机创建计划任务</span><br><span class="line">SCHTASKS /Create /S <span class="variable">%ycip%</span> /U <span class="variable">%ycip%</span>\<span class="variable">%ycname%</span> /P "<span class="variable">%ycpwd%</span>" /SC ONCE /ST <span class="variable">%tasktime%</span> /TN <span class="variable">%planName%</span> /TR <span class="variable">%taskPath%</span> /RU <span class="variable">%ycname%</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 立即执行定义的计划任务</span><br><span class="line">SCHTASKS /Run /S <span class="variable">%ycip%</span> /U <span class="variable">%ycip%</span>\<span class="variable">%ycname%</span> /P "<span class="variable">%ycpwd%</span>" /I /TN "<span class="variable">%planName%</span>"</span><br><span class="line"><span class="comment">REM 删除IPC连接</span></span><br><span class="line"><span class="built_in">net</span> use \\<span class="variable">%ycip%</span>\<span class="variable">%ipcName%</span>$ /<span class="built_in">del</span></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><h2 id="关于脚本中的几个关键点"><a href="#关于脚本中的几个关键点" class="headerlink" title="关于脚本中的几个关键点"></a>关于脚本中的几个关键点</h2><ol><li>批处理脚本中如何定义变量？<br> 定义：<code>set 变量名=值</code><br> 使用：<code>%变量名%</code><br> 计算：<code>set /a v1=1+1</code> –&gt;v1==2 <code>set v2=1+1</code>–&gt;v2==”1+1”</li><li>如何写入文件？<br> 写入：<code>echo 我是文本&gt;文件名.后缀名</code><br> 追加写入：<code>echo 我是文本&gt;&gt;文件名.后缀名</code><br> 追加一个换行符：<code>echo. &gt;&gt;文件名.后缀名</code><br> 自动确认yes：<code>echo yes|</code></li><li>如何写入文件到建立远程连接<br>首先建立远程连接： <code>net use \\192.168.1.123\admin$ &quot;密码&quot; /user:登陆名</code> 路径对应C:\Windows<br>写入文件：<code>echo  文本&gt;\\192.168.1.123\admin$\文件路径</code></li><li>在远程主机创建计划任务并执行<br> 创建计划任务：<code>SCHTASKS /Create /S %主机地址% /U %主机地址%\%主机登陆名% /P &quot;%密码%&quot; /SC ONCE /ST %计划任务名% /TN %计划任务名% /TR %脚本或程序地址% /RU %主机登录名亦可%</code><br> 立即执行：<code>SCHTASKS /Run /S %主机地址% /U %主机地址%\%主机登陆名% /P &quot;%密码%&quot; /I /TN &quot;%计划任务名%&quot;</code><br> 删除任务：<code>SCHTASKS /Run /S %主机地址% /U %主机地址%\%主机登陆名% /P &quot;%密码%&quot; /I /TN &quot;%计划任务名%&quot;</code></li><li><p>如何将 |,&gt; 等特殊字符写入文本<br> 示例：<code>echo ^|&gt;xxx.txt</code> ^为转义字符，这样就能特殊字符输出或写入文件了</p></li><li><p>5种if语句的基本语法：     </p><blockquote><ol><li>判断两个字符串是否相等，<code>if &quot;字符串1&quot;==&quot;字符串2&quot;(command语句) else ()</code></li><li>判断两个数值是否相等，<code>if 数值1 equ 数值2 command语句</code></li><li>判断判断驱动器，文件或文件夹是否存在<code>if exist filename command语句</code></li><li>判断变量是否已经定义，<code>if defined 变量 command语句</code></li><li>判断上个命令的返回值，<code>if errorlevel 数值 command语句</code></li></ol></blockquote></li><li><p>计划任务是会在C:\Windows\system32目录下执行的，所以若脚本中未重定向路径，则日志会保存到system32目录</p></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>利用schtasks远程执行命令 <a href="https://sanwen.net/a/rsjveqo.html" target="_blank" rel="noopener">https://sanwen.net/a/rsjveqo.html</a><br>DOS批处理中的特殊符号 <a href="http://www.2cto.com/os/201309/241025.html" target="_blank" rel="noopener">http://www.2cto.com/os/201309/241025.html</a><br>DOS批处理添加任务计划 <a href="http://www.echojb.com/computer/2017/04/26/363341.html" target="_blank" rel="noopener">http://www.echojb.com/computer/2017/04/26/363341.html</a></p>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何生成ssh公钥</title>
      <link href="/2017/05/28/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%85%AC%E9%92%A5/"/>
      <url>/2017/05/28/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90ssh%E5%85%AC%E9%92%A5/</url>
      <content type="html"><![CDATA[<h2 id="windows下生成ssh-key"><a href="#windows下生成ssh-key" class="headerlink" title="windows下生成ssh_key"></a>windows下生成ssh_key</h2><p>会生成id_rsa以及 id_rsa.pub。输入命令三次回车即可sshkey生成到id_rsa.pub中，将文件中的公钥复制到coding或者GitHub即可<br>生成命令：<code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code><br>生成目录：<code>C:\Users\用户名\.ssh</code> （Linux下/your_home_path/.ssh/id_rsa）</p><a id="more"></a><p>详细：<a href="http://www.jianshu.com/p/31cbbbc5f9fa/" target="_blank" rel="noopener">http://www.jianshu.com/p/31cbbbc5f9fa/</a></p>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git常用命令记录</title>
      <link href="/2017/05/21/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/05/21/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h2><ul><li>设置用户名：<code>git config --global user.name 易墨</code>     </li><li>设置邮箱：<code>git config --global user.email yimo@yimo.com</code></li><li>删除配置： <code>git config --global --unset key</code><blockquote><p><a href="http://blog.csdn.net/sky1203850702/article/details/40985505" target="_blank" rel="noopener">更多</a></p></blockquote></li></ul><h2 id="查看配置详情"><a href="#查看配置详情" class="headerlink" title="查看配置详情"></a>查看配置详情</h2><ul><li><code>git config -l</code>  </li></ul><h2 id="初始仓库"><a href="#初始仓库" class="headerlink" title="初始仓库"></a>初始仓库</h2><ul><li><code>git init</code>   </li><li><code>git init --bare</code> –初始化一个共享仓库 </li></ul><h2 id="查看当前仓库的状态"><a href="#查看当前仓库的状态" class="headerlink" title="查看当前仓库的状态"></a>查看当前仓库的状态</h2><ul><li><p><code>git status</code></p><a id="more"></a><h2 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h2></li><li><p><code>git add *</code> –添加当前目录下的所有未排除的文件,或使用<code>git add --all</code> </p></li><li><code>git add -u</code>  –仅监控已经被add的文件或<code>git add --update</code>   </li><li><code>git add .</code> –提交不包括被删除的文件的修改  </li></ul><h2 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h2><ul><li><code>git commit -m 备注信息</code>        </li></ul><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><ul><li><code>git checkout .</code> –撤销本地所有修改</li><li><p><code>git checkout 路径/*.cs</code>–撤销本地路径下的所有cs文件</p></li><li><p><code>git revert</code> –将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容</p></li><li><code>git revert HEAD</code> –撤销前一次commit</li><li><code>git revert HEAD^</code> –撤销前前一次commit</li><li><p><code>git revert commitid</code> –撤销指定版本</p></li><li><p><code>git reset</code> 撤销暂存</p></li><li><code>git reset HEAD &lt;file&gt;</code> –撤销已经被暂存的文件</li></ul><h2 id="查看本地仓库的提交历史"><a href="#查看本地仓库的提交历史" class="headerlink" title="查看本地仓库的提交历史"></a>查看本地仓库的提交历史</h2><ul><li><code>git log</code></li></ul><h2 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h2><ul><li><code>git clone 仓库地址</code> –克隆远程仓库的默认分支，可以是本地文件路径，也可以是远程地址 </li><li><code>git clone https://github.com/../xxx.git -b 分支名称</code> –克隆远程仓库的指定分支   </li><li><code>git clone https://github.com/../xxx.git 文件夹路径</code> –克隆远程仓库到指定文件夹    </li></ul><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><blockquote><p>命令中的origin为默认的主机别名 </p></blockquote><h3 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h3><ul><li><code>git branch</code> –查看本地分支         </li><li><code>git branch -a</code> –查看本地及远程分支       </li><li><code>git branch 分支名称</code> –在本地创建一个新分支        </li><li><code>git checkout 分支名称</code> –获取远程分支并切换到该分支           </li><li><code>git checkout -b 分支名称</code> –获取远程分支,不存在则创建，并切换到该分支        </li><li><code>git branch -d 分支名称</code> –删除本地分支     </li><li><code>git branch -m 分支名称 新分支名称</code> –分支重命名    </li></ul><h3 id="更新远程分支"><a href="#更新远程分支" class="headerlink" title="更新远程分支"></a>更新远程分支</h3><ul><li><code>git fetch</code> – 更新本地仓库的所有分支，不合并到分支(通常用来查看其他人的进程)       </li><li><code>git fetch orgin 分支名称</code> – 更新本地仓库的指定分支，不合并到分支(通常用来查看其他人的进程)        </li><li><code>git pull</code> –更新当前分支       </li><li><code>git pull origin 远程分支:本地分支</code> –取回origin主机的远程分支，与指定本地分支合并       </li></ul><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><ul><li><code>git push origin --delete 分支名称</code> –v1.7.0+     </li><li><code>git push origin :分支名称</code> –删除远程分支,例：<code>git push origin :gh-pages</code>，意为将空白分支变成远程分支      </li></ul><h3 id="重命名远程分支"><a href="#重命名远程分支" class="headerlink" title="重命名远程分支"></a>重命名远程分支</h3><ol><li><code>git push --delete origin 远程分支</code> – 删除本地远程分支（github上需为非默认分支）      </li><li><code>git branch -m 本地分支 新远程分支名</code> –重命名分支          </li><li><code>git push orgin 新远程分支名</code> –推送本地分支     </li></ol><h2 id="合并操作"><a href="#合并操作" class="headerlink" title="合并操作"></a>合并操作</h2><ul><li><code>git merge -b 分支名称</code> –合并当前分支到指定分支     </li></ul><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><blockquote><p>如果本地仓库分支名称==远程仓库分支名称,可直接使用 <code>git push</code>         </p></blockquote><ul><li><code>git push origin 本地分支名称:远程分支名称</code> –将本地分支推送至远程分支,远程分支不存在则自动创建           </li><li><code>git remote add 主机别名 远程仓库地址</code> –添加远程主机，给远程主机起个别名，方便使用,默认的为origin       </li><li><code>git remote</code> –查看已添加的远程主机     </li><li><code>git remote show 主机别名</code> 可以查看远程主机的信息        </li></ul><blockquote><p>总结一下，收获满满。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用bat脚本部署hexo到coding和github</title>
      <link href="/2017/05/20/%E4%BD%BF%E7%94%A8bat%E8%84%9A%E6%9C%AC%E9%83%A8%E7%BD%B2hexo%E5%88%B0coding%E5%92%8Cgithub/"/>
      <url>/2017/05/20/%E4%BD%BF%E7%94%A8bat%E8%84%9A%E6%9C%AC%E9%83%A8%E7%BD%B2hexo%E5%88%B0coding%E5%92%8Cgithub/</url>
      <content type="html"><![CDATA[<blockquote><p>因项目的不同适当的改造吧，本文以hexo为例。</p></blockquote><h2 id="拉取coding-net的代码和github的代码到本地"><a href="#拉取coding-net的代码和github的代码到本地" class="headerlink" title="拉取coding.net的代码和github的代码到本地"></a>拉取coding.net的代码和github的代码到本地</h2><ol><li>确保代码能够正常的运行，commit,push</li><li>在项目的目录外新建一个push.bat文件 </li></ol><p>快速预览<br><img src="http://images2015.cnblogs.com/blog/662652/201705/662652-20170521012938088-2141091264.png" alt=""></p><h2 id="如何一步到位提交到仓库"><a href="#如何一步到位提交到仓库" class="headerlink" title="如何一步到位提交到仓库"></a>如何一步到位提交到仓库</h2><blockquote><p>脚本中的变量说明</p><ul><li>artsPath 新增文章的目录  </li><li>codingPath coding的目录    </li><li>githubPath github的目录    </li></ul></blockquote><h3 id="复制文章然后自动执行命令进行部署"><a href="#复制文章然后自动执行命令进行部署" class="headerlink" title="复制文章然后自动执行命令进行部署"></a>复制文章然后自动执行命令进行部署</h3><blockquote><p>修改脚本中对应的路径后执行<code>push</code></p></blockquote><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">xcopy</span> F:\CodingRepos\ymhexo\arts F:\CodingRepos\ymhexo\yimocoding\source\_posts /Y</span><br><span class="line"><span class="built_in">cd</span> F:\CodingRepos\ymhexo\yimocoding</span><br><span class="line"><span class="keyword">call</span> git pull</span><br><span class="line"><span class="keyword">call</span> hexo clean</span><br><span class="line"><span class="keyword">call</span> hexo d -g</span><br><span class="line"><span class="keyword">call</span> git add *</span><br><span class="line"><span class="keyword">call</span> git commit -m AddArticle</span><br><span class="line"><span class="keyword">call</span> git push</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="优化v1-加入变量并读取第一个参数为注释"><a href="#优化v1-加入变量并读取第一个参数为注释" class="headerlink" title="优化v1-加入变量并读取第一个参数为注释"></a>优化v1-加入变量并读取第一个参数为注释</h3><blockquote><p>查阅了果然cmd是有变量的，所以提前了路径到变量中，注释也可以传入了<br>使用<code>push 修改文章</code>,提交之后注释为update_修改文章，可省略参数</p></blockquote><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> artsPath=F:\CodingRepos\ymhexo\arts</span><br><span class="line"><span class="built_in">set</span> codingPath=F:\CodingRepos\ymhexo\yimocoding</span><br><span class="line"><span class="built_in">set</span> githubPath=F:\CodingRepos\ymhexo\yimogit.github.io</span><br><span class="line"></span><br><span class="line"><span class="built_in">xcopy</span> <span class="variable">%artsPath%</span> <span class="variable">%codingPath%</span>\source\_posts /Y</span><br><span class="line"><span class="built_in">cd</span> /d <span class="variable">%codingPath%</span></span><br><span class="line"><span class="keyword">call</span> git pull</span><br><span class="line"><span class="keyword">call</span> hexo clean</span><br><span class="line"><span class="keyword">call</span> hexo d -g</span><br><span class="line"><span class="keyword">call</span> git add *</span><br><span class="line"><span class="keyword">call</span> git commit -m update_%<span class="number">1</span></span><br><span class="line"><span class="keyword">call</span> git push</span><br></pre></td></tr></table></figure><h3 id="优化v2-多个仓库的部署"><a href="#优化v2-多个仓库的部署" class="headerlink" title="优化v2-多个仓库的部署"></a>优化v2-多个仓库的部署</h3><blockquote><p>复制粘贴是最简单的了，but~ 我感觉还能再优化下<br>定义变量，然后保存到字符串str中，通过赋值str后调整到for取下一个值实现一个路径的先入先出的T_T【笑哭】可以算作循环数组的方法了</p></blockquote><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> artsPath=F:\CodingRepos\ymhexo\arts</span><br><span class="line"><span class="comment">REM coding的目录</span></span><br><span class="line"><span class="built_in">set</span> codingPath=F:\CodingRepos\ymhexo\yimocoding</span><br><span class="line"><span class="comment">REM github的目录</span></span><br><span class="line"><span class="built_in">set</span> githubPath=F:\CodingRepos\ymhexo\yimogit.github.io</span><br><span class="line"><span class="comment">REM 默认注释add_article，第一个参数为注释</span></span><br><span class="line"><span class="built_in">set</span> notes=%<span class="number">1</span> </span><br><span class="line"><span class="keyword">if</span> "%<span class="number">1</span>"=="" <span class="built_in">set</span> notes=add_article</span><br><span class="line"><span class="comment">REM 拼接coding和github的目录地址，路径中不能含有空格</span></span><br><span class="line"><span class="built_in">set</span> str="<span class="variable">%codingPath%</span> <span class="variable">%githubPath%</span>"</span><br><span class="line"></span><br><span class="line">:STR_START</span><br><span class="line"><span class="keyword">for</span> /f "tokens=<span class="number">1</span>,*" <span class="variable">%%a</span> <span class="keyword">in</span> (<span class="variable">%str%</span>) <span class="keyword">do</span> (</span><br><span class="line"><span class="comment">    REM 复制文章到此仓库</span></span><br><span class="line">    <span class="built_in">xcopy</span> <span class="variable">%artsPath%</span> <span class="variable">%%a</span>\source\_posts\ /Y</span><br><span class="line"><span class="comment">    REM 重定向到此仓库</span></span><br><span class="line">    <span class="built_in">cd</span> /d <span class="variable">%%a</span></span><br><span class="line"><span class="comment">    REM 更新推送等操作</span></span><br><span class="line">    <span class="keyword">call</span> git pull</span><br><span class="line">    <span class="keyword">call</span> hexo clean</span><br><span class="line">    <span class="keyword">call</span> hexo d -g</span><br><span class="line">    <span class="keyword">call</span> git add *</span><br><span class="line">    <span class="keyword">call</span> git commit -m <span class="variable">%notes%</span></span><br><span class="line">    <span class="keyword">call</span> git push</span><br><span class="line"><span class="comment">    REM 重新将新字符串赋值个str，并重新开时循环新的字符串</span></span><br><span class="line">    <span class="built_in">set</span> str="<span class="variable">%%b</span>"</span><br><span class="line">    <span class="keyword">goto</span> STR_START</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>不愿干重复的事情~<br>程序猿就是如此的懒~<br>能一个脚本干完所有事简直完美~<br>不知道有没有比这种方法更好的实现</p></blockquote>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows下使用bat脚本部署hexo到coding和github</title>
      <link href="/2017/05/20/windows%E4%B8%8B%E4%BD%BF%E7%94%A8bat%E8%84%9A%E6%9C%AC%E9%83%A8%E7%BD%B2hexo%E5%88%B0coding%E5%92%8Cgithub/"/>
      <url>/2017/05/20/windows%E4%B8%8B%E4%BD%BF%E7%94%A8bat%E8%84%9A%E6%9C%AC%E9%83%A8%E7%BD%B2hexo%E5%88%B0coding%E5%92%8Cgithub/</url>
      <content type="html"><![CDATA[<h2 id="拉取coding-net的代码和github的代码到本地"><a href="#拉取coding-net的代码和github的代码到本地" class="headerlink" title="拉取coding.net的代码和github的代码到本地"></a>拉取coding.net的代码和github的代码到本地</h2><p>确保代码能够正常的运行，commit,push<br>新建一个push.bat文件<br>然后copy下面的代码再改改路径，将文章放到arts目录后运行push即可</p><ul><li>artsPath 新增文章的目录  </li><li>codingPath coding的目录    </li><li>githubPath github的目录     </li></ul><h2 id="如何一步到位提交到仓库"><a href="#如何一步到位提交到仓库" class="headerlink" title="如何一步到位提交到仓库"></a>如何一步到位提交到仓库</h2><h3 id="复制文章然后自动执行命令进行部署"><a href="#复制文章然后自动执行命令进行部署" class="headerlink" title="复制文章然后自动执行命令进行部署"></a>复制文章然后自动执行命令进行部署</h3><blockquote><p>修改脚本中对应的路径后执行<code>push</code></p></blockquote><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">xcopy</span> F:\CodingRepos\ymhexo\arts F:\CodingRepos\ymhexo\yimocoding\source\_posts /Y</span><br><span class="line"><span class="built_in">cd</span> F:\CodingRepos\ymhexo\yimocoding</span><br><span class="line"><span class="keyword">call</span> git pull</span><br><span class="line"><span class="keyword">call</span> hexo clean</span><br><span class="line"><span class="keyword">call</span> hexo d -g</span><br><span class="line"><span class="keyword">call</span> git add *</span><br><span class="line"><span class="keyword">call</span> git commit -m AddArticle</span><br><span class="line"><span class="keyword">call</span> git push</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="优化-加入变量并读取第一个参数为注释"><a href="#优化-加入变量并读取第一个参数为注释" class="headerlink" title="优化-加入变量并读取第一个参数为注释"></a>优化-加入变量并读取第一个参数为注释</h3><blockquote><p>查阅了果然cmd是有变量的，所以提前了路径到变量中，注释也可以传入了<br>使用<code>push 修改文章</code>,提交之后注释为update_修改文章，可省略参数</p></blockquote><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> artsPath=F:\CodingRepos\ymhexo\arts</span><br><span class="line"><span class="built_in">set</span> codingPath=F:\CodingRepos\ymhexo\yimocoding</span><br><span class="line"><span class="built_in">set</span> githubPath=F:\CodingRepos\ymhexo\yimogit.github.io</span><br><span class="line"></span><br><span class="line"><span class="built_in">xcopy</span> <span class="variable">%artsPath%</span> <span class="variable">%codingPath%</span>\source\_posts /Y</span><br><span class="line"><span class="built_in">cd</span> /d <span class="variable">%codingPath%</span></span><br><span class="line"><span class="keyword">call</span> git pull</span><br><span class="line"><span class="keyword">call</span> hexo clean</span><br><span class="line"><span class="keyword">call</span> hexo d -g</span><br><span class="line"><span class="keyword">call</span> git add *</span><br><span class="line"><span class="keyword">call</span> git commit -m update_%<span class="number">1</span></span><br><span class="line"><span class="keyword">call</span> git push</span><br></pre></td></tr></table></figure><h3 id="多个仓库的部署"><a href="#多个仓库的部署" class="headerlink" title="多个仓库的部署"></a>多个仓库的部署</h3><blockquote><p>复制粘贴是最简单的了，but~我猜肯定有for循环可以用</p></blockquote><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> artsPath=F:\CodingRepos\ymhexo\arts</span><br><span class="line"><span class="built_in">set</span> gitPaths="F:\CodingRepos\ymhexo\yimocoding F:\CodingRepos\ymhexo\yimogit.github.io"</span><br><span class="line">:GIT_VISTOR</span><br><span class="line"><span class="keyword">for</span> /f "tokens=<span class="number">1</span>,*" <span class="variable">%%a</span> <span class="keyword">in</span> (<span class="variable">%str%</span>) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">xcopy</span> <span class="variable">%artsPath%</span> <span class="variable">%%a</span>\source\_posts /Y</span><br><span class="line">    <span class="built_in">cd</span> /d <span class="variable">%%a</span></span><br><span class="line">    <span class="keyword">call</span> git pull</span><br><span class="line">    <span class="keyword">call</span> hexo clean</span><br><span class="line">    <span class="keyword">call</span> hexo d -g</span><br><span class="line">    <span class="keyword">call</span> git add *</span><br><span class="line">    <span class="keyword">call</span> git commit -m update_%<span class="number">1</span></span><br><span class="line">    <span class="keyword">call</span> git push</span><br><span class="line"><span class="comment">    REM 将剩余字符串赋值给str变量</span></span><br><span class="line">    <span class="built_in">set</span> str="<span class="variable">%%b</span>"</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">goto</span> GIT_VISTOR</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果要自己填写注释可以将 AddArticle 换成%1 来获取第一个参数</p>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初次尝试Linux并记录一二</title>
      <link href="/2017/05/19/%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95Linux%E5%B9%B6%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%8C/"/>
      <url>/2017/05/19/%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95Linux%E5%B9%B6%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="假如我有一个Linux系统"><a href="#假如我有一个Linux系统" class="headerlink" title="假如我有一个Linux系统"></a>假如我有一个Linux系统</h2><p>安装过程：加载中…<br>版本：Ubuntu Server 16.04.1 LTS 64位<br>得到一个IP：<em>.</em>.<em>.</em></p><h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h2><blockquote><p><a href="http://baike.baidu.com/item/winscp" target="_blank" rel="noopener">WinSCP</a>: WinSCP是一个Windows环境下使用SSH的开源图形化SFTP客户端<br><a href="http://baike.baidu.com/item/putty" target="_blank" rel="noopener">PuTTY</a>: PuTTY是一个Telnet、SSH、rlogin、纯TCP以及串行接口连接软件<br><a href="http://pan.baidu.com/s/1qXMTI0W" target="_blank" rel="noopener">网盘下载</a><br><a id="more"></a></p></blockquote><h2 id="设置winscp集成终端Putty"><a href="#设置winscp集成终端Putty" class="headerlink" title="设置winscp集成终端Putty"></a>设置winscp集成终端Putty</h2><p><img src="http://images2015.cnblogs.com/blog/662652/201705/662652-20170519153005057-1651388030.png" alt="">   </p><h2 id="新建会话"><a href="#新建会话" class="headerlink" title="新建会话"></a>新建会话</h2><p><img src="http://images2015.cnblogs.com/blog/662652/201705/662652-20170519153432369-1864483638.png" alt=""></p><h2 id="连接Putty"><a href="#连接Putty" class="headerlink" title="连接Putty"></a>连接Putty</h2><p><img src="http://images2015.cnblogs.com/blog/662652/201705/662652-20170519154120775-1272003420.png" alt=""></p><h2 id="安装一个软件然后学习一堆命令"><a href="#安装一个软件然后学习一堆命令" class="headerlink" title="安装一个软件然后学习一堆命令"></a>安装一个软件然后学习一堆命令</h2><blockquote><p>ubuntu安装软件可参考：<a href="http://www.cnblogs.com/xwdreamer/p/3623454.html" target="_blank" rel="noopener">http://www.cnblogs.com/xwdreamer/p/3623454.html</a></p><ol><li>安装一个tree来查看目录树<br><code>sudo apt-get install tree</code>：意作以管理员身份使用apt-get安装tree程序<br><img src="http://images2015.cnblogs.com/blog/662652/201705/662652-20170519155052713-342502905.png" alt=""></li><li>命令示例<br><img src="http://images2015.cnblogs.com/blog/662652/201705/662652-20170519155708728-497212186.png" alt=""></li></ol></blockquote><h2 id="文件操作的一些命令"><a href="#文件操作的一些命令" class="headerlink" title="文件操作的一些命令"></a>文件操作的一些命令</h2><blockquote><p>更多总结：<a href="http://www.cnblogs.com/chenhaoyu/p/6668571.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenhaoyu/p/6668571.html</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ls    显示文件或目录</span><br><span class="line">     -l 列出文件详细信息l(list)</span><br><span class="line">     -a 列出当前目录下所有文件及目录，包括隐藏文件</span><br><span class="line">touch   创建空文件</span><br><span class="line">          创建示例：touch hello.txt</span><br><span class="line"> <span class="built_in">echo</span>   写入字符到文件  </span><br><span class="line">          打印示例：<span class="built_in">echo</span> <span class="string">'hello world'</span></span><br><span class="line">          写入示例: <span class="built_in">echo</span> <span class="string">"hello"</span>&gt;hello.txt</span><br><span class="line">          追加示例: <span class="built_in">echo</span> <span class="string">"hello233"</span>&gt;&gt;hello.txt</span><br><span class="line">          更多技巧：http://blog.csdn.net/xukai871105/article/details/35834703</span><br><span class="line"></span><br><span class="line">  cat   查看文件内容</span><br><span class="line">          查看示例：cat hello.txt</span><br><span class="line">   wc   统计文本中行数，字数，字符数</span><br><span class="line">   cp   复制文件</span><br><span class="line">          复制示例：cp hello.txt hello2.txt</span><br><span class="line">   mv   移动或重命名</span><br><span class="line">          移动示例：mv hello2.txt hello3.txt <span class="comment">#移动到同一个目录==重命名</span></span><br><span class="line">   rm   删除文件</span><br><span class="line">     -r 递归删除</span><br><span class="line">     -f 强制删除</span><br><span class="line">          删除文件示例：rm hello3.txt</span><br><span class="line">          删除目录示例：rm ./testdir -r</span><br><span class="line">          </span><br><span class="line"></span><br><span class="line">mkdir   创建目录</span><br><span class="line">     -p 创建上层目录，如目录早已存在则不当作错误</span><br><span class="line">          创建示例： mkdir testdir/a   <span class="comment">#testdir存在</span></span><br><span class="line">          创建示例2： mkdir testdir2/<span class="built_in">test</span>/ -p  <span class="comment">#testdir2不存在</span></span><br><span class="line">          </span><br><span class="line">   <span class="built_in">cd</span>   切换目录</span><br><span class="line"></span><br><span class="line">rmdir   删除空目录</span><br><span class="line">          删除示例：rmdir testdir <span class="comment">#非空目录使用rm testdir -r</span></span><br><span class="line">  <span class="built_in">pwd</span>   显示当前目录</span><br><span class="line"></span><br><span class="line"> find   在文件系统中搜索某文件</span><br><span class="line">          查找示例：find testdir *.txt <span class="comment">#查找testdir下所有txt文件</span></span><br><span class="line">          更多技巧：http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html</span><br><span class="line"> grep   在文本文件中查找字符串</span><br><span class="line">          查找示例：grep <span class="string">'he'</span> ./hello.txt</span><br><span class="line">          更多技巧：http://www.cnblogs.com/end/archive/2012/02/21/2360965.html</span><br><span class="line">          </span><br><span class="line"> tree  安装后使用tree命令以树节点查看目录文件</span><br><span class="line"> nano  一个文本编辑器</span><br><span class="line">         使用示例：nano  hello.txt 编辑完成Ctrl+X，y，回车~~</span><br></pre></td></tr></table></figure><h2 id="apt-get和dpkg的一些命令"><a href="#apt-get和dpkg的一些命令" class="headerlink" title="apt-get和dpkg的一些命令"></a>apt-get和dpkg的一些命令</h2><blockquote><p>更多详情见：<a href="http://www.cnblogs.com/forward/archive/2012/01/10/2318483.html" target="_blank" rel="noopener">http://www.cnblogs.com/forward/archive/2012/01/10/2318483.html</a>    </p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apt-cache search <span class="comment"># ------(package 搜索包)</span></span><br><span class="line">apt-cache show <span class="comment">#------(package 获取包的相关信息，如说明、大小、版本等)</span></span><br><span class="line">apt-get install <span class="comment"># ------(package 安装包)</span></span><br><span class="line">apt-get install <span class="comment"># -----(package --reinstall 重新安装包)</span></span><br><span class="line">apt-get -f install <span class="comment"># -----(强制安装, "-f = --fix-missing"当是修复安装吧...)</span></span><br><span class="line">apt-get remove <span class="comment">#-----(package 删除包)</span></span><br><span class="line">apt-get remove --purge <span class="comment"># ------(package 删除包，包括删除配置文件等)</span></span><br><span class="line">apt-get autoremove --purge <span class="comment"># ----(package 删除包及其依赖的软件包+配置文件等（只对6.10有效，强烈推荐）)</span></span><br><span class="line">apt-get update <span class="comment">#------更新源</span></span><br><span class="line">apt-get upgrade <span class="comment">#------更新已安装的包</span></span><br><span class="line">apt-get dist-upgrade <span class="comment"># ---------升级系统</span></span><br><span class="line">apt-get dselect-upgrade <span class="comment">#------使用 dselect 升级</span></span><br><span class="line">apt-cache depends <span class="comment">#-------(package 了解使用依赖)</span></span><br><span class="line">apt-cache rdepends <span class="comment"># ------(package 了解某个具体的依赖,当是查看该包被哪些包依赖吧...)</span></span><br><span class="line">apt-get build-dep <span class="comment"># ------(package 安装相关的编译环境)</span></span><br><span class="line">apt-get <span class="built_in">source</span> <span class="comment">#------(package 下载该包的源代码)</span></span><br><span class="line">apt-get clean &amp;&amp; apt-get autoclean <span class="comment"># --------清理下载文件的存档 &amp;&amp; 只清理过时的包</span></span><br><span class="line">apt-get check <span class="comment">#-------检查是否有损坏的依赖</span></span><br><span class="line">dpkg -S filename -----查找filename属于哪个软件包</span><br><span class="line">apt-file search filename -----查找filename属于哪个软件包</span><br><span class="line">apt-file list packagename -----列出软件包的内容</span><br><span class="line">apt-file update --更新apt-file的数据库</span><br><span class="line"></span><br><span class="line">dpkg --info <span class="string">"软件包名"</span> --列出软件包解包后的包名称.</span><br><span class="line">dpkg -l --列出当前系统中所有的包.可以和参数less一起使用在分屏查看. (类似于rpm -qa)</span><br><span class="line">dpkg -l |grep -i <span class="string">"软件包名"</span> --查看系统中与<span class="string">"软件包名"</span>相关联的包.</span><br><span class="line">dpkg -s 查询已安装的包的详细信息.</span><br><span class="line">dpkg -L 查询系统中已安装的软件包所安装的位置. (类似于rpm -ql)</span><br><span class="line">dpkg -S 查询系统中某个文件属于哪个软件包. (类似于rpm -qf)</span><br><span class="line">dpkg -I 查询deb包的详细信息,在一个软件包下载到本地之后看看用不用安装(看一下呗).</span><br><span class="line">dpkg -i 手动安装软件包(这个命令并不能解决软件包之前的依赖性问题),如果在安装某一个软件包的时候遇到了软件依赖的问题,可以用apt-get -f install在解决信赖性这个问题.</span><br><span class="line">dpkg -r 卸载软件包.不是完全的卸载,它的配置文件还存在.</span><br><span class="line">dpkg -P 全部卸载(但是还是不能解决软件包的依赖性的问题)</span><br><span class="line">dpkg -reconfigure 重新配置</span><br></pre></td></tr></table></figure><h2 id="搭建一个nodejs环境"><a href="#搭建一个nodejs环境" class="headerlink" title="搭建一个nodejs环境"></a>搭建一个nodejs环境</h2><ol><li><code>wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></li><li><code>nvm install stable</code> #安装最新稳定版          </li><li><code>nano hello.js</code> 新建一个文件;注：nano,vi都是Linux自带的文本编辑器，我选择了nano，不要问我为什么~<br>输入完成后 <code>Ctrl+x</code>保存，输入<code>y</code>,然后回车就可退出，若想查看hello.js: <code>cat hello.js</code> </li></ol><pre><code class="js"><span class="comment">//粘贴下面的代码到编辑器（复制后单右键）</span><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>{  res.writeHead(<span class="number">200</span>, {<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>});  res.end(<span class="string">'Hello World233\n'</span>);}).listen(<span class="number">2323</span>, <span class="string">'0.0.0.0'</span>);<span class="comment">//这里需要监听0.0.0.0,使其能在外网访问到</span><span class="built_in">console</span>.log(<span class="string">'服务启动：http://ip:2323/'</span>);  </code></pre><ol start="4"><li>现在就可以在本地访问<code>http://服务器ip:2323/</code>看到输出了</li></ol><h2 id="激活root用户"><a href="#激活root用户" class="headerlink" title="激活root用户"></a>激活root用户</h2><blockquote><p>root用户是系统中唯一的超级管理员，它具有等同于操作系统的权限</p><ol start="0"><li>第一次激活需要设置root用户的密码，如果出现<code>su: Authentication failure</code>就需要重置密码</li><li>设置root密码：sudo passwd<br>Password:就输入你当前的用户密码<br>Enter new UNIX password：root的新密码<br>Retype new UNIX password：重复设置的新密码   </li></ol></blockquote><ol start="2"><li><p>切换用户   </p><p>切换到root用户：<code>su root</code><br>切换到ubuntu:<code>su ubuntu</code>   </p></li></ol><p>最后，园子虐我千万遍，我待园子如初恋~<img src="http://images2015.cnblogs.com/blog/662652/201705/662652-20170519173917494-1528058664.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js实用方法记录-指不定哪天就会用到的js方法</title>
      <link href="/2017/05/19/js%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95-%E6%8C%87%E4%B8%8D%E5%AE%9A%E5%93%AA%E5%A4%A9%E5%B0%B1%E4%BC%9A%E7%94%A8%E5%88%B0%E7%9A%84js%E6%96%B9%E6%B3%95/"/>
      <url>/2017/05/19/js%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95-%E6%8C%87%E4%B8%8D%E5%AE%9A%E5%93%AA%E5%A4%A9%E5%B0%B1%E4%BC%9A%E7%94%A8%E5%88%B0%E7%9A%84js%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="js实用方法记录-指不定哪天就会用到的js方法"><a href="#js实用方法记录-指不定哪天就会用到的js方法" class="headerlink" title="js实用方法记录-指不定哪天就会用到的js方法"></a>js实用方法记录-指不定哪天就会用到的js方法</h1><blockquote><p>常用或者不常用都有</p></blockquote><h2 id="判断是否在微信浏览器中"><a href="#判断是否在微信浏览器中" class="headerlink" title="判断是否在微信浏览器中"></a>判断是否在微信浏览器中</h2><blockquote><p>测试代码：<code>isWeiXin()==false</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否在微信中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isWeixin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span> (ua.match(<span class="regexp">/MicroMessenger/i</span>) == <span class="string">"micromessenger"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="全角转半角"><a href="#全角转半角" class="headerlink" title="全角转半角"></a>全角转半角</h2><blockquote><p>测试代码：<code>wholetoHalf(&#39;ｈｅｌｌｏ&#39;&#39;)==&#39;hello&#39;</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换全角字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; txt 含全角字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wholetoHalf</span>(<span class="params">txt</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!txt) &#123;</span><br><span class="line">        <span class="keyword">return</span> txt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; txt.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (txt.charCodeAt(i) &gt; <span class="number">65280</span> &amp;&amp; txt.charCodeAt(i) &lt; <span class="number">65375</span>) &#123;</span><br><span class="line">            tmp += <span class="built_in">String</span>.fromCharCode(txt.charCodeAt(i) - <span class="number">65248</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (txt.charCodeAt(i) == <span class="number">12288</span>) &#123;</span><br><span class="line">            tmp += <span class="built_in">String</span>.fromCharCode(<span class="number">32</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp += <span class="built_in">String</span>.fromCharCode(txt.charCodeAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成Guid"><a href="#生成Guid" class="headerlink" title="生成Guid"></a>生成Guid</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成Guid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genGuid</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">S4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (((<span class="number">1</span> + <span class="built_in">Math</span>.random()) * <span class="number">0x10000</span>) | <span class="number">0</span>).toString(<span class="number">16</span>).substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (S4() + S4() + <span class="string">"-"</span> + S4() + <span class="string">"-4"</span> + S4().substr(<span class="number">0</span>, <span class="number">3</span>) + <span class="string">"-"</span> + S4() + <span class="string">"-"</span> + S4() + S4() + S4()).toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取滚动条距顶部距离"><a href="#获取滚动条距顶部距离" class="headerlink" title="获取滚动条距顶部距离"></a>获取滚动条距顶部距离</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取滚动条距顶部距离</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="number">0</span>, bodyScrollTop = <span class="number">0</span>, documentScrollTop = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.body) &#123;</span><br><span class="line">        bodyScrollTop = <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement) &#123;</span><br><span class="line">        documentScrollTop = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">    &#125;</span><br><span class="line">    scrollTop = (bodyScrollTop - documentScrollTop &gt; <span class="number">0</span>) ? bodyScrollTop : documentScrollTop;</span><br><span class="line">    <span class="keyword">return</span> scrollTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取滚动条高度"><a href="#获取滚动条高度" class="headerlink" title="获取滚动条高度"></a>获取滚动条高度</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取滚动条高度 默认</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollHeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scrollHeight = <span class="number">0</span>, bodyScrollHeight = <span class="number">0</span>, documentScrollHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.body) &#123;</span><br><span class="line">        bodyScrollHeight = <span class="built_in">document</span>.body.scrollHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement) &#123;</span><br><span class="line">        documentScrollHeight = <span class="built_in">document</span>.documentElement.scrollHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    scrollHeight = (bodyScrollHeight - documentScrollHeight &gt; <span class="number">0</span>) ? bodyScrollHeight : documentScrollHeight;</span><br><span class="line">    <span class="keyword">return</span> scrollHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过判断滚动条位置操作元素"><a href="#通过判断滚动条位置操作元素" class="headerlink" title="通过判断滚动条位置操作元素"></a>通过判断滚动条位置操作元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(getScrollHeight() &gt; <span class="built_in">document</span>.documentElement.clientHeight </span><br><span class="line">    &amp;&amp; getScrollTop()&gt;getScrollHeight()/<span class="number">4</span>)&#123;<span class="comment">//有滚动条且滚动条距离顶部在四分之外</span></span><br><span class="line">    <span class="comment">//显示回到顶部浮层什么的~~</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编码HTML"><a href="#编码HTML" class="headerlink" title="编码HTML"></a>编码HTML</h2><blockquote><p>UBB：HTML代码的安全代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换HTML字符串为UBB字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toUbb</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">str = str.replace(<span class="regexp">/&lt;/ig</span>,<span class="string">'&amp;lt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/&gt;/ig</span>,<span class="string">'&amp;gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\n/ig</span>,<span class="string">'&lt;br /&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[code\](.+?)\[\/code\]/ig</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">1</span>, $<span class="number">2</span></span>) </span>&#123;<span class="keyword">return</span> phpcode($<span class="number">2</span>);&#125;);</span><br><span class="line"></span><br><span class="line">str = str.replace(<span class="regexp">/\[hr\]/ig</span>,<span class="string">'&lt;hr /&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[\/(size|color|font|backcolor)\]/ig</span>,<span class="string">'&lt;/font&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[(sub|sup|u|i|strike|b|blockquote|li)\]/ig</span>,<span class="string">'&lt;$1&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[\/(sub|sup|u|i|strike|b|blockquote|li)\]/ig</span>,<span class="string">'&lt;/$1&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[\/align\]/ig</span>,<span class="string">'&lt;/p&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[(\/)?h([1-6])\]/ig</span>,<span class="string">'&lt;$1h$2&gt;'</span>);</span><br><span class="line"></span><br><span class="line">str = str.replace(<span class="regexp">/\[align=(left|center|right|justify)\]/ig</span>,<span class="string">'&lt;p align="$1"&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[size=(\d+?)\]/ig</span>,<span class="string">'&lt;font size="$1"&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[color=([^\[\&lt;]+?)\]/ig</span>, <span class="string">'&lt;font color="$1"&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[backcolor=([^\[\&lt;]+?)\]/ig</span>, <span class="string">'&lt;font style="background-color:$1"&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[font=([^\[\&lt;]+?)\]/ig</span>, <span class="string">'&lt;font face="$1"&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[list=(a|A|1)\](.+?)\[\/list\]/ig</span>,<span class="string">'&lt;ol type="$1"&gt;$2&lt;/ol&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[(\/)?list\]/ig</span>,<span class="string">'&lt;$1ul&gt;'</span>);</span><br><span class="line"></span><br><span class="line">str = str.replace(<span class="regexp">/\[s:(\d+)\]/ig</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">1</span>,$<span class="number">2</span></span>)</span>&#123; <span class="keyword">return</span> smilepath($<span class="number">2</span>);&#125;);</span><br><span class="line">str = str.replace(<span class="regexp">/\[img\]([^\[]*)\[\/img\]/ig</span>,<span class="string">'&lt;img src="$1" border="0" /&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[url=([^\]]+)\]([^\[]+)\[\/url\]/ig</span>, <span class="string">'&lt;a href="$1"&gt;'</span>+<span class="string">'$2'</span>+<span class="string">'&lt;/a&gt;'</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/\[url\]([^\[]+)\[\/url\]/ig</span>, <span class="string">'&lt;a href="$1"&gt;'</span>+<span class="string">'$1'</span>+<span class="string">'&lt;/a&gt;'</span>);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解码ubb字符串"><a href="#解码ubb字符串" class="headerlink" title="解码ubb字符串"></a>解码ubb字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换UBB字符串为HTML字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHtml</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//详情见：http://tool.oschina.net/ubb</span></span><br><span class="line">        <span class="comment">//str = str.replace(/(\r\n|\n|\r)/ig, '');</span></span><br><span class="line">        str = str.replace(<span class="regexp">/&lt;br[^&gt;]*&gt;/ig</span>,<span class="string">'\n'</span>);</span><br><span class="line">        str = str.replace(<span class="regexp">/&lt;p[^&gt;\/]*\/&gt;/ig</span>,<span class="string">'\n'</span>);</span><br><span class="line">        <span class="comment">//str = str.replace(/\[code\](.+?)\[\/code\]/ig, function($1, $2) &#123;return phpcode($2);&#125;);</span></span><br><span class="line">        str = str.replace(<span class="regexp">/\son[\w]&#123;3,16&#125;\s?=\s*([\'\"]).+?\1/ig</span>,<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">        str = str.replace(<span class="regexp">/&lt;hr[^&gt;]*&gt;/ig</span>,<span class="string">'[hr]'</span>);</span><br><span class="line">        str = str.replace(<span class="regexp">/&lt;(sub|sup|u|strike|b|i|pre)&gt;/ig</span>,<span class="string">'[$1]'</span>);</span><br><span class="line">        str = str.replace(<span class="regexp">/&lt;\/(sub|sup|u|strike|b|i|pre)&gt;/ig</span>,<span class="string">'[/$1]'</span>);</span><br><span class="line">        str = str.replace(<span class="regexp">/&lt;(\/)?strong&gt;/ig</span>,<span class="string">'[$1b]'</span>);</span><br><span class="line">        str = str.replace(<span class="regexp">/&lt;(\/)?em&gt;/ig</span>,<span class="string">'[$1i]'</span>);</span><br><span class="line">        str = str.replace(<span class="regexp">/&lt;(\/)?blockquote([^&gt;]*)&gt;/ig</span>,<span class="string">'[$1blockquote]'</span>);</span><br><span class="line"></span><br><span class="line">        str = str.replace(<span class="regexp">/&lt;img[^&gt;]*smile=\"(\d+)\"[^&gt;]*&gt;/ig</span>,<span class="string">'[s:$1]'</span>);</span><br><span class="line">        str = str.replace(<span class="regexp">/&lt;img[^&gt;]*src=[\'\"\s]*([^\s\'\"]+)[^&gt;]*&gt;/ig</span>,<span class="string">'[img]'</span>+<span class="string">'$1'</span>+<span class="string">'[/img]'</span>);</span><br><span class="line">        str = str.replace(<span class="regexp">/&lt;a[^&gt;]*href=[\'\"\s]*([^\s\'\"]*)[^&gt;]*&gt;(.+?)&lt;\/a&gt;/ig</span>,<span class="string">'[url=$1]'</span>+<span class="string">'$2'</span>+<span class="string">'[/url]'</span>);</span><br><span class="line">        <span class="comment">//str = str.replace(/&lt;h([1-6]+)([^&gt;]*)&gt;(.*?)&lt;\/h\1&gt;/ig,function($1,$2,$3,$4)&#123;return h($3,$4,$2);&#125;);</span></span><br><span class="line"></span><br><span class="line">        str = str.replace(<span class="regexp">/&lt;[^&gt;]*?&gt;/ig</span>, <span class="string">''</span>);</span><br><span class="line">        str = str.replace(<span class="regexp">/&amp;amp;/ig</span>, <span class="string">'&amp;'</span>);</span><br><span class="line">        str = str.replace(<span class="regexp">/&amp;lt;/ig</span>, <span class="string">'&lt;'</span>);</span><br><span class="line">        str = str.replace(<span class="regexp">/&amp;gt;/ig</span>, <span class="string">'&gt;'</span>);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js实用方法记录-简单cookie操作</title>
      <link href="/2017/05/19/js%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95-%E7%AE%80%E5%8D%95cookie%E6%93%8D%E4%BD%9C/"/>
      <url>/2017/05/19/js%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95-%E7%AE%80%E5%8D%95cookie%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="js实用方法记录-简单cookie操作"><a href="#js实用方法记录-简单cookie操作" class="headerlink" title="js实用方法记录-简单cookie操作"></a>js实用方法记录-简单cookie操作</h1><blockquote><p>设置cookie：setCookie(名称,值,保存时间,保存域);<br>获取cookie：setCookie(名称);<br>移除cookie：setCookie(名称,值,-1,保存域);</p></blockquote><h2 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h2><blockquote><p>测试代码：<code>setCookie(&#39;test&#39;,&#39;hello&#39;)</code> //保存session级的cookie到根域<br>测试代码：<code>setCookie(&#39;test&#39;,&#39;hello&#39;,30,false)</code> //保存30天且保存到当前全域名</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置cookie</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; name cookie名称</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; value cookie值</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125;[expiredays=null] 过期时间 默认session级别 &lt;=0移除cookie</span></span><br><span class="line"><span class="comment"> * @param &#123;bool&#125;[saveRoot=true] 保存的域 默认根域</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, expiredays=null,saveRoot=false</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> exdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    exdate.setDate(exdate.getDate() + expiredays)</span><br><span class="line">    <span class="keyword">var</span> cookie = name + <span class="string">"="</span> + value + <span class="string">';path=/'</span> + ((expiredays == <span class="literal">null</span>) ? <span class="string">""</span> : <span class="string">";expires="</span> + exdate.toGMTString());</span><br><span class="line">    <span class="keyword">if</span>(saveRoot)&#123;</span><br><span class="line">    <span class="comment">//适用于一级，二级，本地域名</span></span><br><span class="line">      <span class="keyword">var</span> domain =((location.host.match(<span class="regexp">/\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;/g</span>) || location.hostname==<span class="string">'localhost'</span>)? location.hostname:(<span class="string">'.'</span> + (location.host.split(<span class="string">'.'</span>)[<span class="number">2</span>]!=<span class="literal">undefined</span>?(location.host.split(<span class="string">'.'</span>)[<span class="number">1</span>]+<span class="string">'.'</span>+location.host.split(<span class="string">'.'</span>)[<span class="number">2</span>]):location.host)));</span><br><span class="line">      cookie+=(<span class="string">';domain='</span>+domain);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.cookie = cookie;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h2><blockquote><p>测试代码: <code>getCookie(&#39;test&#39;)==&#39;hello&#39;</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取cookie</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; name cookie名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr, reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| )"</span> + name + <span class="string">"=([^;]*)(;|$)"</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr = <span class="built_in">document</span>.cookie.match(reg))</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">unescape</span>(arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js实用方法记录-动态加载css、js</title>
      <link href="/2017/05/19/js%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDcssjs/"/>
      <url>/2017/05/19/js%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDcssjs/</url>
      <content type="html"><![CDATA[<h1 id="js实用方法记录-动态加载css、js"><a href="#js实用方法记录-动态加载css、js" class="headerlink" title="js实用方法记录-动态加载css、js"></a>js实用方法记录-动态加载css、js</h1><blockquote><p>附送一个加载iframe,h5打开app代码</p></blockquote><h2 id="1-动态加载js文件到head标签并执行回调"><a href="#1-动态加载js文件到head标签并执行回调" class="headerlink" title="1. 动态加载js文件到head标签并执行回调"></a>1. 动态加载js文件到head标签并执行回调</h2><blockquote><p>方法调用：<code>dynamicLoadJs(&#39;http://www.yimo.link/static/js/main.min.js&#39;,function(){alert(&#39;加载成功&#39;)});</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态加载JS</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; url 脚本地址</span></span><br><span class="line"><span class="comment"> * @param &#123;function&#125; callback  回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dynamicLoadJs</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">    script.src = url;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(callback)==<span class="string">'function'</span>)&#123;</span><br><span class="line">        script.onload = script.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.readyState || <span class="keyword">this</span>.readyState === <span class="string">"loaded"</span> || <span class="keyword">this</span>.readyState === <span class="string">"complete"</span>)&#123;</span><br><span class="line">                callback();</span><br><span class="line">                script.onload = script.onreadystatechange = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    head.appendChild(script);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-动态加载css文件到head"><a href="#2-动态加载css文件到head" class="headerlink" title="2. 动态加载css文件到head"></a>2. 动态加载css文件到head</h2><blockquote><p>方法调用： <code>dynamicLoadCss(&#39;http://www.yimo.link/static/css/style.css&#39;)</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态加载CSS</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; url 样式地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dynamicLoadCss</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</span><br><span class="line">    link.type=<span class="string">'text/css'</span>;</span><br><span class="line">    link.rel = <span class="string">'stylesheet'</span>;</span><br><span class="line">    link.href = url;</span><br><span class="line">    head.appendChild(link);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-动态加载脚本文件"><a href="#3-动态加载脚本文件" class="headerlink" title="3. 动态加载脚本文件"></a>3. 动态加载脚本文件</h2><blockquote><p>参考：<a href="http://www.cnblogs.com/yuanke/p/5039699.html" target="_blank" rel="noopener">http://www.cnblogs.com/yuanke/p/5039699.html</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态加载css脚本</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; cssText css样式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStyleString</span>(<span class="params">cssText</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>);</span><br><span class="line">    style.type = <span class="string">"text/css"</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// firefox、safari、chrome和Opera</span></span><br><span class="line">        style.appendChild(<span class="built_in">document</span>.createTextNode(cssText));</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">        <span class="comment">// IE早期的浏览器 ,需要使用style元素的stylesheet属性的cssText属性</span></span><br><span class="line">        style.styleSheet.cssText = cssText;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(style);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> css = <span class="string">"body&#123;color:blue;&#125;"</span>;</span><br><span class="line">loadStyleString(css);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态加载js脚本</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; code js脚本</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScriptString</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// firefox、safari、chrome和Opera</span></span><br><span class="line">        script.appendChild(<span class="built_in">document</span>.createTextNode(code));</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">        <span class="comment">// IE早期的浏览器 ,需要使用script的text属性来指定javascript代码。</span></span><br><span class="line">        script.text = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">"function test()&#123;alert('test');&#125;"</span>;</span><br><span class="line">loadScriptString(text);</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><h2 id="4-动态加载iframe到body标签并执行回调"><a href="#4-动态加载iframe到body标签并执行回调" class="headerlink" title="4. 动态加载iframe到body标签并执行回调"></a>4. 动态加载iframe到body标签并执行回调</h2><blockquote><p>方法调用：<code>dynamicLoadIframe(&#39;http://www.yimo.link&#39;,function(){alert(&#39;加载成功&#39;)},&#39;&#39;);</code>      </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态加载Iframe</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; url 脚本地址</span></span><br><span class="line"><span class="comment"> * @param &#123;function&#125; callback  回调函数</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; style  加载样式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dynamicLoadIframe</span>(<span class="params">url,callback,style</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">  iframe.src = url;</span><br><span class="line">  iframe.style=style||<span class="string">'display:none;width:0px;height:0px;'</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span>(callback)==<span class="string">'function'</span>)&#123;</span><br><span class="line">      iframe.onload = iframe.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!<span class="keyword">this</span>.readyState || <span class="keyword">this</span>.readyState === <span class="string">"loaded"</span> || <span class="keyword">this</span>.readyState === <span class="string">"complete"</span>) &#123;</span><br><span class="line">              callback();</span><br><span class="line">              iframe.onload = iframe.onreadystatechange = <span class="literal">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  body.appendChild(iframe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-M站中下载-打开app"><a href="#5-M站中下载-打开app" class="headerlink" title="5. M站中下载/打开app"></a>5. M站中下载/打开app</h2><p>方法测试：<code>openApp(&#39;ios页面&#39;,&#39;**.apk&#39;,&#39;metools://home&#39;);</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openApp</span>(<span class="params">iosDownUrl,andDownUrl,appUrl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();    </span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/iphone|ipad|ipod/</span>.test(ua)) &#123;<span class="comment">//ios跳转到store</span></span><br><span class="line">      <span class="built_in">window</span>.location.href = iosDownUrl;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(ua.indexOf(<span class="string">"micromessenger"</span>) &gt; <span class="number">-1</span>)&#123;<span class="comment">//微信中不能打开其他app</span></span><br><span class="line">      <span class="built_in">window</span>.location.href = andDownUrl;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/android/</span>.test(ua)) &#123;<span class="comment">//安卓手机尝试调用app</span></span><br><span class="line">      <span class="keyword">if</span>(!appUrl)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'未指定需要打开的App,可参考http://www.oschina.net/code/snippet_256033_35330/'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> su = appUrl;<span class="comment">//"metools://index";//自定义协议</span></span><br><span class="line">      <span class="keyword">var</span> n = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href = andDownUrl</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">      <span class="keyword">var</span> r = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</span><br><span class="line">      r.src = su;</span><br><span class="line">      r.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'iframe load'</span>)</span><br><span class="line">        clearTimeout(n);</span><br><span class="line">        r.parentNode.removeChild(r);</span><br><span class="line">        <span class="built_in">window</span>.location.href = su;</span><br><span class="line">      &#125;;</span><br><span class="line">      r.setAttribute(<span class="string">"style"</span>, <span class="string">"display:none;"</span>);</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(r);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.location.href = andDownUrl;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用node自动生成html并调用cmd命令提交代码到仓库</title>
      <link href="/2017/05/06/%E4%BD%BF%E7%94%A8node%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90html%E5%B9%B6%E8%B0%83%E7%94%A8cmd%E5%91%BD%E4%BB%A4%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0%E4%BB%93%E5%BA%93/"/>
      <url>/2017/05/06/%E4%BD%BF%E7%94%A8node%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90html%E5%B9%B6%E8%B0%83%E7%94%A8cmd%E5%91%BD%E4%BB%A4%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="生成html提交到git仓库"><a href="#生成html提交到git仓库" class="headerlink" title="生成html提交到git仓库"></a>生成html提交到git仓库</h1><blockquote><p>基于目前的express博客,写了一点代码,通过request模块来请求站点，将html保存到coding-pages目录，复制静态文件夹到coding-pages,最后使用node的child_process模块执行cmd命令提交到仓库~~<br><a id="more"></a></p></blockquote><h2 id="1-发送http请求"><a href="#1-发送http请求" class="headerlink" title="1. 发送http请求"></a>1. 发送http请求</h2><hr><pre><code>var request = require(&apos;request&apos;);var options = {    url: url,    encoding: null,    headers: { &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Macintosh;     Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.65 Safari/537.36&apos; }};request(options, function (error, response, body) {    //请求的回调，编码问题使用iconv模块解决    //var iconv = require(&apos;iconv-lite&apos;);    //var html=iconv.decode(body,&apos;utf-8&apos;);    //若是需要解析html则可以使用cheerio模块    //var cheerio=require(&apos;cheerio&apos;).load(html,{decodeEntities: false});    //然后就可以像jqueryy一样去解析html了。    //cheerio(&apos;选择器&apos;);});</code></pre><p>然后就可以愉快的抓数据了。之前也写过基于request，iconv，cheerio,schedule(定时调度模块)写了一个抓取的<a href="https://coding.net/u/yimocoding/p/YFKDataGrab/git" target="_blank" rel="noopener">框架</a> </p><ol start="2"><li>保存html到目录   </li></ol><hr><p>得到url的路径部分(除去域名)，即：/index.html,/msg.html…<br>现在只需要根据这个路径和获取到的html保存即可<br>此时有了保存的路径和内容，保存还不小事一桩么。如下。    </p><pre><code>function writeText(pathName,content){       var dir= pathHelper.dirname(pathName);//获取到路径中的目录    fs.exists(dir, function (exists) {//如果不存在则创建目录        if(exists==false){            fs.mkdir(dir);        }    });    fs.writeFile(pathName, content, function (err) {//写入内容        if (err){            console.log(pathName+&apos;生成失败&apos;);        }    });}</code></pre><ol start="3"><li>使用node执行.bat文件复制静态文件到coding-pages目录</li></ol><hr><blockquote><p>复制目录可以使用<a href="https://coding.net/u/yimocoding/p/yimocoding/git/blob/server/website/utils/dirHelper.js" target="_blank" rel="noopener">async模块实现的目录操作</a><br>调用copyDir方法即可。<br>也可以使用child_process模块来调用cmd命令实现     </p></blockquote><p>注：直接使用require(‘child_process’).exec 执行xcopy并不能复制目录，需要一种折中的方式<br>如下：         </p><pre><code>var exec = require(&apos;child_process&apos;).exec;var execbat = __dirname + &apos;\\exec.bat&apos;;//1. 创建复制脚本commonHelper.writeText(execbat, &apos;xcopy F:\\CodingRepos\\yimocoding\\coding-pages\\tag F:\\CodingRepos\\yimocoding\\coding-pages\\tag3 /s /e /Q /Y /I&apos;);//2.执行批处理复制目录exec(execbat, function (err, stdout, stderr) {    if (err) {        console.log(err);    }    else{        console.log(&apos;复制成功&apos;);    }});//3.删除批处理文件exec(&apos;del &apos; + execbat, function (err, stdout, stderr) {    if (err) {        console.log(err);    }else{        console.log(&apos;删除脚本成功&apos;);    }})</code></pre><ol start="4"><li>啥？怎么提交到git</li></ol><hr><p>运行环境安装好。能从cmd命令提交(配置环境变量)<br>然后，看代码呗~~</p><pre><code>var cmds = [    &apos;git add *&apos;,    &apos;git commit -m &quot;提交。。。&quot;&apos;,    &apos;git push&apos;]cmds.forEach(function (cmd, i) {    setTimeout(function () {        console.log(cmd);        exec(cmd, function (err, stdout, stderr) {            if (err) {                console.log(err);            }        });    }, i * 1000);})</code></pre><p>写文章还是挺累的。但是把用到的东西记录下来是有必要的。文笔欠佳，然记录一二也是挺好滴。</p>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>express使用记录</title>
      <link href="/2017/05/06/express%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/05/06/express%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="随便记录下系列-node-gt-express"><a href="#随便记录下系列-node-gt-express" class="headerlink" title="随便记录下系列 - node-&gt;express"></a>随便记录下系列 - node-&gt;express</h1><blockquote><p>文章用啥写？→<em>→ VsCode。<br>代码用啥写？→</em>→ VsCode。<br>编辑器下载：<a href="http://pan.baidu.com/s/1qYpmzpE" target="_blank" rel="noopener">VsCode</a>  </p></blockquote><h2 id="一、windows下安装node-js环境：-下载地址"><a href="#一、windows下安装node-js环境：-下载地址" class="headerlink" title="一、windows下安装node.js环境： 下载地址"></a>一、windows下安装node.js环境： <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">下载地址</a></h2><hr><blockquote><p>相比以前搭过的服务端语言的环境,node环境的安装简直是业界良心<br>即使第一次折腾了2天，第二次折腾了2小时，第三次折腾了2分钟</p></blockquote><ol><li>下载其他版本只需要替换下载链接 <code>https://nodejs.org/dist/v6.2.0/node-v6.2.0-x64.msi</code> 的2个版本号6.2.0为你需要的版本即可   </li><li>尽量别把node安装在C盘(使用D:\Program Files\nodejs) </li><li>基础配置项(根据需要设置环境变量)<br> 设置全局安装包路径： <code>npm config set prefix &quot;D:\Program Files\nodejs\node_global</code><br> 设置缓存目录： <code>npm config set cache &quot;D:\Program Files\nodejs\node_cache</code><br> 设置淘宝镜像源： <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>    </li></ol><blockquote><p>PS： vue2.0用node-v4.5吧~，npm升级命令<code>npm update</code> 升级npm版本,若是不行则切换为32位版本的试试,再不行换个系统试试T-_-T</p></blockquote><a id="more"></a><h2 id="二、使用express"><a href="#二、使用express" class="headerlink" title="二、使用express"></a>二、使用express</h2><hr><h3 id="安装express-中文网"><a href="#安装express-中文网" class="headerlink" title="安装express 中文网"></a>安装express <a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">中文网</a></h3><blockquote><p>看文档！！！</p><ol><li>有网,有 node ,有 npm/cnpm/…</li><li>全局安装express： <code>npm install express -g</code></li><li>安装express应用生成器： <code>npm install express-generator -g</code></li><li>创建一个express(v4.14.0)应用： <code>express mydemo</code></li><li>启动应用： <code>npm start</code>  </li></ol></blockquote><h3 id="自动更新修改-supervisor"><a href="#自动更新修改-supervisor" class="headerlink" title="自动更新修改 supervisor"></a>自动更新修改 <a href="https://www.npmjs.com/package/supervisor" target="_blank" rel="noopener">supervisor</a></h3><hr><blockquote><p>运行起express应用,并做了一丁点修改后，习惯性保存后去刷新了页面，卧槽，【假装这是一张表情图】，左思右想百思不得其解~~~<br>于是百度 “<code>express 自动刷新</code>“,你以为出来了么？并没有~<br>那就换个词试试：”<code>express 修改更新</code>“,遂知<a href="https://www.npmjs.com/package/supervisor" target="_blank" rel="noopener">supervisor</a>~      </p></blockquote><ol><li>安装：<code>npm install supervisor -g</code></li><li>启动express：<code>supervisor ./bin/www</code></li><li>名字太长了~，改package.json-&gt;scripts-&gt;start配置啊：<code>{&quot;start&quot;: &quot;supervisor ./bin/www&quot;}</code>      </li><li>在正确的目录使用正确的姿势执行<code>npm start</code></li></ol><h3 id="修改模板引擎为jshtml"><a href="#修改模板引擎为jshtml" class="headerlink" title="修改模板引擎为jshtml"></a>修改模板引擎为<a href="https://github.com/elmerbulthuis/jshtml" target="_blank" rel="noopener">jshtml</a></h3><hr><blockquote><p>若要问我为什么，我只能说看着爽,即使jshtml最后一次更新在n年前~</p></blockquote><ol><li>安装<a href="https://github.com/elmerbulthuis/jshtml-express" target="_blank" rel="noopener"><code>jshtml-express</code></a>到项目：<code>npm install jshtml-express --save</code></li><li>在app.js设置模板引擎为jsthml<br> <code>app.engine(&#39;jshtml&#39;, require(&#39;jshtml-express&#39;));</code><br> <code>app.set(&#39;view engine&#39;, &#39;jshtml&#39;);</code></li><li>视图文件修改后缀名为.jshtml(.jshtml没高亮？把后缀改成cshtml写代码,然后修改vscode文件关联项：<code>files.associations</code>为<code>{&quot;*.jshtml&quot;:&quot;cshtml&quot;}</code>)</li><li>然后就去瞅文档吧。哈哈</li></ol><ul><li>路由中输出模型的时候需要用<code>res.locals = model;</code>输出模型，视图中使用<code>@locals</code>表示为模型</li><li>博客已使用express+jshtml：<a href="https://coding.net/u/yimocoding/p/yimocoding/git/tree/server/" target="_blank" rel="noopener">https://coding.net/u/yimocoding/p/yimocoding/git/tree/server/</a></li></ul><hr><p>博客园主页：<a href="http://www.cnblogs.com/morang/" target="_blank" rel="noopener">cnblogs.com</a><br>Coding主页：<a href="https://coding.net/u/yimocoding" target="_blank" rel="noopener">coding.net</a>      </p>]]></content>
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iis发布后模板字体不能加载的解决方案</title>
      <link href="/2017/05/06/iis%E5%8F%91%E5%B8%83%E5%90%8E%E6%A8%A1%E6%9D%BF%E5%AD%97%E4%BD%93%E4%B8%8D%E8%83%BD%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2017/05/06/iis%E5%8F%91%E5%B8%83%E5%90%8E%E6%A8%A1%E6%9D%BF%E5%AD%97%E4%BD%93%E4%B8%8D%E8%83%BD%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h2 id="在使用ace模板的过程中就曾遇到过图标不显示的情况，"><a href="#在使用ace模板的过程中就曾遇到过图标不显示的情况，" class="headerlink" title="在使用ace模板的过程中就曾遇到过图标不显示的情况，"></a>在使用ace模板的过程中就曾遇到过图标不显示的情况，</h2><p>1、在iis和vs运行都不能显示图标，添加缺失的字体库后可以访问</p><p>2、把项目签入到阿里云时再一次失效，解决方法是添加Mime类型</p><ul><li><p>.woff  application/x-font-woff</p></li><li><p>.woff2 application/x-font-woff</p></li><li><p>.svg   image/svg+xml</p></li></ul><p>3、在使用H+模板的时候又出现了问题，然后前两种都没能解决问题，因为mvc的原因，</p><p>需要在webconfig中的system.webServer节点添加配置</p><p>代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.webServer&gt;</span><br><span class="line">   &lt;staticContent&gt;</span><br><span class="line">      &lt;remove fileExtension=&quot;.woff&quot;/&gt;</span><br><span class="line">      &lt;mimeMap fileExtension=&quot;.woff&quot; mimeType=&quot;application/x-font-woff&quot; /&gt;</span><br><span class="line">      &lt;remove fileExtension=&quot;.woff2&quot;/&gt;</span><br><span class="line">      &lt;mimeMap fileExtension=&quot;.woff2&quot; mimeType=&quot;application/x-font-woff2&quot; /&gt;</span><br><span class="line">      &lt;remove fileExtension=&quot;.ttf&quot; /&gt;</span><br><span class="line">      &lt;mimeMap fileExtension=&quot;.ttf&quot; mimeType=&quot;application/x-font-truetype&quot; /&gt;</span><br><span class="line">      &lt;remove fileExtension=&quot;.svg&quot; /&gt;</span><br><span class="line">      &lt;mimeMap fileExtension=&quot;.svg&quot; mimeType=&quot;image/svg+xml&quot; /&gt;</span><br><span class="line">      &lt;remove fileExtension=&quot;.otf&quot; /&gt;</span><br><span class="line">      &lt;mimeMap fileExtension=&quot;.otf&quot; mimeType=&quot;application/x-font-opentype&quot; /&gt;</span><br><span class="line">      &lt;remove fileExtension=&quot;.eot&quot; /&gt;</span><br><span class="line">      &lt;mimeMap fileExtension=&quot;.eot&quot; mimeType=&quot;application/vnd.ms-fontobject&quot; /&gt;</span><br><span class="line">    &lt;/staticContent&gt;</span><br><span class="line">&lt;/system.webServer&gt;</span><br></pre></td></tr></table></figure><p>–仅以记录开发中所遇问题。</p>]]></content>
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>C#使用NOPI导入Excel</title>
      <link href="/2017/05/03/Csharp%E4%BD%BF%E7%94%A8NOPI%E5%AF%BC%E5%85%A5Excel/"/>
      <url>/2017/05/03/Csharp%E4%BD%BF%E7%94%A8NOPI%E5%AF%BC%E5%85%A5Excel/</url>
      <content type="html"><![CDATA[<h2 id="使用NOPI导入Excel文档"><a href="#使用NOPI导入Excel文档" class="headerlink" title="使用NOPI导入Excel文档"></a>使用NOPI导入Excel文档</h2><blockquote><p>NOPI版本：2.3.0,依赖于NPOI的SharpZipLib版本：0.86,经测试适用于.net4.0+</p></blockquote><h2 id="记录遇到的几个问题"><a href="#记录遇到的几个问题" class="headerlink" title="记录遇到的几个问题"></a>记录遇到的几个问题</h2><ol><li>NOPI中的<code>IWorkbook</code>接口：xls使用<code>HSSFWorkbook</code>类实现，xlsx使用<code>XSSFWorkbook</code>类实现           </li><li>日期转换，判断<code>row.GetCell(j).CellType == NPOI.SS.UserModel.CellType.Numeric &amp;&amp; HSSFDateUtil.IsCellDateFormatted(row.GetCell(j)</code><br>不能直接使用<code>row.GetCell(j).DateCellValue</code>,这玩意会直接抛出异常来~   </li></ol><a id="more"></a><h3 id="1-将文件流转换为DataTable"><a href="#1-将文件流转换为DataTable" class="headerlink" title="1. 将文件流转换为DataTable"></a>1. 将文件流转换为DataTable</h3><pre><code>/// &lt;summary&gt;/// 根据Excel格式读取Excel/// &lt;/summary&gt;/// &lt;param name=&quot;stream&quot;&gt;文件流&lt;/param&gt;/// &lt;param name=&quot;type&quot;&gt;Excel格式枚举类型，xls/xlsx&lt;/param&gt;/// &lt;param name=&quot;sheetName&quot;&gt;表名，默认取第一张&lt;/param&gt;/// &lt;returns&gt;DataTable&lt;/returns&gt;private static DataTable ImportExcel(Stream stream, ExcelExtType type, string sheetName){    DataTable dt = new DataTable();    IWorkbook workbook;    try    {        //xls使用HSSFWorkbook类实现，xlsx使用XSSFWorkbook类实现        switch (type)        {            case ExcelExtType.xlsx:                workbook = new XSSFWorkbook(stream);                break;            default:                workbook = new HSSFWorkbook(stream);                break;        }        ISheet sheet = null;        //获取工作表 默认取第一张        if (string.IsNullOrWhiteSpace(sheetName))            sheet = workbook.GetSheetAt(0);        else            sheet = workbook.GetSheet(sheetName);        if (sheet == null)            return null;        IEnumerator rows = sheet.GetRowEnumerator();        #region 获取表头        IRow headerRow = sheet.GetRow(0);        int cellCount = headerRow.LastCellNum;        for (int j = 0; j &lt; cellCount; j++)        {            ICell cell = headerRow.GetCell(j);            if (cell != null)            {                dt.Columns.Add(cell.ToString());            }            else            {                dt.Columns.Add(&quot;&quot;);            }        }        #endregion        #region 获取内容        for (int i = (sheet.FirstRowNum + 1); i &lt;= sheet.LastRowNum; i++)        {            IRow row = sheet.GetRow(i);            DataRow dataRow = dt.NewRow();            for (int j = row.FirstCellNum; j &lt; cellCount; j++)            {                if (row.GetCell(j) != null)                {                    //判断单元格是否为日期格式                    if (row.GetCell(j).CellType == NPOI.SS.UserModel.CellType.Numeric &amp;&amp; HSSFDateUtil.IsCellDateFormatted(row.GetCell(j)))                    {                        if (row.GetCell(j).DateCellValue.Year &gt;=1970)                        {                            dataRow[j] = row.GetCell(j).DateCellValue.ToString();                        }                        else                        {                            dataRow[j] = row.GetCell(j).ToString();                        }                    }                    else                    {                        dataRow[j] = row.GetCell(j).ToString();                    }                }            }            dt.Rows.Add(dataRow);        }        #endregion    }    catch (Exception ex)    {        dt=null;    }    finally    {        //if (stream != null)        //{        //    stream.Close();        //    stream.Dispose();        //}    }    return dt;}</code></pre><h3 id="2-文件上载导入"><a href="#2-文件上载导入" class="headerlink" title="2. 文件上载导入"></a>2. 文件上载导入</h3><pre><code>/// &lt;summary&gt;/// 上传Excel导入/// &lt;/summary&gt;/// &lt;param name=&quot;file&quot;&gt;上载文件对象&lt;/param&gt;/// &lt;param name=&quot;errorMsg&quot;&gt;错误信息&lt;/param&gt;/// &lt;param name=&quot;sheetName&quot;&gt;表名，默认取第一张&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static DataTable Import(System.Web.HttpPostedFileBase file, ref string errorMsg, string sheetName = &quot;&quot;){    if (file == null || file.InputStream == null || file.InputStream.Length == 0)    {        errorMsg = &quot;请选择要导入的Excel文件&quot;;        return null;    }    var excelType = GetExcelFileType(file.FileName);    if (excelType == null)    {        errorMsg = &quot;请选择正确的Excel文件&quot;;        return null;    }    using (var stream = new MemoryStream())    {        file.InputStream.Position = 0;        file.InputStream.CopyTo(stream);        var dt = ImportExcel(stream, excelType.Value, sheetName);        if (dt == null)            errorMsg = &quot;导入失败,请选择正确的Excel文件&quot;;        return dt;    }}</code></pre><h3 id="3-本地路径读取导入"><a href="#3-本地路径读取导入" class="headerlink" title="3. 本地路径读取导入"></a>3. 本地路径读取导入</h3><pre><code>/// &lt;summary&gt;/// 根据文件路径导入Excel/// &lt;/summary&gt;/// &lt;param name=&quot;filePath&quot;&gt;&lt;/param&gt;/// &lt;param name=&quot;errorMsg&quot;&gt;错误信息&lt;/param&gt;/// &lt;param name=&quot;sheetName&quot;&gt;表名，默认取第一张&lt;/param&gt;/// &lt;returns&gt;可能为null的DataTable&lt;/returns&gt;public static DataTable Import(string filePath, ref string errorMsg, string sheetName = &quot;&quot;){    var excelType = GetExcelFileType(filePath);    if (GetExcelFileType(filePath) == null)    {        errorMsg = &quot;请选择正确的Excel文件&quot;;        return null;    }    if (!File.Exists(filePath))    {        errorMsg = &quot;没有找到要导入的Excel文件&quot;;        return null;    }    DataTable dt;    using (var stream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))    {        dt = ImportExcel(stream, excelType.Value, sheetName);    }    if (dt == null)        errorMsg = &quot;导入失败,请选择正确的Excel文件&quot;;    return dt;}</code></pre><h3 id="4-完整demo"><a href="#4-完整demo" class="headerlink" title="4.完整demo"></a>4.完整demo</h3><p>附赠一个winform导入Excel的Demo。<br><a href="https://github.com/yimogit/NopiExcelDemo" target="_blank" rel="noopener">https://github.com/yimogit/NopiExcelDemo</a></p>]]></content>
      
      <categories>
          
          <category> dotnet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nopi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MSMQ队列学习记录</title>
      <link href="/2017/04/21/MSMQ%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/04/21/MSMQ%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="微软消息队列-MicroSoft-Message-Queue-MSMQ"><a href="#微软消息队列-MicroSoft-Message-Queue-MSMQ" class="headerlink" title="微软消息队列-MicroSoft Message Queue(MSMQ)"></a>微软消息队列-MicroSoft Message Queue(MSMQ)</h1><blockquote><p>使用感受：简单。</p></blockquote><h2 id="一、windows安装MSMQ服务"><a href="#一、windows安装MSMQ服务" class="headerlink" title="一、windows安装MSMQ服务"></a>一、windows安装MSMQ服务</h2><p>控制面板-&gt;控制面板-&gt;所有控制面板项-&gt;程序和功能-&gt;选中安装<br><img src="http://images2015.cnblogs.com/blog/662652/201704/662652-20170421161534259-1322353205.png" alt="">   </p><p>然后可在计算机管理–&gt;服务和应用程序-&gt;消息队列查看队列信息<br><img src="http://images2015.cnblogs.com/blog/662652/201704/662652-20170421161915931-257717995.png" alt="">    </p><h2 id="二、C-中使用MSMQ"><a href="#二、C-中使用MSMQ" class="headerlink" title="二、C#中使用MSMQ"></a>二、C#中使用MSMQ</h2><p>使用MessageQueue类操作MSMQ，其在System.Messaging命名空间下，需要添加引用</p><a id="more"></a><h3 id="定义的接口"><a href="#定义的接口" class="headerlink" title="定义的接口"></a>定义的接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public interface IMessageSender&lt;T&gt; : IDisposable</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    ///     发送消息</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;message&quot;&gt;消息对象&lt;/param&gt;</span><br><span class="line">    void SendMessage(T message);</span><br><span class="line"></span><br><span class="line">    void SendMessages(List&lt;T&gt; message);</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    ///     发送消息</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;message&quot;&gt;消息对象&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;label&quot;&gt;消息标签&lt;/param&gt;</span><br><span class="line">    void SendMessage(T message, string label);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">///     消息队列对象，由MQueueFactory创建指定路径的队列对象，可发送或批量接收消息。</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;typeparam name=&quot;T&quot;&gt;消息队列存储的消息对象类型&lt;/typeparam&gt;</span><br><span class="line">public sealed class MQueue&lt;T&gt; : IDisposable, IMessageSender&lt;T&gt;, IMessageReceiver&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    public MQueue(MessageQueue mq, string user = &quot;Everyone&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">        InnerQueue = mq;</span><br><span class="line">        InnerQueue.Formatter = new XmlMessageFormatter(new[] &#123; typeof(T) &#125;);</span><br><span class="line"></span><br><span class="line">        InnerQueue.SetPermissions(user ?? &quot;Everyone&quot;,</span><br><span class="line">            MessageQueueAccessRights.GenericRead | MessageQueueAccessRights.DeleteMessage |</span><br><span class="line">            MessageQueueAccessRights.DeleteQueue | MessageQueueAccessRights.DeleteJournalMessage);</span><br><span class="line">    &#125;</span><br><span class="line">    #region IMessageSender</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    ///     内部消息队列对象</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    private MessageQueue InnerQueue &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    ///     发送消息</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;message&quot;&gt;消息对象&lt;/param&gt;</span><br><span class="line">    public void SendMessage(T message)</span><br><span class="line">    &#123;</span><br><span class="line">        InnerQueue.Send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void SendMessages(List&lt;T&gt; message)</span><br><span class="line">    &#123;</span><br><span class="line">        foreach (var item in message)</span><br><span class="line">        &#123;</span><br><span class="line">            InnerQueue.Send(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    ///     发送消息</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;message&quot;&gt;消息对象&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;label&quot;&gt;消息标签&lt;/param&gt;</span><br><span class="line">    public void SendMessage(T message, string label)</span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            InnerQueue.Send(message, label);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            var path = InnerQueue.Path;</span><br><span class="line">            InnerQueue = new MessageQueue(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    #endregion </span><br><span class="line"></span><br><span class="line">    #region IMessageReceiver</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 获取队列中所有消息</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;typeparam name=&quot;T&quot;&gt;消息类型&lt;/typeparam&gt;</span><br><span class="line">    /// &lt;param name=&quot;exTarget&quot;&gt;异常时触发&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    public List&lt;T&gt; GetAllMessages&lt;T&gt;(MQExceptionTarget exTarget = null)</span><br><span class="line">    &#123;</span><br><span class="line">        return GetMessagesByNum&lt;T&gt;(null, exTarget);</span><br><span class="line">    &#125;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 获取队列中指定数量消息</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;typeparam name=&quot;T&quot;&gt;消息类型&lt;/typeparam&gt;</span><br><span class="line">    /// &lt;param name=&quot;num&quot;&gt;一次最多取num条数据，默认取所有数据&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;exTarget&quot;&gt;异常委托&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    public List&lt;T&gt; GetMessagesByNum&lt;T&gt;(int? num = null, MQExceptionTarget exTarget = null)</span><br><span class="line">    &#123;</span><br><span class="line">        var list = new List&lt;T&gt;();</span><br><span class="line">        if (num.HasValue &amp;&amp; num &lt;= 0)</span><br><span class="line">        &#123;</span><br><span class="line">            return list;</span><br><span class="line">        &#125;</span><br><span class="line">        MessageEnumerator enumerator = InnerQueue.GetMessageEnumerator2();</span><br><span class="line">        while (enumerator.MoveNext())</span><br><span class="line">        &#123;</span><br><span class="line">            Message msg = enumerator.RemoveCurrent();</span><br><span class="line">            enumerator.Reset();</span><br><span class="line">            if (msg != null)</span><br><span class="line">            &#123;</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    list.Add((T)msg.Body);</span><br><span class="line">                    if (num.HasValue &amp;&amp; list.Count &gt;= num)</span><br><span class="line">                    &#123;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (exTarget != null)</span><br><span class="line">                        exTarget(ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">    #endregion</span><br><span class="line"></span><br><span class="line">    public void Dispose()</span><br><span class="line">    &#123;</span><br><span class="line">        if (InnerQueue != null)</span><br><span class="line">        &#123;</span><br><span class="line">            InnerQueue.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建立队列工厂"><a href="#建立队列工厂" class="headerlink" title="建立队列工厂"></a>建立队列工厂</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">///  消息队列工厂，通过指定路径创建或获取相应队列对象</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class MQueueFactory</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    ///     默认队列路径，在未指定路径的情况下，将创建并返回该路径的消息队列对象</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    private const string DefaultPath = @&quot;.\private$\myQueue&quot;;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    ///     创建默认路径的消息队列对象</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;typeparam name=&quot;T&quot;&gt;消息队列存储的消息对象类型&lt;/typeparam&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    public static MQueue&lt;T&gt; Create&lt;T&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        return Create&lt;T&gt;(DefaultPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    ///     创建指定路径的消息队列路径</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;typeparam name=&quot;T&quot;&gt;消息队列存储的消息对象类型&lt;/typeparam&gt;</span><br><span class="line">    /// &lt;param name=&quot;connStr&quot;&gt;指定的消息队列链接字符串 def:&quot;.\private$\myQueue&quot;&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;autoCreate&quot;&gt;不存在则创建队列 远程地址不能创建&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;user&quot;&gt;获得队列额外权限的个人、组或计算机&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;cacheKey&quot;&gt;web中Cache键值&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    public static MQueue&lt;T&gt; Create&lt;T&gt;(string connStr=@&quot;.\private$\myQueue&quot;, bool autoCreate = false, string user = &quot;Everyone&quot;, string cacheKey = &quot;MQCache&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">        string path = connStr ?? DefaultPath;</span><br><span class="line">        HttpContext httpContext = HttpContext.Current;</span><br><span class="line">        if (autoCreate &amp;&amp; !MessageQueue.Exists(path))</span><br><span class="line">        &#123;</span><br><span class="line">            MessageQueue.Create(path);</span><br><span class="line">        &#125;</span><br><span class="line">        var mq = new MessageQueue(path);</span><br><span class="line">        if (httpContext != null)</span><br><span class="line">        &#123;</span><br><span class="line">            string key = &quot;MQueue&quot; + typeof(T).Name + cacheKey;</span><br><span class="line">            if ((httpContext.Cache[key] == null))</span><br><span class="line">            &#123;</span><br><span class="line">                httpContext.Cache[key] = new MQueue&lt;T&gt;(mq);</span><br><span class="line">            &#125;</span><br><span class="line">            return httpContext.Cache[key] as MQueue&lt;T&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">        return new MQueue&lt;T&gt;(mq,user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入队列"><a href="#写入队列" class="headerlink" title="写入队列"></a>写入队列</h3><p><code>MQueueFactory.Create&lt;string&gt;(@&quot;.\private$\myQueue&quot;, autoCreate: true).SendMessage(&quot;我是写入的数据~~~&quot;);</code></p><h3 id="获取消息"><a href="#获取消息" class="headerlink" title="获取消息"></a>获取消息</h3><p><code>MQueueFactory.Create&lt;string&gt;(@&quot;.\private$\myQueue&quot;).GetAllMessages&lt;string&gt;();</code></p>]]></content>
      
      <categories>
          
          <category> dotnet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> msmq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>weexpack打包weex项目运行及打包记录</title>
      <link href="/2017/03/01/weexpack%E6%89%93%E5%8C%85weex%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E5%8F%8A%E6%89%93%E5%8C%85%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/03/01/weexpack%E6%89%93%E5%8C%85weex%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E5%8F%8A%E6%89%93%E5%8C%85%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="构建weex项目"><a href="#构建weex项目" class="headerlink" title="构建weex项目"></a>构建weex项目</h1><ol><li>安装weex-toolkit  <code>cnpm install -g weex-toolkit</code>       </li><li>初始化一个项目只需新建文件夹并在目录下执行 <code>weex init</code> 即可     </li><li>安装依赖：<code>cnpm install</code>  </li><li>编译项目：<code>npm run dev</code>   </li><li>启动服务器：<code>npm run serve</code> //可以修改package.json的端口号来改变监听端口                   </li><li>可以执行的命令一览<br> <img src="https://dn-coding-net-production-pp.qbox.me/bbe02f9d-111a-4200-960a-d6f7931f56b7.png" alt="图片"> </li></ol><a id="more"></a><h1 id="使用weexpack打包weex项目"><a href="#使用weexpack打包weex项目" class="headerlink" title="使用weexpack打包weex项目"></a>使用weexpack打包weex项目</h1><blockquote><p>各种百度 ‘weex打包’ ‘如何打包weex apk’ ‘weex 发布 apk’  未果<br>最后在<a href="https://github.com/weexteam/article/issues/4#issuecomment-268810351" target="_blank" rel="noopener">这里</a>看到了这玩意T_T</p></blockquote><h2 id="weexpack-介绍-更多详情见Github"><a href="#weexpack-介绍-更多详情见Github" class="headerlink" title="weexpack 介绍 更多详情见Github"></a>weexpack 介绍 <a href="https://github.com/weexteam/weex-pack/blob/master/README.md" target="_blank" rel="noopener">更多详情见Github</a></h2><p>weexpack 是 weex 新一代的工程开发套件，是基于weex快速搭建应用原型的利器。它能够帮助开发者通过命令行创建weex工程，添加相应平台的weex app模版，并基于模版从本地、GitHub 或者  weex 应用市场安装插件，快速打包 weex 应用并安装到手机运行，对于具有分享精神的开发者而言还能够创建weex插件模版并发布插件到weex应用市场。</p><h2 id="开始我的安装"><a href="#开始我的安装" class="headerlink" title="开始我的安装"></a>开始我的安装</h2><ol start="0"><li><p>安装Android需要的环境：android环境折腾可参考<a href="http://www.cnblogs.com/morang/p/react-native-java-build.html" target="_blank" rel="noopener">windows下react-native环境搭建</a>    </p></li><li><p>安装weexpack：<a href="https://github.com/weexteam/weex-pack" target="_blank" rel="noopener">项目地址</a><br> <code>cnpm install -g weexpack</code>            </p></li><li>初始化一个weexpack程序：<br> <code>weexpack init dsb-weexpack</code></li><li>还原依赖：<br> <code>cnpm install</code></li><li>如果没有安装android SDK的好需要去安装sdk，安装好了就添加平台到项目：<code>weexpack platform add android</code><br>  <img src="https://dn-coding-net-production-pp.qbox.me/07d500bd-b616-49b2-9d30-68ef068ff51b.png" alt="图片"> </li><li><p>修改gradle-wrapper.properties文件gradle下载地址distributionUrl值为：<code>distributionUrl=file:///F:/gradle-2.14.1-all.zip</code></p></li><li><p>打包编译：<br> <code>weexpack build android</code>        </p></li><li>苦等ing……</li><li>两天过去了，于3月1日清晨成功下载完毕，且没有挂vpn~<br>生成文件如图所示<br><img src="http://images2015.cnblogs.com/blog/662652/201703/662652-20170301074624704-1290399162.png" alt=""></li><li>在夜神模拟器运行：首先使用adb连接到夜神模拟器<code>adb connect 127.0.0.1:62001</code>,再执行<code>weexpack run android</code>即可在模拟器中运行<br><img src="http://images2015.cnblogs.com/blog/662652/201703/662652-20170301075210157-753921257.png" alt=""></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://github.com/weexteam/weex-pack" target="_blank" rel="noopener">https://github.com/weexteam/weex-pack</a><br><a href="https://github.com/vczero/weex-learning" target="_blank" rel="noopener">https://github.com/vczero/weex-learning</a><br><a href="https://github.com/apache/incubator-weex" target="_blank" rel="noopener">https://github.com/apache/incubator-weex</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Python多渠道打包apk</title>
      <link href="/2017/02/18/%E4%BD%BF%E7%94%A8Python%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85apk/"/>
      <url>/2017/02/18/%E4%BD%BF%E7%94%A8Python%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85apk/</url>
      <content type="html"><![CDATA[<blockquote><p>往apk包中追加到一个空文件到META-INF目录以标识渠道，Android中获取此文件即可获得App的下载渠道</p></blockquote><ol><li>首先在info文件夹新建一个qdb.txt的空文本文件</li><li>新建channel.txt存放渠道来源<br> <img src="http://images2015.cnblogs.com/blog/662652/201702/662652-20170218104839613-682235498.png" alt="">    </li><li>运行Python代码即可将目录下的apk生成多渠道文件包<br> <img src="http://images2015.cnblogs.com/blog/662652/201702/662652-20170218105008472-1501177044.png" alt=""></li></ol><a id="more"></a><h2 id="Python代码如下："><a href="#Python代码如下：" class="headerlink" title="Python代码如下："></a>Python代码如下：</h2><pre><code>#!/usr/bin/python# coding=utf-8import zipfileimport shutilimport os# 空文件 便于写入此空文件到apk包中作为channel文件src_empty_file = &apos;info/qdb.txt&apos;# 创建一个空文件（不存在则创建）f = open(src_empty_file, &apos;w&apos;) f.close()# 获取当前目录中所有的apk源包src_apks = []# python3 : os.listdir()即可，这里使用兼容Python2的os.listdir(&apos;.&apos;)for file in os.listdir(&apos;.&apos;):    if os.path.isfile(file):        extension = os.path.splitext(file)[1][1:]        if extension in &apos;apk&apos;:            src_apks.append(file)# 获取渠道列表channel_file = &apos;info/channel.txt&apos;f = open(channel_file)lines = f.readlines()f.close()for src_apk in src_apks:    # file name (with extension)    src_apk_file_name = os.path.basename(src_apk)    # 分割文件名与后缀    temp_list = os.path.splitext(src_apk_file_name)    # name without extension    src_apk_name = temp_list[0]    # 后缀名，包含.   例如: &quot;.apk &quot;    src_apk_extension = temp_list[1]    # 创建生成目录,与文件名相关    output_dir = &apos;output_&apos; + src_apk_name + &apos;/&apos;    # 目录不存在则创建    if not os.path.exists(output_dir):        os.mkdir(output_dir)    # 遍历渠道号并创建对应渠道号的apk文件    for line in lines:        # 获取当前渠道号，因为从渠道文件中获得带有\n,所有strip一下        target_channel = line.strip()        # 拼接对应渠道号的apk        target_apk = output_dir + src_apk_name + &quot;-&quot; + target_channel + src_apk_extension          # 拷贝建立新apk        shutil.copy(src_apk,  target_apk)        # zip获取新建立的apk文件        zipped = zipfile.ZipFile(target_apk, &apos;a&apos;, zipfile.ZIP_DEFLATED)        # 初始化渠道信息        empty_channel_file = &quot;META-INF/qdb_{channel}&quot;.format(channel = target_channel)        # 写入渠道信息        zipped.write(src_empty_file, empty_channel_file)        # 关闭zip流        zipped.close()</code></pre><h2 id="Android中读取文件取得渠道ID"><a href="#Android中读取文件取得渠道ID" class="headerlink" title="Android中读取文件取得渠道ID"></a>Android中读取文件取得渠道ID</h2><pre><code>/** 获取渠道ID **/    public String getChannelId() {        Context context = cordova.getActivity().getApplicationContext();        //从apk包中获取        ApplicationInfo appinfo = context.getApplicationInfo();        String sourceDir = appinfo.sourceDir;        //默认放在meta-inf/里， 所以需要再拼接一下        String key = &quot;META-INF/qdbchannel&quot;;        String ret = &quot;&quot;;        ZipFile zipfile = null;        try {            zipfile = new ZipFile(sourceDir);            Enumeration&lt;?&gt; entries = zipfile.entries();            while (entries.hasMoreElements()) {                ZipEntry entry = ((ZipEntry) entries.nextElement());                String entryName = entry.getName();                if (entryName.startsWith(key)) {                    ret = entryName;                    break;                }            }        } catch (IOException e) {            e.printStackTrace();        } finally {            if (zipfile != null) {                try {                    zipfile.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }        String[] split = ret.split(&quot;_&quot;);        String channel = &quot;&quot;;        if (split != null &amp;&amp; split.length &gt;= 2) {            channel = ret.substring(split[0].length() + 1);        }        return channel;    }</code></pre><h3 id="附上查看apk内文件方法"><a href="#附上查看apk内文件方法" class="headerlink" title="附上查看apk内文件方法"></a>附上查看apk内文件方法</h3><ol><li>新建一个压缩包</li><li>打开压缩包</li><li>在压缩包内回退双击进入apk文件即可</li></ol>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react学习记录</title>
      <link href="/2017/02/12/react%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/02/12/react%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="react学习记录"><a href="#react学习记录" class="headerlink" title="react学习记录"></a>react学习记录</h1><h2 id="2017-01-08"><a href="#2017-01-08" class="headerlink" title="2017.01.08"></a>2017.01.08</h2><ol><li><p>在iOS上使用http链接的图片地址可能不会显示，参见<a href="https://segmentfault.com/a/1190000002933776" target="_blank" rel="noopener">这篇说明</a>修改。        </p></li><li><p>需要的组件都要在顶部引用。<br><img src="https://dn-coding-net-production-pp.qbox.me/981a29a8-2574-4e04-9432-d86f61132054.png" alt="图片"> </p></li><li><p>不能直接在组件外面写样式，需要显示传递，样式名按骆驼命名法书写<br>顺序声明和使用style属性，以借鉴CSS中的“层叠”做法（即后声明的属性会覆盖先声明的同名属性）       </p></li><li><p>Flexbox布局的说明 <a href="http://reactnative.cn/docs/0.40/layout-props.html" target="_blank" rel="noopener">http://reactnative.cn/docs/0.40/layout-props.html</a></p></li></ol><a id="more"></a><h2 id="react-native-项目初始化"><a href="#react-native-项目初始化" class="headerlink" title="react-native 项目初始化"></a>react-native 项目初始化</h2><ol><li>搭建java，android，node环境<br> <a href="http://www.cnblogs.com/morang/p/react-native-java-build.html" target="_blank" rel="noopener">http://www.cnblogs.com/morang/p/react-native-java-build.html</a>    </li><li>全局安装脚手架<br> <code>npm install react-native-cli -g</code>  </li><li>使用react-native-cli初始化项目<br> <code>react-native init 项目名称</code></li><li>修改android/gradle/wrapper/gradle-wrapper.properties文件的<code>distributionUrl</code>值为本地路径(墙)<br> <code>distributionUrl=file:///F:/CodingRepos/reactDemo/gradle-2.4-all.zip</code></li><li>绑定模拟器或真机 可以使用adb devices查看连接的设备<br> 5.1 使用<a href="https://www.yeshen.com/" target="_blank" rel="noopener">夜神模拟器</a>安装调试app<br> 5.2 使用adb命令链接设备到模拟器：<code>adb connect 127.0.0.1:62001</code>       <pre><code>端口号可使用 安装目录nox/bin/下的nox_adb devices查看或者查看进程PID         多个真机连接可用此connect Ip:port的方式连接到指定设备</code></pre> 5.3 若使用真机调试需要打开USB调试并允许通过USB安装应用</li><li><p>开始构建<br> <code>react-native run-android</code></p></li><li><p>构建时会启动8081端口为服务端来在保存代码后进行更新          </p></li><li><p>点击模拟器的摇一摇（Ctrl+0）选择Dev Setting-&gt;Debug Server host &amp; port for device-&gt; 电脑IP:8081<br> <img src="http://images2015.cnblogs.com/blog/662652/201702/662652-20170212150730135-700935076.png" alt=""></p></li><li><p>返回到桌面摇一摇<del>~Reload</del>~Over。        </p></li></ol><p><img src="http://images2015.cnblogs.com/blog/662652/201702/662652-20170212150701776-1049586653.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从零开始在win10系统搭建react-native开发环境</title>
      <link href="/2017/01/07/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%9C%A8win10%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BAreact-native%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2017/01/07/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%9C%A8win10%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BAreact-native%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h1 id="win10-react-native环境搭建"><a href="#win10-react-native环境搭建" class="headerlink" title="win10 react-native环境搭建"></a>win10 react-native环境搭建</h1><hr><blockquote><p>首先不得不先吐槽一下自己，一个坑总是踩很多次，且乐此不疲。<br>咋办? 写博客记录记录呗。               </p></blockquote><h2 id="零、记录的点"><a href="#零、记录的点" class="headerlink" title="零、记录的点"></a>零、记录的点</h2><ol><li><p>Java环境的下载与配置</p></li><li><p>Android环境的下载与配置</p></li><li><p>Node环境的下载与配置</p></li><li><p>创建第一个react-native应用  </p></li></ol><p>最终能够达到的目的：在手机上能够运行第一个React-Native应用~</p><p>以备后用，已将安装包上传到了<a href="http://pan.baidu.com/s/1dFgLPuT" target="_blank" rel="noopener">网盘</a> 密码：bqbc              </p><p><img src="https://dn-coding-net-production-pp.qbox.me/f5d0a6f2-9324-4899-9378-0da577a5b33d.png" alt="图片"><br><a id="more"></a></p><h2 id="一、Java环境的下载与配置"><a href="#一、Java环境的下载与配置" class="headerlink" title="一、Java环境的下载与配置"></a>一、Java环境的下载与配置</h2><p>记录下Java里面的三个<a href="http://blog.csdn.net/songkai320/article/details/51819046" target="_blank" rel="noopener">术语理解</a>    </p><h4 id="JDK是什么？"><a href="#JDK是什么？" class="headerlink" title="JDK是什么？"></a>JDK是什么？</h4><blockquote><p>答曰：JDK乃【Java开发工具包】 (Java Development Kit ) 的缩写,<br>是一种用于构建在 Java 平台上发布的应用程序、applet 和组件的开发环境</p></blockquote><h3 id="JRE是什么？"><a href="#JRE是什么？" class="headerlink" title="JRE是什么？"></a>JRE是什么？</h3><blockquote><p>答曰：JRE乃【Java运行环境】(Java Runtime Environment)的缩写,<br>其包含JVM标准实现及Java核心类库</p></blockquote><h3 id="JVM是什么？"><a href="#JVM是什么？" class="headerlink" title="JVM是什么？"></a>JVM是什么？</h3><blockquote><p>答曰：JVM是【Java虚拟机】(Java Virtual Machine)的缩写</p></blockquote><h3 id="下载安装配置JDK"><a href="#下载安装配置JDK" class="headerlink" title="下载安装配置JDK"></a>下载安装配置JDK</h3><ol><li>到<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">官网</a> 或者<a href="http://jdk.android-studio.org/" target="_blank" rel="noopener">android-studio</a>下载JDK                </li><li>安装JDK，我安装到的<code>D:\Software\JavaJdk</code> </li><li>必须得配置环境变量滴<br> ①java_home:<code>D:\Software\JavaJdk</code><br> ②classpath(.;开头):<code>.;%java_home%\lib\dt.jar;%java_home%\lib\tools.jar</code><br> ③追加path变量的值:<code>;%java_home%\bin</code><br><img src="https://dn-coding-net-production-pp.qbox.me/d5996b21-1403-4e67-ba41-8e647ea2cc2b.png" alt="图片"> </li></ol><h2 id="二、Android环境的下载与配置"><a href="#二、Android环境的下载与配置" class="headerlink" title="二、Android环境的下载与配置"></a>二、Android环境的下载与配置</h2><h3 id="下载Android-SDK"><a href="#下载Android-SDK" class="headerlink" title="下载Android SDK"></a>下载Android SDK</h3><hr><p>到<a href="http://tools.android-studio.org/index.php/sdk" target="_blank" rel="noopener">android-studio</a>下载SDK。<br>运行installer_r24.4.1-windows.exe安装、或zip解压出来的<code>SDK Manager.exe</code>        </p><p><img src="https://dn-coding-net-production-pp.qbox.me/407332aa-a5ee-40da-aefa-1de323e107fd.png" alt="图片"> </p><p>然后我安装了以下这些包(我的react-native版本是0.40.0)</p><p><img src="https://dn-coding-net-production-pp.qbox.me/e47c55bd-0f90-443c-bf16-c8860c8b726e.png" alt="图片">     </p><h3 id="SDKManager使用说明："><a href="#SDKManager使用说明：" class="headerlink" title="SDKManager使用说明："></a>SDKManager使用说明：</h3><hr><p>被镜像坑了，所以不推荐镜像，直接修改hosts文件就成—&gt;<a href="https://laod.cn" target="_blank" rel="noopener">去找最新的hosts</a><br>镜像地址—&gt;<a href="http://tools.android-studio.org/index.php/proxy" target="_blank" rel="noopener">去找最新的镜像地址</a>    </p><h3 id="镜像使用说明"><a href="#镜像使用说明" class="headerlink" title="镜像使用说明"></a>镜像使用说明</h3><hr><p>使用镜像安装不了23.0.1的同学趁早换hosts的方式或者挂vpn。     </p><p><img src="https://dn-coding-net-production-pp.qbox.me/a37b209b-56ba-4329-a044-a55429ef75b8.png" alt="图片">     </p><p>科学上网还是得备个vpn呐~~~     </p><p><img src="https://dn-coding-net-production-pp.qbox.me/d6a81e25-2b2c-40a0-bd85-dd70644f5de6.png" alt="图片"> </p><h3 id="SDK包下好了，接下来就配置系统环境变量吧"><a href="#SDK包下好了，接下来就配置系统环境变量吧" class="headerlink" title="SDK包下好了，接下来就配置系统环境变量吧"></a>SDK包下好了，接下来就配置系统环境变量吧</h3><hr><p>①ANDROID_HOME:<code>D:\Software\JavaAndroidSdk</code><br>②追加path变量的值:<code>%ANDROID_HOME%\platforms\;%ANDROID_HOME%\platform-tools\;%ANDROID_HOME%\tools\;%ANDROID_HOME%;</code><br>我的Path图</p><p><img src="https://dn-coding-net-production-pp.qbox.me/d63ba276-04c3-44df-bb6e-fd6b41972e1a.png" alt="图片"> </p><h3 id="测试Java环境，Android环境"><a href="#测试Java环境，Android环境" class="headerlink" title="测试Java环境，Android环境"></a>测试Java环境，Android环境</h3><hr><p><img src="https://dn-coding-net-production-pp.qbox.me/2c7e4384-a916-42af-9cff-51701bd7c882.png" alt="图片">     </p><p>失败自行回退检查~~</p><h2 id="三、安装node-js"><a href="#三、安装node-js" class="headerlink" title="三、安装node.js"></a>三、安装node.js</h2><p>node官网历史版本修改下载链接的值就能下载历史版本了<br>如：我使用的是版本是<a href="https://nodejs.org/dist/v6.2.0/node-v6.2.0-x64.msi" target="_blank" rel="noopener">V6.2.0</a><br>然后就是node的一些设置了<br><code>npm config set prefix &quot;D:\Program Files\nodejs\node_global&quot;</code>  //设置全局包目录,全局安装的工具等会放在此目录下，故windows下需要设置环境变量<br><code>npm config set cache &quot;D:\Program Files\nodejs\node_cache&quot;</code>    //设置缓存目录<br><code>npm config set registry https://registry.npm.taobao.org&quot;</code>     //设置淘宝镜像</p><p>之前有安装过node，卸载旧版重新安装到之前的目录就==升级了<br>npm升级命令<code>npm update</code></p><h2 id="四、创建第一个在手机上运行的react-native应用"><a href="#四、创建第一个在手机上运行的react-native应用" class="headerlink" title="四、创建第一个在手机上运行的react-native应用"></a>四、创建第一个在手机上运行的react-native应用</h2><ol><li>启动CMD定位到开发目录：例<code>F:\ReactDemo</code></li><li>全局安装<a href="https://github.com/facebook/react-native" target="_blank" rel="noopener"><code>npm install -g react-native-cli</code></a></li><li>初始化一个项目：<code>react-native init yimoapp</code></li><li><code>cd yimoapp</code></li><li>运行packager：<code>react-native start</code>  <blockquote><p>如果你碰到了ERROR Watcher took too long to load的报错，请尝试将这个文件中的MAX_WAIT_TIME值改得更大一些 (文件在node_modules/react-native/目录下)。<br>成功运行这时候可以用浏览器访问<bdi>http//localhost:8081/index.android.bundle?platform=android</bdi>查看服务端是否已成功启动</p></blockquote></li><li>真机运行,使用usb连接手机，开启USB调试权限</li><li>查看连接的设备：<code>adb devices</code><br>  <img src="https://dn-coding-net-production-pp.qbox.me/6130f787-3bf3-437b-a353-746550210595.png" alt="图片"> </li><li><p><code>react-native run-android</code>构建工程并自动安装到手机</p><blockquote><p>不要慌，先做点准备工作。<a href="http://gradle.android-studio.org/" target="_blank" rel="noopener">手动下载gradle-2.4-all.zip</a>到本地<br>修改 <code>F:\ReactDemo\yimoapp\android\gradle\wrapper\gradle-wrapper.properties</code>文件的<code>distributionUrl</code>配置为[本地的gradle-2.4-all.zip路径]以使其可离线下载<br><img src="https://dn-coding-net-production-pp.qbox.me/7bf85be0-1f5a-4ec2-be7a-ba93e2740b8f.png" alt="gradle-2.4-all配置图"><br><img src="https://dn-coding-net-production-pp.qbox.me/adf94677-334f-4832-aed5-46f9d1cbac08.png" alt="成功离线下载"> </p></blockquote></li><li><p>包安装得差不多的时候会提示你安装应用<br> <img src="https://dn-coding-net-production-pp.qbox.me/5772db37-212f-4d62-b85f-9182d228dab7.png" alt="图片"><br> 可能会有一个这样的错误，奇怪的是第一次安装有,这一次安装就没有遇到了。</p><p>  <img src="https://dn-coding-net-production-pp.qbox.me/495d3c84-c3e8-49d3-9bc2-c24f5cd2e27d.png" alt="图片"><br> 将android/build.gradle文件中的 classpath ‘com.android.tools.build:gradle:1.3.1’ 改为 classpath ‘com.android.tools.build:gradle:1.2.3’ 。猜测是插件包不兼容导致。</p></li><li><p>解决白屏问题<br>找到并开启应用的悬浮窗权限,以mui8.1为例，设置-&gt;授权管理-&gt;应用权限管理-&gt;yimoapp-&gt;勾选显示浮窗权限<br>然后再次打开yimoapp。我去。这次来个大红色的错误了</p><p><img src="https://dn-coding-net-production-pp.qbox.me/bbc9f9bd-a116-4e9f-a1cc-f439cd7266cc.png" alt="图片"> </p><p>咋办。摇一摇说不定有奇迹</p><p><img src="https://dn-coding-net-production-pp.qbox.me/4ea624fe-1062-452e-b0c2-6e91b84202b1.png" alt="图片"><br><img src="https://dn-coding-net-production-pp.qbox.me/835cf850-602f-47c7-8d67-4bb5bb0225c9.png" alt="图片"> </p><p>在回退刷新前。我去改了改<code>index.android.js</code>，好了回到页面摇一摇然后刷新    </p><p><img src="https://dn-coding-net-production-pp.qbox.me/180e6277-28ea-4f81-afdb-c4d379db529b.png" alt="图片">         </p></li></ol><h2 id="总结与收获"><a href="#总结与收获" class="headerlink" title="总结与收获"></a>总结与收获</h2><p>总结是很有必要的。<br>有很多问题是在Java和Android环境没有弄好的情况下会出现的。<br>参考文章：</p><ol><li><a href="http://www.tuicool.com/articles/26byiuZ" target="_blank" rel="noopener">http://www.tuicool.com/articles/26byiuZ</a> 这里面的错我也都遇到过~~</li><li><a href="http://www.cnblogs.com/suxun/p/5220564.html" target="_blank" rel="noopener">http://www.cnblogs.com/suxun/p/5220564.html</a> 有配置模拟器的</li></ol><p>一天就这样结束，一天就这样开始。</p>]]></content>
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>过去式的blogsv3</title>
      <link href="/2017/01/01/%E8%BF%87%E5%8E%BB%E5%BC%8F%E7%9A%84blogsv3/"/>
      <url>/2017/01/01/%E8%BF%87%E5%8E%BB%E5%BC%8F%E7%9A%84blogsv3/</url>
      <content type="html"><![CDATA[<blockquote><p>BlogV3–此为过去式~截图留恋<br>    <img src="http://images2015.cnblogs.com/blog/662652/201705/662652-20170522175645679-1665146531.png" alt=""> 图片再也找不回来了~<br>BlogV4已上线：hexo强力驱动 <a href="https://coding.net/u/yimocoding/p/yimocoding/git" target="_blank" rel="noopener">https://coding.net/u/yimocoding/p/yimocoding/git</a><br>     <img src="https://dn-coding-net-production-pp.qbox.me/42167a24-b588-4252-b187-fd315bec4576.png" alt="图片"> </p></blockquote><h1 id="博客满血复活了，啦啦啦"><a href="#博客满血复活了，啦啦啦" class="headerlink" title="博客满血复活了，啦啦啦"></a>博客满血复活了，啦啦啦</h1><blockquote><p>不知不觉天就亮了，2017年的第一步也随着朝霞的升起而迈出。<a href="http://www.yimo.link/" target="_blank" rel="noopener">http://www.yimo.link/</a> 我的博客又活过来了;<br>第一版是在2015,第二版是在2016，第三版即这一版在今天2017年1月1日;<br>每一个版本都收获了许多，成长了许多，让自己知道幸苦是没有白费的;<br>从第一版的后台使用angularjs+webapi的快速开发，到第二版的asp.net mvc的正确使用姿势，再到第三版的node-express-jshtml。<br>踩了无数的坑，熬了无数的夜，做出东西了，那无与伦比的成就感。哈哈哈哈哈哈</p><p>只有不断的尝试，才会有所获，有所得。<br><a id="more"></a></p></blockquote><h2 id="回首2016，我还做了这些玩意"><a href="#回首2016，我还做了这些玩意" class="headerlink" title="回首2016，我还做了这些玩意"></a>回首2016，我还做了这些玩意</h2><p>一、 尝试着搭建了一个asp.net mvc的框架：<a href="https://coding.net/u/yimocoding/p/YimoFramework/git" target="_blank" rel="noopener">YimoFramework源码</a><br>二、 C#写的一个自动签到的服务：<a href="https://coding.net/u/yimocoding/p/AutomaticSignService/git" target="_blank" rel="noopener">AutomaticSignService源码</a><br>三、 node写的一个抓数据的程序：<a href="https://coding.net/u/yimocoding/p/YFKDataGrab/git" target="_blank" rel="noopener">YFKDataGrab源码</a><br>四、 用vue2.0+mui3.3写了一个导航的App：<a href="https://coding.net/u/yimocoding/p/vue-mui-app/git" target="_blank" rel="noopener">vue-mui-app源码</a> <a href="http://app.yimo.link/" target="_blank" rel="noopener">http://app.yimo.link/</a><br>五、 用vue2.0+layui封装了一些组件，后面做博客的后台管理：<a href="https://coding.net/u/yimocoding/p/vue-layui/git" target="_blank" rel="noopener">vue-layui源码</a> <a href="http://vue-layui.yimo.link/#/admin" target="_blank" rel="noopener">http://vue-layui.yimo.link/#/admin</a><br>六、node-express+jshtml写的博客站点：<a href="https://coding.net/u/yimocoding/p/yimocoding/git" target="_blank" rel="noopener">yimocoding源码</a> <a href="http://www.yimo.link" target="_blank" rel="noopener">http://www.yimo.link</a></p><p>如图图所示，2016结束了，2017，迎接新的改变吧。<br> <img src="https://dn-coding-net-production-pp.qbox.me/49a0bec8-54d6-48eb-a256-81369b7b4835.png" alt="图片"> </p><p> <img src="https://dn-coding-net-production-pp.qbox.me/662ab51a-ecf8-4d2d-a7aa-1bac64c4067b.png" alt="图片"> </p><hr><p>等等，还没完呢。踩的坑还没有记录呢   </p><ol><li>问：jshtml文件没有语法高亮，看着好难受怎么办   </li></ol><p>答： vscode是可以配置文件管理的,文件-》首选项-》用户设置-》设置files.associations即可<br> <img src="https://dn-coding-net-production-pp.qbox.me/0d6ae02c-9ee0-4faa-9424-4bbed0c646d0.png" alt="图片"> </p><ol start="2"><li>问：写node的使用，node_modules如何不让他提交到git，不包含到工作区？</li></ol><p>答: 1问配置.gitignore文件，添加一行<code>node_modules/</code>即可;vscode可以设置files.exclude排除文件/夹   </p><ol start="3"><li>问：nginx到底要怎么配置反向代理,又如何再windows服务器上使用nginx后不影响存在的iis站点（公用80）</li></ol><p>答：访问<a href="http://www.yimo.link会经由nginx转发到代理地址上，如果服务器使用iis就将iis中的站点重新配置其他端口，然后一个站点配置一个server即可" target="_blank" rel="noopener">www.yimo.link会经由nginx转发到代理地址上，如果服务器使用iis就将iis中的站点重新配置其他端口，然后一个站点配置一个server即可</a></p><pre><code>server {    listen       80;    server_name  www.yimo.link;//解析的域名location / {    proxy_pass http://127.0.0.1:2333; //代理的地址/域名+端口的形式也可以}       </code></pre><p>over，发布，睡觉。</p>]]></content>
      
      <categories>
          
          <category> 程序猿之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言碎语 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asp.net mvc项目自定义区域</title>
      <link href="/2016/12/30/asp.net-mvc%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%BA%E5%9F%9F/"/>
      <url>/2016/12/30/asp.net-mvc%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%BA%E5%9F%9F/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>直接上干货就是，就不废话了。<br>使用场景：分离模块，多站点等~~   </p></blockquote><h2 id="一、分离模块"><a href="#一、分离模块" class="headerlink" title="一、分离模块"></a>一、分离模块</h2><blockquote><p>自定义视图引擎，设置视图路径格式<br>项目结构图<br><img src="http://images2015.cnblogs.com/blog/662652/201608/662652-20160810235943465-541781227.png" alt=""><br><a id="more"></a></p></blockquote><h1 id="1-Code-在Global-asax-Application-Start方法中添加自定义的视图引擎"><a href="#1-Code-在Global-asax-Application-Start方法中添加自定义的视图引擎" class="headerlink" title="1.Code: 在Global.asax Application_Start方法中添加自定义的视图引擎"></a>1.Code: 在Global.asax Application_Start方法中添加自定义的视图引擎</h1><pre><code>using System.Collections.Generic;using System.Web.Mvc;namespace MvcProjectMain.AreasViewEngine{    /// &lt;summary&gt;           /// 自定义视图引擎    /// &lt;/summary&gt;    /// &lt;remarks&gt;    ///  ViewEngines.Engines.Add(new MvcProjectMain.AreasViewEngine.ThemableRazorViewEngine());    /// &lt;/remarks&gt;    public class ThemableRazorViewEngine : VirtualPathProviderViewEngine    {        //所有区域分离到Modules文件夹,{2}为区域名        public ThemableRazorViewEngine()        {            ViewEngines.Engines.Clear();            AreaViewLocationFormats = new[]            {            &quot;~/Modules/{2}/Views/{1}/{0}.cshtml&quot;,             &quot;~/Modules/{2}/Views/Shared/{0}.cshtml&quot;,            };            AreaMasterLocationFormats = new[]            {            &quot;~/Modules/{2}/Views/{1}/{0}.cshtml&quot;,             &quot;~/Modules/{2}/Views/Shared/{0}.cshtml&quot;,            };            AreaPartialViewLocationFormats = new[]            {            &quot;~/Modules/{2}/Views/{1}/{0}.cshtml&quot;,             &quot;~/Modules/{2}/Views/Shared/{0}.cshtml&quot;,             };            ViewLocationFormats = new[]            {            &quot;~/Views/{1}/{0}.cshtml&quot;,             &quot;~/Views/Shared/{0}.cshtml&quot;,            };            MasterLocationFormats = new[]            {            &quot;~/Views/{1}/{0}.cshtml&quot;,             &quot;~/Views/Shared/{0}.cshtml&quot;,             };            PartialViewLocationFormats = new[]            {            &quot;~/Views/{1}/{0}.cshtml&quot;,             &quot;~/Views/Shared/{0}.cshtml&quot;,             };            FileExtensions = new[] { &quot;cshtml&quot; };        }        protected override IView CreatePartialView(ControllerContext controllerContext, string partialPath)        {            string layoutPath = null;            var runViewStartPages = false;            IEnumerable&lt;string&gt; fileExtensions = base.FileExtensions;            return new RazorView(controllerContext, partialPath, layoutPath, runViewStartPages, fileExtensions);        }        protected override IView CreateView(ControllerContext controllerContext, string viewPath, string masterPath)        {            string layoutPath = masterPath;            var runViewStartPages = true;            IEnumerable&lt;string&gt; fileExtensions = base.FileExtensions;            return new RazorView(controllerContext, viewPath, layoutPath, runViewStartPages, fileExtensions);        }    }}</code></pre><p>2.Code:在Global.asax中添加注册区域–&gt;AreaRegistration.RegisterAllAreas();</p><pre><code>public class ThemesAreaRegistration : AreaRegistration    {        public override string AreaName        {            get            {                return &quot;MvcProjectThemes&quot;;            }        }        public override void RegisterArea(AreaRegistrationContext context)        {            context.MapRoute(                &quot;MvcProjectThemes&quot;,                &quot;MvcProjectThemes/{controller}/{action}/{id}&quot;,                new { controller = &quot;Home&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional, },                namespaces: new string[] { &quot;MvcProjectThemes.Controllers&quot; }            );        }    }</code></pre><p>3.Code:注册主项目MvcProjectMain的路由 RouteConfig.RegisterRoutes(RouteTable.Routes);</p><pre><code>namespace MvcProjectMain{    public class RouteConfig    {        public static void RegisterRoutes(RouteCollection routes)        {            routes.IgnoreRoute(&quot;{resource}.axd/{*pathInfo}&quot;);            routes.MapRoute(                name: &quot;Default&quot;,                url: &quot;{controller}/{action}/{id}&quot;,                defaults: new { controller = &quot;Home&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional },                namespaces: new string[] { &quot;MvcProjectMain.Controllers&quot; }            );        }    }}</code></pre><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>主要代码就是步骤1中的ThemableRazorViewEngine.cs类。自定义查找路径，其他的都是MVC的基础知识了,不懂自行查阅资料</p>]]></content>
      
      <categories>
          
          <category> dotnet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dotnet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开心一刻</title>
      <link href="/2010/07/02/jokes/%E5%BC%80%E5%BF%83%E4%B8%80%E5%88%BB/"/>
      <url>/2010/07/02/jokes/%E5%BC%80%E5%BF%83%E4%B8%80%E5%88%BB/</url>
      <content type="html"><![CDATA[<ol><li><p>公园长凳上，她小鸟依人般靠在他的肩膀，一边摩挲着他的衣角，一边喃喃地说：“亲爱的，虽然我们认识没多久，但我觉得每天都过得好充实，一起经历了那么多事情，感觉我们像认识了好久好久一样呢。”<br>他轻轻搂了搂她，深情地答道：“是啊，也许这就是人们常说的度日如年吧。”</p><a id="more"></a></li><li><p>“知道为什么我们拥抱的时候能够强烈感受到彼此的心跳？”<br>“是因为我们爱的深，心相连？”<br>“不，是因为你平胸。”</p></li><li><p>三个年轻人聊天。<br>A：今天天气真热，应该戴个帽子。<br>B：好主意啊，最好带个绿帽子。<br>C：确实是好主意，不光身上凉，心里也拔凉拔凉的。</p></li><li><p>现在的人真是爱管闲事！我跟我女朋友在电话里吵架关他什么事？<br>他又不认识我女朋友。更可恶的他还叫来了保安！真讨厌，以后再也不来这家电影院了。</p></li><li><p>和同班一个MM玩足球，我说：“我守门可厉害，外号铜墙！！”<br>MM说：“切~~~ 我外号钢门！！我让你随便射，你也射不进来！！”<br>说完我爆笑，MM一路猛追打我。。。</p></li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>程序员漫画-010101</title>
      <link href="/2010/07/02/pics/%E7%BE%8E%E5%9B%BE%E9%89%B4%E8%B5%8F/"/>
      <url>/2010/07/02/pics/%E7%BE%8E%E5%9B%BE%E9%89%B4%E8%B5%8F/</url>
      <content type="html"><![CDATA[<p><img src="http://comic.szhshp.org/comic/10101/EP08/10101.EP8.Title.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt1.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt2.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt3.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt4.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt5.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt6.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt7.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt8.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt9.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt10.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt11.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt12.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt13.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt14.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt15.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt16.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt17.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt18.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt19.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt20.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt21.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt22.png" alt=""><br><img src="http://comic.szhshp.org/comic/10101/EP08/10101.Ep8.Pt23.png" alt=""></p>]]></content>
      
      
    </entry>
    
  
  
</search>
